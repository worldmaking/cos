#ifndef __glad_gl_h_
#define __glad_gl_h_

#ifdef __gl_h_
    #error OpenGL header already included (API: gl), remove previous include!
#endif
#define __gl_h_


#define GLAD_GL
#define GLAD_OPTION_GL_HEADER_ONLY

#if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__) && !defined(__SCITECH_SNAP__)
#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN 1
#endif
#include <windows.h>
#endif
#ifndef APIENTRY
#define APIENTRY
#endif
#ifndef APIENTRYP
#define APIENTRYP APIENTRY *
#endif
#ifdef __cplusplus
extern "C" {
#endif

#ifndef GLAPI
# if defined(GLAD_GLAPI_EXPORT)
#  if defined(_WIN32) || defined(__CYGWIN__)
#   if defined(GLAD_GLAPI_EXPORT_BUILD)
#    if defined(__GNUC__)
#     define GLAPI __attribute__ ((dllexport)) extern
#    else
#     define GLAPI __declspec(dllexport) extern
#    endif
#   else
#    if defined(__GNUC__)
#     define GLAPI __attribute__ ((dllimport)) extern
#    else
#     define GLAPI __declspec(dllimport) extern
#    endif
#   endif
#  elif defined(__GNUC__) && defined(GLAD_GLAPI_EXPORT_BUILD)
#   define GLAPI __attribute__ ((visibility ("default"))) extern
#  else
#   define GLAPI extern
#  endif
# else
#  define GLAPI extern
# endif
#endif

#define GL_VERSION_1_0 1
GLAPI int GLAD_GL_VERSION_1_0;
#define GL_VERSION_1_1 1
GLAPI int GLAD_GL_VERSION_1_1;
#define GL_VERSION_1_2 1
GLAPI int GLAD_GL_VERSION_1_2;
#define GL_VERSION_1_3 1
GLAPI int GLAD_GL_VERSION_1_3;
#define GL_VERSION_1_4 1
GLAPI int GLAD_GL_VERSION_1_4;
#define GL_VERSION_1_5 1
GLAPI int GLAD_GL_VERSION_1_5;
#define GL_VERSION_2_0 1
GLAPI int GLAD_GL_VERSION_2_0;
#define GL_VERSION_2_1 1
GLAPI int GLAD_GL_VERSION_2_1;
#define GL_VERSION_3_0 1
GLAPI int GLAD_GL_VERSION_3_0;
#define GL_VERSION_3_1 1
GLAPI int GLAD_GL_VERSION_3_1;
#define GL_VERSION_3_2 1
GLAPI int GLAD_GL_VERSION_3_2;
#define GL_VERSION_3_3 1
GLAPI int GLAD_GL_VERSION_3_3;
#define GL_VERSION_4_0 1
GLAPI int GLAD_GL_VERSION_4_0;
#define GL_VERSION_4_1 1
GLAPI int GLAD_GL_VERSION_4_1;


#include <stddef.h>
#ifndef GLEXT_64_TYPES_DEFINED
/* This code block is duplicated in glxext.h, so must be protected */
#define GLEXT_64_TYPES_DEFINED
/* Define int32_t, int64_t, and uint64_t types for UST/MSC */
/* (as used in the GL_EXT_timer_query extension). */
#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
#elif defined(__sun__) || defined(__digital__)
#include <inttypes.h>
#if defined(__STDC__)
#if defined(__arch64__) || defined(_LP64)
typedef long int int64_t;
typedef unsigned long int uint64_t;
#else
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#endif /* __arch64__ */
#endif /* __STDC__ */
#elif defined( __VMS ) || defined(__sgi)
#include <inttypes.h>
#elif defined(__SCO__) || defined(__USLC__)
#include <stdint.h>
#elif defined(__UNIXOS2__) || defined(__SOL64__)
typedef long int int32_t;
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#elif defined(_WIN32) && defined(__GNUC__)
#include <stdint.h>
#elif defined(_WIN32)
typedef __int32 int32_t;
typedef __int64 int64_t;
typedef unsigned __int64 uint64_t;
#else
/* Fallback if nothing above works */
#include <inttypes.h>
#endif
#endif
typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef void GLvoid;
typedef signed char GLbyte;
typedef short GLshort;
typedef int GLint;
typedef int GLclampx;
typedef unsigned char GLubyte;
typedef unsigned short GLushort;
typedef unsigned int GLuint;
typedef int GLsizei;
typedef float GLfloat;
typedef float GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void *GLeglImageOES;
typedef char GLchar;
typedef char GLcharARB;
#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef unsigned int GLhandleARB;
#endif
typedef unsigned short GLhalfARB;
typedef unsigned short GLhalf;
typedef GLint GLfixed;
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef long GLintptr;
#else
typedef ptrdiff_t GLintptr;
#endif
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef long GLsizeiptr;
#else
typedef ptrdiff_t GLsizeiptr;
#endif
typedef int64_t GLint64;
typedef uint64_t GLuint64;
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef long GLintptrARB;
#else
typedef ptrdiff_t GLintptrARB;
#endif
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef long GLsizeiptrARB;
#else
typedef ptrdiff_t GLsizeiptrARB;
#endif
typedef int64_t GLint64EXT;
typedef uint64_t GLuint64EXT;
typedef struct __GLsync *GLsync;
struct _cl_context;
struct _cl_event;
typedef void (APIENTRY *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (APIENTRY *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (APIENTRY *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
typedef unsigned short GLhalfNV;
typedef GLintptr GLvdpauSurfaceNV;

#define GL_INDEX_CLEAR_VALUE 0x0C20
#define GL_SOURCE1_ALPHA 0x8589
#define GL_DITHER 0x0BD0
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FOG_COORD_ARRAY 0x8457
#define GL_ALPHA_TEST_FUNC 0x0BC1
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_SAMPLER_2D_RECT 0x8B63
#define GL_RGB9_E5 0x8C3D
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_RGBA32UI 0x8D70
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_BYTE 0x1400
#define GL_R32UI 0x8236
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF
#define GL_DEPTH_BIAS 0x0D1F
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_TEXTURE_GEN_MODE 0x2500
#define GL_3D_COLOR_TEXTURE 0x0603
#define GL_PIXEL_MAP_G_TO_G 0x0C77
#define GL_RENDER 0x1C00
#define GL_MAX_TEXTURE_COORDS 0x8871
#define GL_COLOR_ATTACHMENT28 0x8CFC
#define GL_COLOR_ATTACHMENT29 0x8CFD
#define GL_COLOR_ATTACHMENT24 0x8CF8
#define GL_COLOR_ATTACHMENT25 0x8CF9
#define GL_COLOR_ATTACHMENT26 0x8CFA
#define GL_COLOR_ATTACHMENT27 0x8CFB
#define GL_COLOR_ATTACHMENT20 0x8CF4
#define GL_COLOR_ATTACHMENT21 0x8CF5
#define GL_COLOR_ATTACHMENT22 0x8CF6
#define GL_COLOR_ATTACHMENT23 0x8CF7
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_PROVOKING_VERTEX 0x8E4F
#define GL_SIGNED_NORMALIZED 0x8F9C
#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
#define GL_EXP 0x0800
#define GL_POINT_SIZE 0x0B11
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_RGB12 0x8053
#define GL_RGB10 0x8052
#define GL_RGB16 0x8054
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#define GL_DOUBLEBUFFER 0x0C32
#define GL_MAX_CLIP_PLANES 0x0D32
#define GL_FOG_COORDINATE_ARRAY_STRIDE 0x8455
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#define GL_DOUBLE_MAT4 0x8F48
#define GL_DOUBLE_MAT2 0x8F46
#define GL_DOUBLE_MAT3 0x8F47
#define GL_COMPILE_AND_EXECUTE 0x1301
#define GL_GREEN_BITS 0x0D53
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37
#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_TEXTURE_DEPTH 0x8071
#define GL_DRAW_BUFFER6 0x882B
#define GL_DRAW_BUFFER7 0x882C
#define GL_DRAW_BUFFER4 0x8829
#define GL_DRAW_BUFFER5 0x882A
#define GL_DRAW_BUFFER3 0x8828
#define GL_DRAW_BUFFER0 0x8825
#define GL_DRAW_BUFFER1 0x8826
#define GL_LIGHT1 0x4001
#define GL_LIGHT0 0x4000
#define GL_LIGHT3 0x4003
#define GL_LIGHT2 0x4002
#define GL_COPY 0x1503
#define GL_LIGHT4 0x4004
#define GL_LIGHT7 0x4007
#define GL_LIGHT6 0x4006
#define GL_MAP_STENCIL 0x0D11
#define GL_QUADRATIC_ATTENUATION 0x1209
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#define GL_TEXTURE_RECTANGLE 0x84F5
#define GL_FILL 0x1B02
#define GL_GREEN_SCALE 0x0D18
#define GL_SRC_COLOR 0x0300
#define GL_SAMPLER_BINDING 0x8919
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_RGBA_INTEGER 0x8D99
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_EXTENSIONS 0x1F03
#define GL_PASS_THROUGH_TOKEN 0x0700
#define GL_UPPER_LEFT 0x8CA2
#define GL_TRANSPOSE_TEXTURE_MATRIX 0x84E5
#define GL_COLOR_ATTACHMENT30 0x8CFE
#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E
#define GL_UNIFORM_BUFFER 0x8A11
#define GL_CCW 0x0901
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_R32I 0x8235
#define GL_R32F 0x822E
#define GL_MAX_VIEWPORTS 0x825B
#define GL_OR_REVERSE 0x150B
#define GL_LUMINANCE12_ALPHA4 0x8046
#define GL_VERTEX_ARRAY_BUFFER_BINDING 0x8896
#define GL_PIXEL_MAP_R_TO_R 0x0C76
#define GL_FOG_COORDINATE_SOURCE 0x8450
#define GL_TEXTURE_BORDER 0x1005
#define GL_RGB32F 0x8815
#define GL_FLOAT_MAT2 0x8B5A
#define GL_FLOAT_MAT3 0x8B5B
#define GL_DEPTH 0x1801
#define GL_FLOAT_MAT4 0x8B5C
#define GL_OPERAND1_RGB 0x8591
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#define GL_T2F_C4UB_V3F 0x2A29
#define GL_RG8I 0x8237
#define GL_RGBA8I 0x8D8E
#define GL_SRC1_ALPHA 0x8589
#define GL_ALPHA_BIAS 0x0D1D
#define GL_FOG_COORDINATE_ARRAY 0x8457
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_TEXTURE 0x1702
#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
#define GL_MAX_CLIP_DISTANCES 0x0D32
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_ACCUM_RED_BITS 0x0D58
#define GL_NORMAL_MAP 0x8511
#define GL_ALPHA8 0x803C
#define GL_ALPHA4 0x803B
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#define GL_LINE 0x1B01
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_RG32F 0x8230
#define GL_BLUE_INTEGER 0x8D96
#define GL_DYNAMIC_COPY 0x88EA
#define GL_SYNC_FLAGS 0x9115
#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
#define GL_RG32I 0x823B
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_CLIENT_ACTIVE_TEXTURE 0x84E1
#define GL_PIXEL_MAP_A_TO_A 0x0C79
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_FOG_DENSITY 0x0B62
#define GL_CONSTANT_ATTENUATION 0x1207
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#define GL_HINT_BIT 0x00008000
#define GL_INVALID_OPERATION 0x0502
#define GL_CLAMP_READ_COLOR 0x891C
#define GL_RED_INTEGER 0x8D94
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
#define GL_BUFFER_USAGE 0x8765
#define GL_PATCH_VERTICES 0x8E72
#define GL_CULL_FACE_MODE 0x0B45
#define GL_BOOL 0x8B56
#define GL_T2F_V3F 0x2A27
#define GL_OPERAND0_ALPHA 0x8598
#define GL_ALWAYS 0x0207
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_BLUE_BIAS 0x0D1B
#define GL_GREEN_BIAS 0x0D19
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#define GL_SHADER_TYPE 0x8B4F
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_MULTISAMPLE_BIT 0x20000000
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#define GL_FOG_COLOR 0x0B66
#define GL_MAX_VERTEX_STREAMS 0x8E71
#define GL_TEXTURE_LUMINANCE_TYPE 0x8C14
#define GL_RG16UI 0x823A
#define GL_INTERPOLATE 0x8575
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_FOG_COORD_ARRAY_STRIDE 0x8455
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_LINE_RESET_TOKEN 0x0707
#define GL_COMBINE_RGB 0x8571
#define GL_STEREO 0x0C33
#define GL_ALREADY_SIGNALED 0x911A
#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
#define GL_MEDIUM_INT 0x8DF4
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_CLIP_PLANE1 0x3001
#define GL_CLIP_PLANE0 0x3000
#define GL_CLIP_PLANE3 0x3003
#define GL_CLIP_PLANE2 0x3002
#define GL_CLIP_PLANE4 0x3004
#define GL_2_BYTES 0x1407
#define GL_NORMAL_ARRAY_TYPE 0x807E
#define GL_TEXTURE_BUFFER 0x8C2A
#define GL_LINE_STIPPLE_REPEAT 0x0B26
#define GL_POINTS 0x0000
#define GL_SYNC_STATUS 0x9114
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#define GL_POLYGON 0x0009
#define GL_SCISSOR_BOX 0x0C10
#define GL_MAP1_INDEX 0x0D91
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_ADD_SIGNED 0x8574
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_DONT_CARE 0x1100
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#define GL_LINE_WIDTH 0x0B21
#define GL_QUERY_NO_WAIT 0x8E14
#define GL_LEQUAL 0x0203
#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
#define GL_LIGHT_MODEL_AMBIENT 0x0B53
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_LUMINANCE6_ALPHA2 0x8044
#define GL_PRIMARY_COLOR 0x8577
#define GL_C3F_V3F 0x2A24
#define GL_AUX_BUFFERS 0x0C00
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#define GL_SMOOTH 0x1D01
#define GL_CURRENT_TEXTURE_COORDS 0x0B03
#define GL_VIEWPORT_BOUNDS_RANGE 0x825D
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_LUMINANCE_ALPHA 0x190A
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#define GL_COMPRESSED_INTENSITY 0x84EC
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#define GL_LIST_BASE 0x0B32
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_CURRENT_COLOR 0x0B00
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#define GL_NOR 0x1508
#define GL_FLAT 0x1D00
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_SOURCE1_RGB 0x8581
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_ALPHA_INTEGER 0x8D97
#define GL_PROJECTION 0x1701
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#define GL_INT_VEC4 0x8B55
#define GL_INT_VEC3 0x8B54
#define GL_INT_VEC2 0x8B53
#define GL_STENCIL_FAIL 0x0B94
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_RED_BIAS 0x0D15
#define GL_RENDER_MODE 0x0C40
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_T2F_N3F_V3F 0x2A2B
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#define GL_DRAW_BUFFER10 0x882F
#define GL_DRAW_BUFFER11 0x8830
#define GL_DRAW_BUFFER12 0x8831
#define GL_DRAW_BUFFER13 0x8832
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#define GL_DRAW_BUFFER15 0x8834
#define GL_RGB_INTEGER 0x8D98
#define GL_R16F 0x822D
#define GL_CONSTANT_ALPHA 0x8003
#define GL_R16I 0x8233
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_COMPARE_R_TO_TEXTURE 0x884E
#define GL_PREVIOUS 0x8578
#define GL_STENCIL 0x1802
#define GL_SAMPLE_MASK_VALUE 0x8E52
#define GL_DIFFUSE 0x1201
#define GL_SOURCE2_RGB 0x8582
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_INCR_WRAP 0x8507
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_HIGH_INT 0x8DF5
#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
#define GL_DECR_WRAP 0x8508
#define GL_COMPILE 0x1300
#define GL_SAMPLE_POSITION 0x8E50
#define GL_INCR 0x1E02
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_ALPHA_TEST_REF 0x0BC2
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_DEPTH_CLAMP 0x864F
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_INT_SAMPLER_CUBE 0x8DCC
#define GL_CURRENT_QUERY 0x8865
#define GL_VERTEX_SHADER 0x8B31
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#define GL_RGB16UI 0x8D77
#define GL_COPY_INVERTED 0x150C
#define GL_TEXTURE_PRIORITY 0x8066
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#define GL_PROJECTION_MATRIX 0x0BA7
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#define GL_POINT_DISTANCE_ATTENUATION 0x8129
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#define GL_AMBIENT_AND_DIFFUSE 0x1602
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_VERTEX_SHADER_BIT 0x00000001
#define GL_ZERO 0
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#define GL_BUFFER_MAP_LENGTH 0x9120
#define GL_READ_ONLY 0x88B8
#define GL_MAP1_GRID_DOMAIN 0x0DD0
#define GL_FIXED 0x140C
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
#define GL_FOG_START 0x0B63
#define GL_COMPRESSED_RED 0x8225
#define GL_BGR 0x80E0
#define GL_MAX_LIGHTS 0x0D31
#define GL_RGBA16_SNORM 0x8F9B
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_LIST_INDEX 0x0B33
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#define GL_LUMINANCE16_ALPHA16 0x8048
#define GL_COMPILE_STATUS 0x8B81
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_UNSIGNED_BYTE 0x1401
#define GL_QUADS 0x0007
#define GL_R16 0x822A
#define GL_PIXEL_PACK_BUFFER 0x88EB
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#define GL_DRAW_BUFFER2 0x8827
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_DRAW_BUFFER 0x0C01
#define GL_STENCIL_INDEX1 0x8D46
#define GL_STENCIL_INDEX4 0x8D47
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#define GL_STENCIL_INDEX8 0x8D48
#define GL_DEPTH_BITS 0x0D56
#define GL_RGB8UI 0x8D7D
#define GL_STENCIL_INDEX16 0x8D49
#define GL_LIGHT5 0x4005
#define GL_MAP1_VERTEX_3 0x0D97
#define GL_CLEAR 0x1500
#define GL_DRAW_BUFFER8 0x882D
#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
#define GL_MATRIX_MODE 0x0BA0
#define GL_DRAW_BUFFER9 0x882E
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_SELECTION_BUFFER_SIZE 0x0DF4
#define GL_CURRENT_RASTER_POSITION 0x0B07
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_EXP2 0x0801
#define GL_FLOAT_VEC2 0x8B50
#define GL_FOG_INDEX 0x0B61
#define GL_FLOAT_VEC4 0x8B52
#define GL_COEFF 0x0A00
#define GL_SOURCE2_ALPHA 0x858A
#define GL_BUFFER_SIZE 0x8764
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#define GL_UNIFORM_BUFFER_START 0x8A29
#define GL_LOWER_LEFT 0x8CA1
#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
#define GL_TEXTURE_FILTER_CONTROL 0x8500
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
#define GL_Q 0x2003
#define GL_R 0x2002
#define GL_S 0x2000
#define GL_T 0x2001
#define GL_DOUBLE 0x140A
#define GL_RG8_SNORM 0x8F95
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_MAX_SAMPLES 0x8D57
#define GL_NOOP 0x1505
#define GL_CONTEXT_FLAGS 0x821E
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_POINT_SIZE_MAX 0x8127
#define GL_MODELVIEW_MATRIX 0x0BA6
#define GL_QUERY_WAIT 0x8E13
#define GL_RED_SCALE 0x0D14
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_BGRA 0x80E1
#define GL_POINT 0x1B00
#define GL_POLYGON_TOKEN 0x0703
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_SRGB 0x8C40
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#define GL_MAX_EVAL_ORDER 0x0D30
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_AND_REVERSE 0x1502
#define GL_CLAMP_FRAGMENT_COLOR 0x891B
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_FOG_MODE 0x0B65
#define GL_RGBA8_SNORM 0x8F97
#define GL_INT_SAMPLER_3D 0x8DCB
#define GL_AND 0x1501
#define GL_INDEX_MODE 0x0C30
#define GL_ACCUM_GREEN_BITS 0x0D59
#define GL_STATIC_COPY 0x88E6
#define GL_3_BYTES 0x1408
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
#define GL_SCISSOR_BIT 0x00080000
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#define GL_T2F_C3F_V3F 0x2A2A
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#define GL_POINT_TOKEN 0x0701
#define GL_T4F_C4F_N3F_V4F 0x2A2D
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#define GL_BACK_LEFT 0x0402
#define GL_TEXTURE_ENV_COLOR 0x2201
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_LINE_SMOOTH 0x0B20
#define GL_CLAMP_VERTEX_COLOR 0x891A
#define GL_STENCIL_REF 0x0B97
#define GL_DOUBLE_MAT4x2 0x8F4D
#define GL_DOUBLE_MAT4x3 0x8F4E
#define GL_COPY_WRITE_BUFFER 0x8F37
#define GL_OPERAND0_RGB 0x8590
#define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8
#define GL_FEEDBACK 0x1C01
#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#define GL_PIXEL_MAP_I_TO_G 0x0C73
#define GL_PIXEL_MAP_I_TO_B 0x0C74
#define GL_PIXEL_MAP_I_TO_A 0x0C75
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#define GL_PIXEL_MAP_I_TO_I 0x0C70
#define GL_PROGRAM_SEPARABLE 0x8258
#define GL_PIXEL_MAP_I_TO_R 0x0C72
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#define GL_LINEAR_ATTENUATION 0x1208
#define GL_LIST_BIT 0x00020000
#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_COLOR_MATERIAL_FACE 0x0B55
#define GL_VERSION 0x1F02
#define GL_TESS_GEN_SPACING 0x8E77
#define GL_SAMPLER_CUBE 0x8B60
#define GL_INT_2_10_10_10_REV 0x8D9F
#define GL_LEFT 0x0406
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_ARRAY_BUFFER 0x8892
#define GL_COMPRESSED_ALPHA 0x84E9
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#define GL_TEXTURE_1D 0x0DE0
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define GL_NAME_STACK_DEPTH 0x0D70
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_WEIGHT_ARRAY_BUFFER_BINDING 0x889E
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#define GL_INT_SAMPLER_2D 0x8DCA
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#define GL_DOUBLE_MAT3x2 0x8F4B
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_DOUBLE_MAT3x4 0x8F4C
#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#define GL_FIXED_ONLY 0x891D
#define GL_NONE 0
#define GL_POLYGON_MODE 0x0B40
#define GL_HALF_FLOAT 0x140B
#define GL_LIGHTING_BIT 0x00000040
#define GL_NAND 0x150E
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#define GL_INDEX_ARRAY 0x8077
#define GL_ALPHA 0x1906
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_DST_ALPHA 0x0304
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#define GL_EVAL_BIT 0x00010000
#define GL_SAMPLER_BUFFER 0x8DC2
#define GL_COMPRESSED_RGB 0x84ED
#define GL_SRC1_COLOR 0x88F9
#define GL_BLUE_BITS 0x0D54
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_SOURCE0_ALPHA 0x8588
#define GL_EQUAL 0x0202
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#define GL_SECONDARY_COLOR_ARRAY_SIZE 0x845A
#define GL_LOW_FLOAT 0x8DF0
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D
#define GL_LINE_STRIP 0x0003
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_COLOR_MATERIAL 0x0B57
#define GL_COLOR 0x1800
#define GL_BITMAP 0x1A00
#define GL_DYNAMIC_READ 0x88E9
#define GL_COMPRESSED_LUMINANCE 0x84EA
#define GL_DEPTH_STENCIL 0x84F9
#define GL_TEXTURE_INTENSITY_SIZE 0x8061
#define GL_SYNC_CONDITION 0x9113
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE24 0x84D8
#define GL_R8_SNORM 0x8F94
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE28 0x84DC
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_TRIANGLES_ADJACENCY 0x000C
#define GL_PIXEL_MODE_BIT 0x00000020
#define GL_ALPHA_SCALE 0x0D1C
#define GL_READ_BUFFER 0x0C02
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_TESS_CONTROL_SHADER 0x8E88
#define GL_GEQUAL 0x0206
#define GL_RGBA8UI 0x8D7C
#define GL_TRANSFORM_FEEDBACK 0x8E22
#define GL_SUBTRACT 0x84E7
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_INDEX_WRITEMASK 0x0C21
#define GL_TEXTURE_2D 0x0DE1
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_4D_COLOR_TEXTURE 0x0604
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_BUFFER_MAPPED 0x88BC
#define GL_EYE_LINEAR 0x2400
#define GL_STREAM_DRAW 0x88E0
#define GL_AUTO_NORMAL 0x0D80
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#define GL_SIGNALED 0x9119
#define GL_FRAMEBUFFER 0x8D40
#define GL_SPECULAR 0x1202
#define GL_GENERATE_MIPMAP 0x8191
#define GL_COLOR_ARRAY_SIZE 0x8081
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_TEXTURE_STACK_DEPTH 0x0BA5
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#define GL_EDGE_FLAG 0x0B43
#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
#define GL_TEXTURE_BIT 0x00040000
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#define GL_TEXTURE_RESIDENT 0x8067
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#define GL_FOG 0x0B60
#define GL_FOG_COORD 0x8451
#define GL_POSITION 0x1203
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_LINE_STIPPLE_PATTERN 0x0B25
#define GL_MAP1_TEXTURE_COORD_2 0x0D94
#define GL_ENABLE_BIT 0x00002000
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#define GL_CONSTANT 0x8576
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_XOR 0x1506
#define GL_LESS 0x0201
#define GL_COPY_PIXEL_TOKEN 0x0706
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_EMISSION 0x1600
#define GL_COMPRESSED_LUMINANCE_ALPHA 0x84EB
#define GL_INT_SAMPLER_1D 0x8DC9
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_REPEAT 0x2901
#define GL_OR_INVERTED 0x150D
#define GL_T2F_C4F_N3F_V3F 0x2A2C
#define GL_TEXTURE_INTENSITY_TYPE 0x8C15
#define GL_INTENSITY16 0x804D
#define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_VALIDATE_STATUS 0x8B83
#define GL_RG16 0x822C
#define GL_SCISSOR_TEST 0x0C11
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_LINES 0x0001
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE11 0x84CB
#define GL_BLEND_DST_RGB 0x80C8
#define GL_RGB 0x1907
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#define GL_STACK_OVERFLOW 0x0503
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_MAP1_VERTEX_4 0x0D98
#define GL_RGBA32F 0x8814
#define GL_RGBA32I 0x8D82
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#define GL_PRIMITIVE_RESTART 0x8F9D
#define GL_SRC_ALPHA 0x0302
#define GL_TEXTURE_3D 0x806F
#define GL_INDEX_ARRAY_POINTER 0x8091
#define GL_SECONDARY_COLOR_ARRAY_STRIDE 0x845C
#define GL_SAMPLE_SHADING 0x8C36
#define GL_RG32UI 0x823C
#define GL_NORMALIZE 0x0BA1
#define GL_BLUE_SCALE 0x0D1A
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_DECAL 0x2101
#define GL_MAX_TEXTURE_UNITS 0x84E2
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_COPY_READ_BUFFER 0x8F36
#define GL_FOG_COORD_ARRAY_POINTER 0x8456
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_NORMAL_ARRAY 0x8075
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#define GL_MAX_PATCH_VERTICES 0x8E7D
#define GL_NICEST 0x1102
#define GL_MODELVIEW 0x1700
#define GL_OBJECT_TYPE 0x9112
#define GL_C4UB_V3F 0x2A23
#define GL_FLOAT_MAT2x3 0x8B65
#define GL_COMBINE 0x8570
#define GL_FLOAT_MAT2x4 0x8B66
#define GL_MAP2_VERTEX_3 0x0DB7
#define GL_INDEX_LOGIC_OP 0x0BF1
#define GL_PRIMITIVES_GENERATED 0x8C87
#define GL_INVALID_INDEX 0xFFFFFFFF
#define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F
#define GL_TRANSPOSE_PROJECTION_MATRIX 0x84E4
#define GL_CLIP_DISTANCE6 0x3006
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#define GL_TEXTURE_GEN_S 0x0C60
#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
#define GL_INDEX_ARRAY_BUFFER_BINDING 0x8899
#define GL_TEXTURE_LOD_BIAS 0x8501
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_QUERY_RESULT 0x8866
#define GL_R16_SNORM 0x8F98
#define GL_RGB16_SNORM 0x8F9A
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_COLOR_ARRAY 0x8076
#define GL_ZOOM_Y 0x0D17
#define GL_ZOOM_X 0x0D16
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_RG 0x8227
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_GREEN_INTEGER 0x8D95
#define GL_COLOR_ARRAY_POINTER 0x8090
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_FLOAT_MAT3x2 0x8B67
#define GL_FLOAT_MAT3x4 0x8B68
#define GL_COMPRESSED_RGBA 0x84EE
#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
#define GL_TEXTURE_COMPONENTS 0x1003
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_BITMAP_TOKEN 0x0704
#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#define GL_PIXEL_MAP_B_TO_B 0x0C78
#define GL_LINE_TOKEN 0x0702
#define GL_CURRENT_FOG_COORDINATE 0x8453
#define GL_FLOAT_VEC3 0x8B51
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#define GL_MULT 0x0103
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_SRC2_RGB 0x8582
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_VIEWPORT 0x0BA2
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#define GL_RGB8I 0x8D8F
#define GL_BLEND_SRC 0x0BE1
#define GL_BUFFER_MAP_OFFSET 0x9121
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_COLOR_INDEX 0x1900
#define GL_PACK_IMAGE_HEIGHT 0x806C
#define GL_MAP2_NORMAL 0x0DB2
#define GL_NORMAL_ARRAY_POINTER 0x808F
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_MAP_WRITE_BIT 0x0002
#define GL_SHADE_MODEL 0x0B54
#define GL_COMPRESSED_SLUMINANCE 0x8C4A
#define GL_INDEX_SHIFT 0x0D12
#define GL_SRC0_RGB 0x8580
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA
#define GL_STREAM_READ 0x88E1
#define GL_LINEAR 0x2601
#define GL_VERTEX_ARRAY 0x8074
#define GL_STENCIL_INDEX 0x1901
#define GL_HIGH_FLOAT 0x8DF2
#define GL_GREATER 0x0204
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#define GL_FRONT_FACE 0x0B46
#define GL_REPLACE 0x1E01
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#define GL_ACCUM_CLEAR_VALUE 0x0B80
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_TESS_EVALUATION_SHADER 0x8E87
#define GL_BLEND 0x0BE2
#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
#define GL_MAP1_TEXTURE_COORD_3 0x0D95
#define GL_R16UI 0x8234
#define GL_MAP1_TEXTURE_COORD_1 0x0D93
#define GL_UNSIGNED_SHORT 0x1403
#define GL_MIN 0x8007
#define GL_MAP1_TEXTURE_COORD_4 0x0D96
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_INTENSITY12 0x804C
#define GL_C4UB_V2F 0x2A22
#define GL_PATCHES 0x000E
#define GL_LIST_MODE 0x0B30
#define GL_TIMESTAMP 0x8E28
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_OPERAND2_RGB 0x8592
#define GL_SRGB_ALPHA 0x8C42
#define GL_RGBA16I 0x8D88
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_SLUMINANCE8 0x8C47
#define GL_LOGIC_OP 0x0BF1
#define GL_MAP1_COLOR_4 0x0D90
#define GL_GEOMETRY_SHADER 0x8DD9
#define GL_RGBA16F 0x881A
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#define GL_ALPHA_BITS 0x0D55
#define GL_LINE_STIPPLE 0x0B24
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_SRC2_ALPHA 0x858A
#define GL_FRACTIONAL_EVEN 0x8E7C
#define GL_OPERAND2_ALPHA 0x859A
#define GL_DRAW_BUFFER14 0x8833
#define GL_FOG_END 0x0B64
#define GL_CURRENT_RASTER_COLOR 0x0B04
#define GL_FOG_COORDINATE_ARRAY_TYPE 0x8454
#define GL_SAMPLES_PASSED 0x8914
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#define GL_SEPARATE_ATTRIBS 0x8C8D
#define GL_CURRENT_FOG_COORD 0x8453
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_DOUBLE_MAT2x3 0x8F49
#define GL_DOUBLE_MAT2x4 0x8F4A
#define GL_R8I 0x8231
#define GL_SAMPLER_1D 0x8B5D
#define GL_ALPHA_TEST 0x0BC0
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_RED 0x1903
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_GREEN 0x1904
#define GL_MAP2_TEXTURE_COORD_1 0x0DB3
#define GL_MAP2_TEXTURE_COORD_2 0x0DB4
#define GL_MAP2_TEXTURE_COORD_3 0x0DB5
#define GL_MAP2_TEXTURE_COORD_4 0x0DB6
#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#define GL_3D_COLOR 0x0602
#define GL_LINE_STRIP_ADJACENCY 0x000B
#define GL_DST_COLOR 0x0306
#define GL_STENCIL_BITS 0x0D57
#define GL_UNSIGNED_INT 0x1405
#define GL_V3F 0x2A21
#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_LUMINANCE12 0x8041
#define GL_RG16_SNORM 0x8F99
#define GL_COLOR_ARRAY_TYPE 0x8082
#define GL_MODULATE 0x2100
#define GL_RG_INTEGER 0x8228
#define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#define GL_BLUE 0x1905
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#define GL_C4F_N3F_V3F 0x2A26
#define GL_4_BYTES 0x1409
#define GL_STREAM_COPY 0x88E2
#define GL_SOURCE0_RGB 0x8580
#define GL_EYE_PLANE 0x2502
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_POINT_SMOOTH_HINT 0x0C51
#define GL_ORDER 0x0A01
#define GL_LAYER_PROVOKING_VERTEX 0x825E
#define GL_FASTEST 0x1101
#define GL_LUMINANCE8 0x8040
#define GL_LUMINANCE4 0x803F
#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_POLYGON_BIT 0x00000008
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#define GL_INDEX_BITS 0x0D51
#define GL_RIGHT 0x0407
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#define GL_SRC0_ALPHA 0x8588
#define GL_TEXTURE_WIDTH 0x1000
#define GL_UNIFORM_SIZE 0x8A38
#define GL_POINT_SPRITE 0x8861
#define GL_FLOAT_MAT4x2 0x8B69
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_DOT3_RGBA 0x86AF
#define GL_COMPRESSED_RG 0x8226
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#define GL_OUT_OF_MEMORY 0x0505
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#define GL_NORMAL_ARRAY_STRIDE 0x807F
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#define GL_RASTERIZER_DISCARD 0x8C89
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_EDGE_FLAG_ARRAY 0x8079
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#define GL_RETURN 0x0102
#define GL_STENCIL_TEST 0x0B90
#define GL_R11F_G11F_B10F 0x8C3A
#define GL_DECR 0x1E03
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_TRIANGLE_FAN 0x0006
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#define GL_RED_BITS 0x0D52
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_MAX_SUBROUTINES 0x8DE7
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#define GL_RGB16I 0x8D89
#define GL_RGB16F 0x881B
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_MINOR_VERSION 0x821C
#define GL_FOG_BIT 0x00000080
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#define GL_SAMPLE_MASK 0x8E51
#define GL_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_CONDITION_SATISFIED 0x911C
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_SECONDARY_COLOR_ARRAY_POINTER 0x845D
#define GL_RGB565 0x8D62
#define GL_TEXTURE_1D_ARRAY 0x8C18
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#define GL_COORD_REPLACE 0x8862
#define GL_RGBA2 0x8055
#define GL_RGBA4 0x8056
#define GL_RGBA8 0x8058
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#define GL_SRGB8 0x8C41
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_RESCALE_NORMAL 0x803A
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_STATIC_READ 0x88E5
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#define GL_MAP_READ_BIT 0x0001
#define GL_SPOT_DIRECTION 0x1204
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_LINE_BIT 0x00000004
#define GL_COLOR_ATTACHMENT31 0x8CFF
#define GL_TRANSFORM_BIT 0x00001000
#define GL_LIGHTING 0x0B50
#define GL_TEXTURE_GEN_T 0x0C61
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_TEXTURE_GEN_R 0x0C62
#define GL_TEXTURE_GEN_Q 0x0C63
#define GL_ALPHA12 0x803D
#define GL_ALPHA16 0x803E
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_TRANSPOSE_MODELVIEW_MATRIX 0x84E3
#define GL_POINT_SIZE_MIN 0x8126
#define GL_RGBA12 0x805A
#define GL_GENERATE_MIPMAP_HINT 0x8192
#define GL_RGBA16 0x805B
#define GL_MAP1_NORMAL 0x0D92
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_RGB5_A1 0x8057
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_QUERY_COUNTER_BITS 0x8864
#define GL_FOG_HINT 0x0C54
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_RGB10_A2 0x8059
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#define GL_FOG_COORD_ARRAY_TYPE 0x8454
#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#define GL_MAP2_INDEX 0x0DB1
#define GL_NOTEQUAL 0x0205
#define GL_TEXTURE_COORD_ARRAY 0x8078
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_MAP2_GRID_DOMAIN 0x0DD2
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_OBJECT_LINEAR 0x2401
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#define GL_LUMINANCE8_ALPHA8 0x8045
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_SLUMINANCE_ALPHA 0x8C44
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_SPOT_EXPONENT 0x1205
#define GL_SHORT 0x1402
#define GL_DOT3_RGB 0x86AE
#define GL_CW 0x0900
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_DEPTH_TEXTURE_MODE 0x884B
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_STATIC_DRAW 0x88E4
#define GL_RENDERBUFFER 0x8D41
#define GL_SAMPLER_3D 0x8B5F
#define GL_MAX_INTEGER_SAMPLES 0x9110
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_INTENSITY4 0x804A
#define GL_INTENSITY8 0x804B
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_FOG_COORD_SRC 0x8450
#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
#define GL_INDEX_ARRAY_TYPE 0x8085
#define GL_2D 0x0600
#define GL_SELECTION_BUFFER_POINTER 0x0DF3
#define GL_SAMPLES 0x80A9
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_T4F_V4F 0x2A28
#define GL_RGBA_MODE 0x0C31
#define GL_RGB32UI 0x8D71
#define GL_READ_WRITE 0x88BA
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#define GL_V2F 0x2A20
#define GL_CONSTANT_COLOR 0x8001
#define GL_RG8UI 0x8238
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE0 0x84C0
#define GL_CONTEXT_PROFILE_MASK 0x9126
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE3 0x84C3
#define GL_BOOL_VEC4 0x8B59
#define GL_BOOL_VEC3 0x8B58
#define GL_BOOL_VEC2 0x8B57
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_COLOR_MATERIAL_PARAMETER 0x0B56
#define GL_ONE 1
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_TRIANGLE_STRIP 0x0005
#define GL_N3F_V3F 0x2A25
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#define GL_FRONT_LEFT 0x0400
#define GL_CLAMP 0x2900
#define GL_INDEX_OFFSET 0x0D13
#define GL_INTENSITY 0x8049
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#define GL_TIMEOUT_EXPIRED 0x911B
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_STENCIL_FUNC 0x0B92
#define GL_TEXTURE_ENV 0x2300
#define GL_INVERT 0x150A
#define GL_BACK 0x0405
#define GL_VIEWPORT_BIT 0x00000800
#define GL_INT 0x1404
#define GL_CLIP_DISTANCE1 0x3001
#define GL_CLIP_DISTANCE0 0x3000
#define GL_CLIP_DISTANCE3 0x3003
#define GL_CLIP_DISTANCE2 0x3002
#define GL_CLIP_DISTANCE5 0x3005
#define GL_CLIP_DISTANCE4 0x3004
#define GL_CLIP_DISTANCE7 0x3007
#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
#define GL_FRONT_AND_BACK 0x0408
#define GL_SYNC_FENCE 0x9116
#define GL_RG8 0x822B
#define GL_RGB8_SNORM 0x8F96
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_DOUBLE_VEC4 0x8FFE
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_DOUBLE_VEC2 0x8FFC
#define GL_DOUBLE_VEC3 0x8FFD
#define GL_NO_ERROR 0
#define GL_CURRENT_SECONDARY_COLOR 0x8459
#define GL_RGBA16UI 0x8D76
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_SECONDARY_COLOR_ARRAY 0x845E
#define GL_LUMINANCE16 0x8042
#define GL_CURRENT_INDEX 0x0B01
#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
#define GL_CLIP_PLANE5 0x3005
#define GL_MAJOR_VERSION 0x821B
#define GL_REFLECTION_MAP 0x8512
#define GL_BGR_INTEGER 0x8D9A
#define GL_PROXY_TEXTURE_3D 0x8070
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#define GL_UNIFORM_TYPE 0x8A37
#define GL_DELETE_STATUS 0x8B80
#define GL_POINT_BIT 0x00000002
#define GL_FRONT_RIGHT 0x0401
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#define GL_DEPTH_TEST 0x0B71
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_MULTISAMPLE 0x809D
#define GL_TEXTURE_RED_TYPE 0x8C10
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_FUNC_SUBTRACT 0x800A
#define GL_VERTEX_PROGRAM_TWO_SIDE 0x8643
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_CLAMP_TO_BORDER 0x812D
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT17 0x8CF1
#define GL_DEPTH_RANGE 0x0B70
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_NEAREST 0x2600
#define GL_COLOR_ATTACHMENT19 0x8CF3
#define GL_COLOR_ATTACHMENT18 0x8CF2
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_3D 0x0601
#define GL_POINT_SMOOTH 0x0B10
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#define GL_FRACTIONAL_ODD 0x8E7B
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_CURRENT_BIT 0x00000001
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#define GL_MAX_VARYING_VECTORS 0x8DFC
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_ACCUM_ALPHA_BITS 0x0D5B
#define GL_FLOAT 0x1406
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_SPOT_CUTOFF 0x1206
#define GL_SAMPLER_2D 0x8B5E
#define GL_INVALID_VALUE 0x0501
#define GL_R8 0x8229
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#define GL_SINGLE_COLOR 0x81F9
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
#define GL_AND_INVERTED 0x1504
#define GL_ACCUM_BLUE_BITS 0x0D5A
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#define GL_SECONDARY_COLOR_ARRAY_TYPE 0x845B
#define GL_TEXTURE_ENV_MODE 0x2200
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_COMBINE_ALPHA 0x8572
#define GL_CURRENT_NORMAL 0x0B02
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#define GL_UNSIGNALED 0x9118
#define GL_RGB32I 0x8D83
#define GL_BGRA_INTEGER 0x8D9B
#define GL_FALSE 0
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
#define GL_PROGRAM_POINT_SIZE 0x8642
#define GL_PACK_SKIP_IMAGES 0x806B
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_MAP1_GRID_SEGMENTS 0x0DD1
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_ATTRIB_STACK_DEPTH 0x0BB0
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#define GL_TEXTURE_LUMINANCE_SIZE 0x8060
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_COLOR_ATTACHMENT16 0x8CF0
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_FRONT 0x0404
#define GL_SELECT 0x1C02
#define GL_AMBIENT 0x1200
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#define GL_NUM_EXTENSIONS 0x821D
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_NORMAL_ARRAY_BUFFER_BINDING 0x8897
#define GL_SET 0x150F
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#define GL_DEPTH_FUNC 0x0B74
#define GL_INVALID_ENUM 0x0500
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
#define GL_DEPTH_COMPONENT 0x1902
#define GL_MAP_COLOR 0x0D10
#define GL_WAIT_FAILED 0x911D
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#define GL_PROJECTION_STACK_DEPTH 0x0BA4
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_TRUE 1
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_STACK_UNDERFLOW 0x0504
#define GL_AUX1 0x040A
#define GL_AUX0 0x0409
#define GL_AUX3 0x040C
#define GL_AUX2 0x040B
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#define GL_ADD 0x0104
#define GL_MAX_LIST_NESTING 0x0B31
#define GL_MODELVIEW_STACK_DEPTH 0x0BA3
#define GL_FLOAT_MAT4x3 0x8B6A
#define GL_MAP2_GRID_SEGMENTS 0x0DD3
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_MAX_PIXEL_MAP_TABLE 0x0D34
#define GL_POLYGON_STIPPLE 0x0B42
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#define GL_LOW_INT 0x8DF3
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#define GL_KEEP 0x1E00
#define GL_OR 0x1507
#define GL_VERTEX_ARRAY_TYPE 0x807B
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_MAP2_VERTEX_4 0x0DB8
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#define GL_ACTIVE_SUBROUTINES 0x8DE5
#define GL_LINE_LOOP 0x0002
#define GL_BACK_RIGHT 0x0403
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_R3_G3_B2 0x2A10
#define GL_SLUMINANCE8_ALPHA8 0x8C45
#define GL_LUMINANCE4_ALPHA4 0x8043
#define GL_UNIFORM_OFFSET 0x8A3B
#define GL_TEXTURE1 0x84C1
#define GL_OBJECT_PLANE 0x2501
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#define GL_TIME_ELAPSED 0x88BF
#define GL_FUNC_ADD 0x8006
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#define GL_BUFFER_ACCESS 0x88BB
#define GL_LINES_ADJACENCY 0x000A
#define GL_VIEWPORT_SUBPIXEL_BITS 0x825C
#define GL_SHADER_COMPILER 0x8DFA
#define GL_VERTEX_ARRAY_STRIDE 0x807C
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_INDEX 0x8222
#define GL_MEDIUM_FLOAT 0x8DF1
#define GL_DOMAIN 0x0A02
#define GL_R8UI 0x8232
#define GL_LUMINANCE12_ALPHA12 0x8047
#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
#define GL_TRIANGLES 0x0004
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_SLUMINANCE 0x8C46
#define GL_SRGB8_ALPHA8 0x8C43
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#define GL_RENDERER 0x1F01
#define GL_MIRRORED_REPEAT 0x8370
#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#define GL_UNDEFINED_VERTEX 0x8260
#define GL_SPHERE_MAP 0x2402
#define GL_RGB_SCALE 0x8573
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#define GL_CURRENT_RASTER_INDEX 0x0B05
#define GL_COMPRESSED_SRGB 0x8C48
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#define GL_COMPRESSED_SLUMINANCE_ALPHA 0x8C4B
#define GL_EQUIV 0x1509
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#define GL_QUAD_STRIP 0x0008
#define GL_ACCUM 0x0100
#define GL_VERTEX_ARRAY_SIZE 0x807A
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#define GL_SRC1_RGB 0x8581
#define GL_DEPTH_SCALE 0x0D1E
#define GL_CURRENT_RASTER_DISTANCE 0x0B09
#define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C
#define GL_VERTEX_ARRAY_POINTER 0x808E
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#define GL_DRAW_PIXEL_TOKEN 0x0705
#define GL_POLYGON_STIPPLE_BIT 0x00000010
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#define GL_FRAGMENT_DEPTH 0x8452
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_FOG_COORDINATE 0x8451
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#define GL_COLOR_ARRAY_BUFFER_BINDING 0x8898
#define GL_TRANSPOSE_COLOR_MATRIX 0x84E6
#define GL_FOG_COORDINATE_ARRAY_POINTER 0x8456
#define GL_PIXEL_MAP_S_TO_S 0x0C71
#define GL_COLOR_ARRAY_STRIDE 0x8083
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#define GL_RGB8 0x8051
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#define GL_TEXTURE_SAMPLES 0x9106
#define GL_RGB4 0x804F
#define GL_RGB5 0x8050
#define GL_CULL_FACE 0x0B44
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#define GL_COLOR_INDEXES 0x1603
#define GL_OPERAND1_ALPHA 0x8599
#define GL_NEVER 0x0200
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_BLEND_DST 0x0BE0
#define GL_LOAD 0x0101
#define GL_INDEX_ARRAY_STRIDE 0x8086
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
#define GL_DEPTH_COMPONENT32 0x81A7
#define GL_RGBA 0x1908
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_COLOR_SUM 0x8458
#define GL_MAP2_COLOR_4 0x0DB0
#define GL_VENDOR 0x1F00
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_ACCUM_BUFFER_BIT 0x00000200
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_ISOLINES 0x8E7A
#define GL_ACTIVE_PROGRAM 0x8259
#define GL_LINK_STATUS 0x8B82
#define GL_TESS_GEN_POINT_MODE 0x8E79
#define GL_TESS_GEN_MODE 0x8E76
#define GL_MAX 0x8008
#define GL_LUMINANCE 0x1909
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0x900B
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#define GL_SAMPLER_1D_SHADOW 0x8B61
#define GL_SEPARATE_SPECULAR_COLOR 0x81FA
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_TEXTURE_MATRIX 0x0BA8
#define GL_RG16F 0x822F
#define GL_MAX_NAME_STACK_DEPTH 0x0D37
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_RG16I 0x8239
#define GL_WRITE_ONLY 0x88B9
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_SHININESS 0x1601
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_RGB10_A2UI 0x906F

typedef void (APIENTRYP PFNGLCOPYTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (APIENTRYP PFNGLSTENCILMASKSEPARATEPROC)(GLenum face, GLuint mask);
typedef void (APIENTRYP PFNGLINDEXIPROC)(GLint c);
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
typedef void (APIENTRYP PFNGLEVALCOORD2DPROC)(GLdouble u, GLdouble v);
typedef void (APIENTRYP PFNGLEVALCOORD2FPROC)(GLfloat u, GLfloat v);
typedef void (APIENTRYP PFNGLINDEXDPROC)(GLdouble c);
typedef void (APIENTRYP PFNGLINDEXFPROC)(GLfloat c);
typedef void (APIENTRYP PFNGLINDEXSPROC)(GLshort c);
typedef GLint (APIENTRYP PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)(GLuint program, GLenum shadertype, const GLchar *name);
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FVPROC)(const GLfloat *v);
typedef void (APIENTRYP PFNGLFOGFVPROC)(GLenum pname, const GLfloat *params);
typedef void (APIENTRYP PFNGLVERTEXP4UIPROC)(GLenum type, GLuint value);
typedef void (APIENTRYP PFNGLVERTEX4IVPROC)(const GLint *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef GLboolean (APIENTRYP PFNGLISBUFFERPROC)(GLuint buffer);
typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVPROC)(GLenum pname, GLuint index, GLfloat *val);
typedef void (APIENTRYP PFNGLMINSAMPLESHADINGPROC)(GLfloat value);
typedef void (APIENTRYP PFNGLPOPATTRIBPROC)();
typedef void (APIENTRYP PFNGLCOLORMATERIALPROC)(GLenum face, GLenum mode);
typedef void (APIENTRYP PFNGLCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);
typedef void (APIENTRYP PFNGLCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);
typedef void (APIENTRYP PFNGLCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);
typedef void (APIENTRYP PFNGLCOLOR3IPROC)(GLint red, GLint green, GLint blue);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVPROC)(GLuint index, const GLubyte *v);
typedef void (APIENTRYP PFNGLCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);
typedef void (APIENTRYP PFNGLMULTITEXCOORD1IVPROC)(GLenum target, const GLint *v);
typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP PFNGLVERTEX2IVPROC)(const GLint *v);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLTEXCOORDP3UIVPROC)(GLenum type, const GLuint *coords);
typedef void (APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKPROC)();
typedef void (APIENTRYP PFNGLFOGIPROC)(GLenum pname, GLint param);
typedef void (APIENTRYP PFNGLVERTEXPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (APIENTRYP PFNGLFOGFPROC)(GLenum pname, GLfloat param);
typedef void (APIENTRYP PFNGLMULTITEXCOORD1DPROC)(GLenum target, GLdouble s);
typedef void (APIENTRYP PFNGLMULTITEXCOORD1FPROC)(GLenum target, GLfloat s);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IPROC)(GLuint index, GLint x, GLint y);
typedef void (APIENTRYP PFNGLMULTITEXCOORD1IPROC)(GLenum target, GLint s);
typedef void (APIENTRYP PFNGLMULTITEXCOORD1SPROC)(GLenum target, GLshort s);
typedef void (APIENTRYP PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (APIENTRYP PFNGLTEXCOORD3SVPROC)(const GLshort *v);
typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSPROC)(GLsizei n, GLuint *framebuffers);
typedef void (APIENTRYP PFNGLGETATTACHEDSHADERSPROC)(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSPROC)(GLsizei n, const GLuint *arrays);
typedef void (APIENTRYP PFNGLVIEWPORTARRAYVPROC)(GLuint first, GLsizei count, const GLfloat *v);
typedef void (APIENTRYP PFNGLMULTITEXCOORD2SPROC)(GLenum target, GLshort s, GLshort t);
typedef void (APIENTRYP PFNGLCOLOR4FVPROC)(const GLfloat *v);
typedef void (APIENTRYP PFNGLTEXCOORD2SVPROC)(const GLshort *v);
typedef void (APIENTRYP PFNGLUNIFORM2DVPROC)(GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP PFNGLGETPIXELMAPUIVPROC)(GLenum map, GLuint *values);
typedef void (APIENTRYP PFNGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat *params);
typedef void (APIENTRYP PFNGLGETUNIFORMUIVPROC)(GLuint program, GLint location, GLuint *params);
typedef void (APIENTRYP PFNGLFRUSTUMPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef GLsync (APIENTRYP PFNGLFENCESYNCPROC)(GLenum condition, GLbitfield flags);
typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVPROC)(GLuint index, const GLshort *v);
typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef void (APIENTRYP PFNGLGENSAMPLERSPROC)(GLsizei count, GLuint *samplers);
typedef void (APIENTRYP PFNGLTEXCOORD4IVPROC)(const GLint *v);
typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKPROC)(GLenum mode, GLuint id);
typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, GLuint *params);
typedef void (APIENTRYP PFNGLINDEXPOINTERPROC)(GLenum type, GLsizei stride, const void *pointer);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVPROC)(GLuint index, const GLbyte *v);
typedef GLboolean (APIENTRYP PFNGLISSYNCPROC)(GLsync sync);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SVPROC)(const GLshort *v);
typedef void (APIENTRYP PFNGLWINDOWPOS2IVPROC)(const GLint *v);
typedef void (APIENTRYP PFNGLFOGCOORDDPROC)(GLdouble coord);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIPROC)(GLuint program, GLint location, GLuint v0);
typedef void (APIENTRYP PFNGLCOPYTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (APIENTRYP PFNGLUNIFORM4UIVPROC)(GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP PFNGLSCISSORARRAYVPROC)(GLuint first, GLsizei count, const GLint *v);
typedef void (APIENTRYP PFNGLCALLLISTPROC)(GLuint list);
typedef void * (APIENTRYP PFNGLMAPBUFFERPROC)(GLenum target, GLenum access);
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);
typedef void (APIENTRYP PFNGLDELETESYNCPROC)(GLsync sync);
typedef void (APIENTRYP PFNGLUNIFORM3IVPROC)(GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP PFNGLPOLYGONMODEPROC)(GLenum face, GLenum mode);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP PFNGLUSEPROGRAMPROC)(GLuint program);
typedef void (APIENTRYP PFNGLLINESTIPPLEPROC)(GLint factor, GLushort pattern);
typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOGPROC)(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
typedef void (APIENTRYP PFNGLPIXELSTOREFPROC)(GLenum pname, GLfloat param);
typedef void (APIENTRYP PFNGLSAMPLEMASKIPROC)(GLuint maskNumber, GLbitfield mask);
typedef void (APIENTRYP PFNGLDELETESHADERPROC)(GLuint shader);
typedef void (APIENTRYP PFNGLGETMAPDVPROC)(GLenum target, GLenum query, GLdouble *v);
typedef void (APIENTRYP PFNGLUNIFORM2UIPROC)(GLint location, GLuint v0, GLuint v1);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IPROC)(GLuint index, GLint x, GLint y, GLint z);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVPROC)(GLuint index, const GLushort *v);
typedef void (APIENTRYP PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (APIENTRYP PFNGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
typedef void (APIENTRYP PFNGLCOLOR4UBPROC)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
typedef void (APIENTRYP PFNGLCOLOR4UIPROC)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void (APIENTRYP PFNGLCOLOR4USPROC)(GLushort red, GLushort green, GLushort blue, GLushort alpha);
typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
typedef void (APIENTRYP PFNGLLINKPROGRAMPROC)(GLuint program);
typedef void (APIENTRYP PFNGLTEXCOORD2DVPROC)(const GLdouble *v);
typedef const GLubyte * (APIENTRYP PFNGLGETSTRINGPROC)(GLenum name);
typedef void (APIENTRYP PFNGLENDQUERYPROC)(GLenum target);
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIVPROC)(const GLuint *v);
typedef void (APIENTRYP PFNGLEDGEFLAGPOINTERPROC)(GLsizei stride, const void *pointer);
typedef void (APIENTRYP PFNGLCOPYPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIPROC)(GLuint index, GLuint x, GLuint y);
typedef void (APIENTRYP PFNGLRASTERPOS3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void (APIENTRYP PFNGLDELETETEXTURESPROC)(GLsizei n, const GLuint *textures);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4SPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIPROC)(GLuint sampler, GLenum pname, GLint param);
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFPROC)(GLuint sampler, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);
typedef void (APIENTRYP PFNGLUNIFORM1DPROC)(GLint location, GLdouble x);
typedef GLint (APIENTRYP PFNGLRENDERMODEPROC)(GLenum mode);
typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint level, void *img);
typedef void (APIENTRYP PFNGLUNIFORM1IPROC)(GLint location, GLint v0);
typedef void (APIENTRYP PFNGLGETTEXENVFVPROC)(GLenum target, GLenum pname, GLfloat *params);
typedef void (APIENTRYP PFNGLCULLFACEPROC)(GLenum mode);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
typedef const GLubyte * (APIENTRYP PFNGLGETSTRINGIPROC)(GLenum name, GLuint index);
typedef void (APIENTRYP PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);
typedef void (APIENTRYP PFNGLQUERYCOUNTERPROC)(GLuint id, GLenum target);
typedef void (APIENTRYP PFNGLFOGCOORDPOINTERPROC)(GLenum type, GLsizei stride, const void *pointer);
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DVPROC)(const GLdouble *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVPROC)(GLuint index, const GLshort *v);
typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, const GLuint *params);
typedef void (APIENTRYP PFNGLWINDOWPOS3FVPROC)(const GLfloat *v);
typedef void (APIENTRYP PFNGLLIGHTMODELFVPROC)(GLenum pname, const GLfloat *params);
typedef void (APIENTRYP PFNGLPOINTPARAMETERFVPROC)(GLenum pname, const GLfloat *params);
typedef void (APIENTRYP PFNGLVERTEX4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
typedef GLboolean (APIENTRYP PFNGLISTRANSFORMFEEDBACKPROC)(GLuint id);
typedef void (APIENTRYP PFNGLVERTEX4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef GLboolean (APIENTRYP PFNGLISPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef void (APIENTRYP PFNGLVERTEX4IPROC)(GLint x, GLint y, GLint z, GLint w);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DVPROC)(GLuint index, const GLdouble *v);
typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (APIENTRYP PFNGLALPHAFUNCPROC)(GLenum func, GLfloat ref);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (APIENTRYP PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);
typedef void (APIENTRYP PFNGLTEXCOORD3DVPROC)(const GLdouble *v);
typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEIVPROC)(GLuint pipeline, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void (APIENTRYP PFNGLRASTERPOS2IVPROC)(const GLint *v);
typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum modeRGB, GLenum modeAlpha);
typedef GLuint (APIENTRYP PFNGLGETSUBROUTINEINDEXPROC)(GLuint program, GLenum shadertype, const GLchar *name);
typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVPROC)(GLuint index, const GLshort *v);
typedef void (APIENTRYP PFNGLPUSHATTRIBPROC)(GLbitfield mask);
typedef void (APIENTRYP PFNGLLIGHTIVPROC)(GLenum light, GLenum pname, const GLint *params);
typedef void (APIENTRYP PFNGLDELETEBUFFERSPROC)(GLsizei n, const GLuint *buffers);
typedef void (APIENTRYP PFNGLBINDPROGRAMPIPELINEPROC)(GLuint pipeline);
typedef void (APIENTRYP PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean *data);
typedef void (APIENTRYP PFNGLMATERIALFVPROC)(GLenum face, GLenum pname, const GLfloat *params);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVPROC)(GLuint index, const GLuint *v);
typedef void (APIENTRYP PFNGLCOLOR4DVPROC)(const GLdouble *v);
typedef void (APIENTRYP PFNGLUNIFORM2FVPROC)(GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP PFNGLBINDBUFFERRANGEPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (APIENTRYP PFNGLNORMAL3IVPROC)(const GLint *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DVPROC)(GLuint index, const GLdouble *v);
typedef void (APIENTRYP PFNGLGETUNIFORMDVPROC)(GLuint program, GLint location, GLdouble *params);
typedef void (APIENTRYP PFNGLCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);
typedef void (APIENTRYP PFNGLMULTITEXCOORD4SPROC)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (APIENTRYP PFNGLTEXCOORD1IVPROC)(const GLint *v);
typedef void (APIENTRYP PFNGLCOLOR3UIVPROC)(const GLuint *v);
typedef void (APIENTRYP PFNGLLISTBASEPROC)(GLuint base);
typedef GLenum (APIENTRYP PFNGLCLIENTWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVPROC)(GLuint index, const GLshort *v);
typedef void (APIENTRYP PFNGLGETUNIFORMSUBROUTINEUIVPROC)(GLenum shadertype, GLint location, GLuint *params);
typedef void (APIENTRYP PFNGLGETBOOLEANI_VPROC)(GLenum target, GLuint index, GLboolean *data);
typedef GLboolean (APIENTRYP PFNGLISSAMPLERPROC)(GLuint sampler);
typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (APIENTRYP PFNGLTEXCOORD1IPROC)(GLint s);
typedef GLenum (APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum target);
typedef void (APIENTRYP PFNGLTEXCOORD1DPROC)(GLdouble s);
typedef void (APIENTRYP PFNGLTEXCOORD1FPROC)(GLfloat s);
typedef void (APIENTRYP PFNGLVERTEXP3UIVPROC)(GLenum type, const GLuint *value);
typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
typedef void (APIENTRYP PFNGLTEXCOORD1SPROC)(GLshort s);
typedef void (APIENTRYP PFNGLBINDBUFFERBASEPROC)(GLenum target, GLuint index, GLuint buffer);
typedef void (APIENTRYP PFNGLCOLOR3BVPROC)(const GLbyte *v);
typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSPROC)(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DPROC)(GLuint index, GLdouble x);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVPROC)(GLuint index, const GLuint *v);
typedef void (APIENTRYP PFNGLCLEARACCUMPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (APIENTRYP PFNGLBEGINQUERYPROC)(GLenum target, GLuint id);
typedef void (APIENTRYP PFNGLBINDBUFFERPROC)(GLenum target, GLuint buffer);
typedef void (APIENTRYP PFNGLMAP2DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
typedef void (APIENTRYP PFNGLMAP2FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLDEPTHRANGEINDEXEDPROC)(GLuint index, GLdouble n, GLdouble f);
typedef GLboolean (APIENTRYP PFNGLISENABLEDPROC)(GLenum cap);
typedef GLenum (APIENTRYP PFNGLGETERRORPROC)();
typedef void (APIENTRYP PFNGLGETTEXENVIVPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLEVALCOORD1DPROC)(GLdouble u);
typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pname, GLfloat *params);
typedef void (APIENTRYP PFNGLEVALCOORD1FPROC)(GLfloat u);
typedef void (APIENTRYP PFNGLPIXELMAPFVPROC)(GLenum map, GLsizei mapsize, const GLfloat *values);
typedef void (APIENTRYP PFNGLGETPIXELMAPUSVPROC)(GLenum map, GLushort *values);
typedef void (APIENTRYP PFNGLACCUMPROC)(GLenum op, GLfloat value);
typedef void (APIENTRYP PFNGLTEXCOORD2IVPROC)(const GLint *v);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (APIENTRYP PFNGLSTENCILMASKPROC)(GLuint mask);
typedef void (APIENTRYP PFNGLRECTSVPROC)(const GLshort *v1, const GLshort *v2);
typedef void (APIENTRYP PFNGLGETTEXGENIVPROC)(GLenum coord, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);
typedef void (APIENTRYP PFNGLDEPTHMASKPROC)(GLboolean flag);
typedef void (APIENTRYP PFNGLPATCHPARAMETERFVPROC)(GLenum pname, const GLfloat *values);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIPROC)(GLuint program, GLenum pname, GLint value);
typedef void (APIENTRYP PFNGLGETMAPFVPROC)(GLenum target, GLenum query, GLfloat *v);
typedef void (APIENTRYP PFNGLRASTERPOS2FVPROC)(const GLfloat *v);
typedef void (APIENTRYP PFNGLRECTDPROC)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
typedef void (APIENTRYP PFNGLWINDOWPOS2SVPROC)(const GLshort *v);
typedef GLuint (APIENTRYP PFNGLCREATESHADERPROC)(GLenum type);
typedef void (APIENTRYP PFNGLGENRENDERBUFFERSPROC)(GLsizei n, GLuint *renderbuffers);
typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (APIENTRYP PFNGLTEXCOORD2FVPROC)(const GLfloat *v);
typedef void (APIENTRYP PFNGLRECTSPROC)(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
typedef void (APIENTRYP PFNGLTEXCOORD4FVPROC)(const GLfloat *v);
typedef void (APIENTRYP PFNGLPOINTSIZEPROC)(GLfloat size);
typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEINFOLOGPROC)(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVPROC)(GLuint index, const GLuint *v);
typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFNGLWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (APIENTRYP PFNGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);
typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (APIENTRYP PFNGLUNIFORM3DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef GLint (APIENTRYP PFNGLGETFRAGDATAINDEXPROC)(GLuint program, const GLchar *name);
typedef void (APIENTRYP PFNGLCOLOR3SVPROC)(const GLshort *v);
typedef void (APIENTRYP PFNGLVERTEX4SVPROC)(const GLshort *v);
typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei n, const GLuint *framebuffers);
typedef void (APIENTRYP PFNGLDRAWARRAYSPROC)(GLenum mode, GLint first, GLsizei count);
typedef void (APIENTRYP PFNGLCLEARPROC)(GLbitfield mask);
typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (APIENTRYP PFNGLTRANSLATEFPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void (APIENTRYP PFNGLTRANSLATEDPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, const GLint *param);
typedef void (APIENTRYP PFNGLTEXIMAGE1DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BVPROC)(const GLbyte *v);
typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VPROC)(GLuint id, GLenum pname, GLint64 *params);
typedef GLboolean (APIENTRYP PFNGLISRENDERBUFFERPROC)(GLuint renderbuffer);
typedef void (APIENTRYP PFNGLVERTEX3IVPROC)(const GLint *v);
typedef void (APIENTRYP PFNGLTEXGENFVPROC)(GLenum coord, GLenum pname, const GLfloat *params);
typedef void (APIENTRYP PFNGLMATERIALIPROC)(GLenum face, GLenum pname, GLint param);
typedef GLboolean (APIENTRYP PFNGLISVERTEXARRAYPROC)(GLuint array);
typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void (APIENTRYP PFNGLVERTEX3DVPROC)(const GLdouble *v);
typedef void (APIENTRYP PFNGLMATERIALFPROC)(GLenum face, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVPROC)(GLuint index, const GLubyte *v);
typedef void (APIENTRYP PFNGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVPROC)(GLuint index, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLPATCHPARAMETERIPROC)(GLenum pname, GLint value);
typedef void (APIENTRYP PFNGLMAP1DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
typedef void (APIENTRYP PFNGLMAP1FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
typedef void (APIENTRYP PFNGLRASTERPOS3SVPROC)(const GLshort *v);
typedef void (APIENTRYP PFNGLLIGHTIPROC)(GLenum light, GLenum pname, GLint param);
typedef void (APIENTRYP PFNGLLIGHTFPROC)(GLenum light, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEPROC)(GLenum face, GLenum func, GLint ref, GLuint mask);
typedef void (APIENTRYP PFNGLMAPGRID2DPROC)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
typedef void (APIENTRYP PFNGLUNIFORM2DPROC)(GLint location, GLdouble x, GLdouble y);
typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLTEXENVFPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFNGLGETINTEGER64I_VPROC)(GLenum target, GLuint index, GLint64 *data);
typedef void (APIENTRYP PFNGLTEXENVIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (APIENTRYP PFNGLBLITFRAMEBUFFERPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef GLboolean (APIENTRYP PFNGLISENABLEDIPROC)(GLenum target, GLuint index);
typedef void (APIENTRYP PFNGLGETPOINTERVPROC)(GLenum pname, void **params);
typedef void (APIENTRYP PFNGLGETMAPIVPROC)(GLenum target, GLenum query, GLint *v);
typedef void (APIENTRYP PFNGLMULTITEXCOORD4SVPROC)(GLenum target, const GLshort *v);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONPROC)(GLuint program, GLuint color, const GLchar *name);
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBVPROC)(const GLubyte *v);
typedef void (APIENTRYP PFNGLMULTITEXCOORD3IVPROC)(GLenum target, const GLint *v);
typedef void (APIENTRYP PFNGLLIGHTMODELFPROC)(GLenum pname, GLfloat param);
typedef void (APIENTRYP PFNGLLIGHTMODELIPROC)(GLenum pname, GLint param);
typedef void (APIENTRYP PFNGLWINDOWPOS3IVPROC)(const GLint *v);
typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
typedef void (APIENTRYP PFNGLCALLLISTSPROC)(GLsizei n, GLenum type, const void *lists);
typedef void (APIENTRYP PFNGLTEXCOORD3IPROC)(GLint s, GLint t, GLint r);
typedef void (APIENTRYP PFNGLTEXCOORD3FPROC)(GLfloat s, GLfloat t, GLfloat r);
typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
typedef void (APIENTRYP PFNGLTEXCOORD3SPROC)(GLshort s, GLshort t, GLshort r);
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
typedef GLboolean (APIENTRYP PFNGLARETEXTURESRESIDENTPROC)(GLsizei n, const GLuint *textures, GLboolean *residences);
typedef void (APIENTRYP PFNGLRASTERPOS4SVPROC)(const GLshort *v);
typedef void (APIENTRYP PFNGLCOLOR4SPROC)(GLshort red, GLshort green, GLshort blue, GLshort alpha);
typedef void (APIENTRYP PFNGLBINDVERTEXARRAYPROC)(GLuint array);
typedef void (APIENTRYP PFNGLCOLOR4BPROC)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
typedef void (APIENTRYP PFNGLCOLOR4FPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (APIENTRYP PFNGLCOLOR4DPROC)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
typedef void (APIENTRYP PFNGLCOLOR4IPROC)(GLint red, GLint green, GLint blue, GLint alpha);
typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
typedef void (APIENTRYP PFNGLVERTEX2DVPROC)(const GLdouble *v);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
typedef void (APIENTRYP PFNGLTEXBUFFERPROC)(GLenum target, GLenum internalformat, GLuint buffer);
typedef void (APIENTRYP PFNGLARRAYELEMENTPROC)(GLint i);
typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPROC)(GLuint program);
typedef void (APIENTRYP PFNGLACTIVESHADERPROGRAMPROC)(GLuint pipeline, GLuint program);
typedef void (APIENTRYP PFNGLEVALCOORD1DVPROC)(const GLdouble *u);
typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
typedef void (APIENTRYP PFNGLRECTIPROC)(GLint x1, GLint y1, GLint x2, GLint y2);
typedef void (APIENTRYP PFNGLRECTFPROC)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP PFNGLBINDTEXTUREPROC)(GLenum target, GLuint texture);
typedef void (APIENTRYP PFNGLDETACHSHADERPROC)(GLuint program, GLuint shader);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFVPROC)(GLuint index, const GLfloat *v);
typedef void (APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
typedef void (APIENTRYP PFNGLSAMPLECOVERAGEPROC)(GLfloat value, GLboolean invert);
typedef void (APIENTRYP PFNGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint *params);
typedef void (APIENTRYP PFNGLUNIFORM4UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (APIENTRYP PFNGLBINDFRAMEBUFFERPROC)(GLenum target, GLuint framebuffer);
typedef void (APIENTRYP PFNGLTEXGENFPROC)(GLenum coord, GLenum pname, GLfloat param);
typedef void (APIENTRYP PFNGLTEXGENDPROC)(GLenum coord, GLenum pname, GLdouble param);
typedef void (APIENTRYP PFNGLTEXGENIPROC)(GLenum coord, GLenum pname, GLint param);
typedef void (APIENTRYP PFNGLSCISSORINDEXEDPROC)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFNGLRASTERPOS2DVPROC)(const GLdouble *v);
typedef GLuint (APIENTRYP PFNGLCREATESHADERPROGRAMVPROC)(GLenum type, GLsizei count, const GLchar *const*strings);
typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVPROC)(GLuint id, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLGENERATEMIPMAPPROC)(GLenum target);
typedef void (APIENTRYP PFNGLDELETELISTSPROC)(GLuint list, GLsizei range);
typedef void (APIENTRYP PFNGLTEXCOORD2DPROC)(GLdouble s, GLdouble t);
typedef void (APIENTRYP PFNGLPOINTPARAMETERIPROC)(GLenum pname, GLint param);
typedef void (APIENTRYP PFNGLTEXCOORD2FPROC)(GLfloat s, GLfloat t);
typedef void (APIENTRYP PFNGLCOLOR4IVPROC)(const GLint *v);
typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERPROC)(GLenum target);
typedef void (APIENTRYP PFNGLTEXCOORD2IPROC)(GLint s, GLint t);
typedef void (APIENTRYP PFNGLPOINTPARAMETERFPROC)(GLenum pname, GLfloat param);
typedef void (APIENTRYP PFNGLTEXCOORD2SPROC)(GLshort s, GLshort t);
typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
typedef void (APIENTRYP PFNGLNORMAL3DVPROC)(const GLdouble *v);
typedef void (APIENTRYP PFNGLRELEASESHADERCOMPILERPROC)();
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);
typedef void (APIENTRYP PFNGLTEXCOORD1DVPROC)(const GLdouble *v);
typedef void (APIENTRYP PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVPROC)(GLuint index, const GLint *v);
typedef void (APIENTRYP PFNGLSHADEMODELPROC)(GLenum mode);
typedef void (APIENTRYP PFNGLMAPGRID1DPROC)(GLint un, GLdouble u1, GLdouble u2);
typedef void (APIENTRYP PFNGLMAPGRID1FPROC)(GLint un, GLfloat u1, GLfloat u2);
typedef void (APIENTRYP PFNGLRECTIVPROC)(const GLint *v1, const GLint *v2);
typedef void (APIENTRYP PFNGLCOLORP4UIPROC)(GLenum type, GLuint color);
typedef void (APIENTRYP PFNGLRASTERPOS3DVPROC)(const GLdouble *v);
typedef void (APIENTRYP PFNGLCLEARBUFFERUIVPROC)(GLenum buffer, GLint drawbuffer, const GLuint *value);
typedef void (APIENTRYP PFNGLNORMALP3UIPROC)(GLenum type, GLuint coords);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVPROC)(GLuint index, const GLint *v);
typedef void (APIENTRYP PFNGLCOLOR4UBVPROC)(const GLubyte *v);
typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, void *data);
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLDVPROC)(GLuint index, GLenum pname, GLdouble *params);
typedef void (APIENTRYP PFNGLTEXCOORDP1UIVPROC)(GLenum type, const GLuint *coords);
typedef void (APIENTRYP PFNGLTEXIMAGE3DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFERPROC)(GLuint framebuffer);
typedef void (APIENTRYP PFNGLTEXCOORDP4UIVPROC)(GLenum type, const GLuint *coords);
typedef void (APIENTRYP PFNGLTEXGENDVPROC)(GLenum coord, GLenum pname, const GLdouble *params);
typedef void (APIENTRYP PFNGLVERTEXP2UIVPROC)(GLenum type, const GLuint *value);
typedef void (APIENTRYP PFNGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERI64VPROC)(GLenum target, GLenum pname, GLint64 *params);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVPROC)(GLuint index, const GLushort *v);
typedef void (APIENTRYP PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
typedef void (APIENTRYP PFNGLBLENDFUNCIPROC)(GLuint buf, GLenum src, GLenum dst);
typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar *name);
typedef void (APIENTRYP PFNGLTEXCOORD4DVPROC)(const GLdouble *v);
typedef void (APIENTRYP PFNGLUNIFORM4FVPROC)(GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERPROC)();
typedef void (APIENTRYP PFNGLENABLECLIENTSTATEPROC)(GLenum array);
typedef void (APIENTRYP PFNGLMULTITEXCOORD2SVPROC)(GLenum target, const GLshort *v);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVPROC)(GLuint id, GLenum pname, GLuint *params);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVPROC)(GLuint index, const GLint *v);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP PFNGLGETTEXGENDVPROC)(GLenum coord, GLenum pname, GLdouble *params);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DVPROC)(GLuint index, const GLdouble *v);
typedef void (APIENTRYP PFNGLCOLOR3USVPROC)(const GLushort *v);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP PFNGLRASTERPOS2SVPROC)(const GLshort *v);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLTEXCOORD1SVPROC)(const GLshort *v);
typedef void (APIENTRYP PFNGLNEWLISTPROC)(GLuint list, GLenum mode);
typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIVPROC)(GLenum type, const GLuint *color);
typedef void (APIENTRYP PFNGLGETINTEGERVPROC)(GLenum pname, GLint *data);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLVERTEX2SPROC)(GLshort x, GLshort y);
typedef GLboolean (APIENTRYP PFNGLISQUERYPROC)(GLuint id);
typedef void (APIENTRYP PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP PFNGLDRAWPIXELSPROC)(GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP PFNGLMULTMATRIXDPROC)(const GLdouble *m);
typedef void (APIENTRYP PFNGLMULTMATRIXFPROC)(const GLfloat *m);
typedef void (APIENTRYP PFNGLCOLOR4USVPROC)(const GLushort *v);
typedef void (APIENTRYP PFNGLPOLYGONSTIPPLEPROC)(const GLubyte *mask);
typedef void (APIENTRYP PFNGLINTERLEAVEDARRAYSPROC)(GLenum format, GLsizei stride, const void *pointer);
typedef void (APIENTRYP PFNGLPIXELMAPUSVPROC)(GLenum map, GLsizei mapsize, const GLushort *values);
typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLCOPYBUFFERSUBDATAPROC)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVPROC)(GLuint index, const GLuint *v);
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
typedef void (APIENTRYP PFNGLCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLVERTEX2FVPROC)(const GLfloat *v);
typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (APIENTRYP PFNGLGETDOUBLEI_VPROC)(GLenum target, GLuint index, GLdouble *data);
typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVPROC)(GLuint index, const GLshort *v);
typedef void (APIENTRYP PFNGLBINDSAMPLERPROC)(GLuint unit, GLuint sampler);
typedef void (APIENTRYP PFNGLLINEWIDTHPROC)(GLfloat width);
typedef void (APIENTRYP PFNGLGETINTEGERI_VPROC)(GLenum target, GLuint index, GLint *data);
typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
typedef void (APIENTRYP PFNGLFOGIVPROC)(GLenum pname, const GLint *params);
typedef void (APIENTRYP PFNGLLIGHTMODELIVPROC)(GLenum pname, const GLint *params);
typedef void (APIENTRYP PFNGLDEPTHRANGEFPROC)(GLfloat n, GLfloat f);
typedef void (APIENTRYP PFNGLGETPIXELMAPFVPROC)(GLenum map, GLfloat *values);
typedef void (APIENTRYP PFNGLENABLEIPROC)(GLenum target, GLuint index);
typedef void (APIENTRYP PFNGLEVALCOORD1FVPROC)(const GLfloat *u);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVPROC)(GLuint index, const GLdouble *v);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLUSEPROGRAMSTAGESPROC)(GLuint pipeline, GLbitfield stages, GLuint program);
typedef void (APIENTRYP PFNGLEDGEFLAGPROC)(GLboolean flag);
typedef void (APIENTRYP PFNGLFOGCOORDFPROC)(GLfloat coord);
typedef void (APIENTRYP PFNGLVERTEX3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFNGLVERTEX3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFNGLVERTEX3IPROC)(GLint x, GLint y, GLint z);
typedef void (APIENTRYP PFNGLVERTEX3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void (APIENTRYP PFNGLTEXCOORDP2UIPROC)(GLenum type, GLuint coords);
typedef void (APIENTRYP PFNGLCOLORMASKIPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef void (APIENTRYP PFNGLRASTERPOS4IPROC)(GLint x, GLint y, GLint z, GLint w);
typedef void (APIENTRYP PFNGLNORMALPOINTERPROC)(GLenum type, GLsizei stride, const void *pointer);
typedef void (APIENTRYP PFNGLPASSTHROUGHPROC)(GLfloat token);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLBEGINPROC)(GLenum mode);
typedef void (APIENTRYP PFNGLEVALCOORD2DVPROC)(const GLdouble *u);
typedef void (APIENTRYP PFNGLCOLOR3UBVPROC)(const GLubyte *v);
typedef void (APIENTRYP PFNGLVERTEXP3UIPROC)(GLenum type, GLuint value);
typedef void (APIENTRYP PFNGLLIGHTFVPROC)(GLenum light, GLenum pname, const GLfloat *params);
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMNAMEPROC)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum target, GLenum attachment, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint *params);
typedef void (APIENTRYP PFNGLGETTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
typedef void (APIENTRYP PFNGLINDEXSVPROC)(const GLshort *c);
typedef void (APIENTRYP PFNGLBITMAPPROC)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP PFNGLGETQUERYIVPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLTEXCOORD4FPROC)(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (APIENTRYP PFNGLTEXCOORD4DPROC)(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, GLfloat *params);
typedef void (APIENTRYP PFNGLTEXCOORD4IPROC)(GLint s, GLint t, GLint r, GLint q);
typedef void (APIENTRYP PFNGLTEXCOORD4SPROC)(GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (APIENTRYP PFNGLGETUNIFORMINDICESPROC)(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
typedef void (APIENTRYP PFNGLPOINTPARAMETERIVPROC)(GLenum pname, const GLint *params);
typedef void (APIENTRYP PFNGLNORMAL3FVPROC)(const GLfloat *v);
typedef void (APIENTRYP PFNGLTEXCOORD1FVPROC)(const GLfloat *v);
typedef void (APIENTRYP PFNGLMULTITEXCOORD1DVPROC)(GLenum target, const GLdouble *v);
typedef void (APIENTRYP PFNGLTEXCOORD3FVPROC)(const GLfloat *v);
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USVPROC)(const GLushort *v);
typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
typedef void (APIENTRYP PFNGLDEPTHRANGEPROC)(GLdouble near, GLdouble far);
typedef void (APIENTRYP PFNGLDRAWBUFFERPROC)(GLenum buf);
typedef void (APIENTRYP PFNGLRASTERPOS3FVPROC)(const GLfloat *v);
typedef void (APIENTRYP PFNGLCLEARINDEXPROC)(GLfloat c);
typedef void (APIENTRYP PFNGLFLUSHPROC)();
typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLCLAMPCOLORPROC)(GLenum target, GLenum clamp);
typedef void (APIENTRYP PFNGLCLEARSTENCILPROC)(GLint s);
typedef void (APIENTRYP PFNGLMULTITEXCOORD3FVPROC)(GLenum target, const GLfloat *v);
typedef void (APIENTRYP PFNGLVERTEX2FPROC)(GLfloat x, GLfloat y);
typedef void (APIENTRYP PFNGLVERTEX2DPROC)(GLdouble x, GLdouble y);
typedef void (APIENTRYP PFNGLBEGINQUERYINDEXEDPROC)(GLenum target, GLuint index, GLuint id);
typedef void (APIENTRYP PFNGLVERTEX2IPROC)(GLint x, GLint y);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length);
typedef void (APIENTRYP PFNGLGENQUERIESPROC)(GLsizei n, GLuint *ids);
typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP PFNGLDELETESAMPLERSPROC)(GLsizei count, const GLuint *samplers);
typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIPROC)(GLenum type, GLuint color);
typedef void (APIENTRYP PFNGLMATRIXMODEPROC)(GLenum mode);
typedef void (APIENTRYP PFNGLPRIORITIZETEXTURESPROC)(GLsizei n, const GLuint *textures, const GLfloat *priorities);
typedef void (APIENTRYP PFNGLGETDOUBLEVPROC)(GLenum pname, GLdouble *data);
typedef void (APIENTRYP PFNGLUNIFORM4DVPROC)(GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP PFNGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);
typedef void (APIENTRYP PFNGLUNIFORM3FVPROC)(GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void (APIENTRYP PFNGLGENBUFFERSPROC)(GLsizei n, GLuint *buffers);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSPROC)(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);
typedef void (APIENTRYP PFNGLGETTEXGENFVPROC)(GLenum coord, GLenum pname, GLfloat *params);
typedef void (APIENTRYP PFNGLMULTITEXCOORD2IVPROC)(GLenum target, const GLint *v);
typedef void (APIENTRYP PFNGLRASTERPOS3IVPROC)(const GLint *v);
typedef void (APIENTRYP PFNGLVERTEXP2UIPROC)(GLenum type, GLuint value);
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);
typedef void (APIENTRYP PFNGLTEXCOORD4SVPROC)(const GLshort *v);
typedef void (APIENTRYP PFNGLUNIFORM2UIVPROC)(GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP PFNGLFINISHPROC)();
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IPROC)(GLint red, GLint green, GLint blue);
typedef void (APIENTRYP PFNGLUNIFORM1UIVPROC)(GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLINDEXDVPROC)(const GLdouble *c);
typedef void (APIENTRYP PFNGLTEXCOORD3IVPROC)(const GLint *v);
typedef void (APIENTRYP PFNGLCLEARDEPTHPROC)(GLdouble depth);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLNORMAL3SVPROC)(const GLshort *v);
typedef void (APIENTRYP PFNGLRASTERPOS4IVPROC)(const GLint *v);
typedef void (APIENTRYP PFNGLEDGEFLAGVPROC)(const GLboolean *flag);
typedef void (APIENTRYP PFNGLDELETEPROGRAMPROC)(GLuint program);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLNORMALP3UIVPROC)(GLenum type, const GLuint *coords);
typedef void (APIENTRYP PFNGLINITNAMESPROC)();
typedef void (APIENTRYP PFNGLCOLOR3DVPROC)(const GLdouble *v);
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVPROC)(GLuint index, GLenum pname, GLfloat *params);
typedef void (APIENTRYP PFNGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
typedef void (APIENTRYP PFNGLTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void (APIENTRYP PFNGLCLEARBUFFERFVPROC)(GLenum buffer, GLint drawbuffer, const GLfloat *value);
typedef void (APIENTRYP PFNGLLOGICOPPROC)(GLenum opcode);
typedef void (APIENTRYP PFNGLPIXELTRANSFERFPROC)(GLenum pname, GLfloat param);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)(GLenum mode, GLuint id, GLuint stream);
typedef void (APIENTRYP PFNGLPROVOKINGVERTEXPROC)(GLenum mode);
typedef void (APIENTRYP PFNGLSHADERBINARYPROC)(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);
typedef void (APIENTRYP PFNGLTEXGENIVPROC)(GLenum coord, GLenum pname, const GLint *params);
typedef void (APIENTRYP PFNGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices);
typedef void (APIENTRYP PFNGLCLIENTACTIVETEXTUREPROC)(GLenum texture);
typedef void (APIENTRYP PFNGLUNIFORM1IVPROC)(GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, const GLint *param);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVPROC)(GLuint index, const GLuint *v);
typedef void (APIENTRYP PFNGLENDQUERYINDEXEDPROC)(GLenum target, GLuint index);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP PFNGLBINDRENDERBUFFERPROC)(GLenum target, GLuint renderbuffer);
typedef void (APIENTRYP PFNGLMATERIALIVPROC)(GLenum face, GLenum pname, const GLint *params);
typedef GLboolean (APIENTRYP PFNGLISPROGRAMPROC)(GLuint program);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVPROC)(GLuint index, const GLfloat *v);
typedef void (APIENTRYP PFNGLPUSHCLIENTATTRIBPROC)(GLbitfield mask);
typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVPROC)(GLuint index, const GLfloat *v);
typedef void (APIENTRYP PFNGLBINDTRANSFORMFEEDBACKPROC)(GLenum target, GLuint id);
typedef void (APIENTRYP PFNGLDISABLECLIENTSTATEPROC)(GLenum array);
typedef void (APIENTRYP PFNGLCOLOR4UIVPROC)(const GLuint *v);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void (APIENTRYP PFNGLEVALMESH2PROC)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
typedef void (APIENTRYP PFNGLEVALMESH1PROC)(GLenum mode, GLint i1, GLint i2);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
typedef void (APIENTRYP PFNGLEVALCOORD2FVPROC)(const GLfloat *u);
typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXDPROC)(const GLdouble *m);
typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXFPROC)(const GLfloat *m);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIPROC)(GLuint index, GLuint x);
typedef void (APIENTRYP PFNGLGETINTEGER64VPROC)(GLenum pname, GLint64 *data);
typedef void (APIENTRYP PFNGLCLIPPLANEPROC)(GLenum plane, const GLdouble *equation);
typedef void (APIENTRYP PFNGLINDEXUBPROC)(GLubyte c);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVPROC)(GLuint index, const GLint *v);
typedef void (APIENTRYP PFNGLCLEARBUFFERIVPROC)(GLenum buffer, GLint drawbuffer, const GLint *value);
typedef void (APIENTRYP PFNGLCOLORP4UIVPROC)(GLenum type, const GLuint *color);
typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
typedef void (APIENTRYP PFNGLMULTITEXCOORD1FVPROC)(GLenum target, const GLfloat *v);
typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, GLuint *params);
typedef void (APIENTRYP PFNGLTEXCOORDP3UIPROC)(GLenum type, GLuint coords);
typedef void (APIENTRYP PFNGLWINDOWPOS3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void (APIENTRYP PFNGLCLEARDEPTHFPROC)(GLfloat d);
typedef void (APIENTRYP PFNGLWINDOWPOS3IPROC)(GLint x, GLint y, GLint z);
typedef void (APIENTRYP PFNGLWINDOWPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFNGLWINDOWPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void * (APIENTRYP PFNGLMAPBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (APIENTRYP PFNGLMULTITEXCOORD4FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (APIENTRYP PFNGLCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);
typedef void (APIENTRYP PFNGLMULTITEXCOORD4DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (APIENTRYP PFNGLCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);
typedef void (APIENTRYP PFNGLMULTITEXCOORD4IPROC)(GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void (APIENTRYP PFNGLGETPOLYGONSTIPPLEPROC)(GLubyte *mask);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void (APIENTRYP PFNGLDEPTHFUNCPROC)(GLenum func);
typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC)(GLenum mode);
typedef void (APIENTRYP PFNGLMULTITEXCOORD3DVPROC)(GLenum target, const GLdouble *v);
typedef void (APIENTRYP PFNGLCOLOR4SVPROC)(const GLshort *v);
typedef void (APIENTRYP PFNGLPOPCLIENTATTRIBPROC)();
typedef void (APIENTRYP PFNGLCOLOR3IVPROC)(const GLint *v);
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
typedef void (APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSPROC)(GLsizei n, const GLuint *ids);
typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index, const GLchar *name);
typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVPROC)(GLuint index, const GLdouble *v);
typedef void (APIENTRYP PFNGLBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
typedef void (APIENTRYP PFNGLGETLIGHTIVPROC)(GLenum light, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (APIENTRYP PFNGLVERTEXP4UIVPROC)(GLenum type, const GLuint *value);
typedef void (APIENTRYP PFNGLWINDOWPOS2FVPROC)(const GLfloat *v);
typedef void (APIENTRYP PFNGLDISABLEIPROC)(GLenum target, GLuint index);
typedef void (APIENTRYP PFNGLGETSYNCIVPROC)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IPROC)(GLuint program, GLint location, GLint v0, GLint v1);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void (APIENTRYP PFNGLGETPROGRAMBINARYPROC)(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
typedef void (APIENTRYP PFNGLEVALPOINT1PROC)(GLint i);
typedef void (APIENTRYP PFNGLEVALPOINT2PROC)(GLint i, GLint j);
typedef void (APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKPROC)();
typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
typedef void (APIENTRYP PFNGLRASTERPOS4DVPROC)(const GLdouble *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVPROC)(GLuint index, const GLshort *v);
typedef void (APIENTRYP PFNGLLOADNAMEPROC)(GLuint name);
typedef void (APIENTRYP PFNGLLOADMATRIXFPROC)(const GLfloat *m);
typedef void (APIENTRYP PFNGLLOADMATRIXDPROC)(const GLdouble *m);
typedef void (APIENTRYP PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat *params);
typedef void (APIENTRYP PFNGLUNIFORM3DVPROC)(GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP PFNGLPOPNAMEPROC)();
typedef void (APIENTRYP PFNGLDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void *indirect);
typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VPROC)(GLuint id, GLenum pname, GLuint64 *params);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLDELETEPROGRAMPIPELINESPROC)(GLsizei n, const GLuint *pipelines);
typedef void (APIENTRYP PFNGLGENPROGRAMPIPELINESPROC)(GLsizei n, GLuint *pipelines);
typedef void (APIENTRYP PFNGLWINDOWPOS2SPROC)(GLshort x, GLshort y);
typedef void (APIENTRYP PFNGLWINDOWPOS2IPROC)(GLint x, GLint y);
typedef void (APIENTRYP PFNGLWINDOWPOS2FPROC)(GLfloat x, GLfloat y);
typedef void (APIENTRYP PFNGLWINDOWPOS2DPROC)(GLdouble x, GLdouble y);
typedef void (APIENTRYP PFNGLUNIFORMSUBROUTINESUIVPROC)(GLenum shadertype, GLsizei count, const GLuint *indices);
typedef void (APIENTRYP PFNGLRECTDVPROC)(const GLdouble *v1, const GLdouble *v2);
typedef void (APIENTRYP PFNGLCOLORP3UIVPROC)(GLenum type, const GLuint *color);
typedef void (APIENTRYP PFNGLFOGCOORDFVPROC)(const GLfloat *coord);
typedef void (APIENTRYP PFNGLCOMPILESHADERPROC)(GLuint shader);
typedef void (APIENTRYP PFNGLINDEXFVPROC)(const GLfloat *c);
typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
typedef void (APIENTRYP PFNGLVERTEX4FVPROC)(const GLfloat *v);
typedef void (APIENTRYP PFNGLDRAWBUFFERSPROC)(GLsizei n, const GLenum *bufs);
typedef void (APIENTRYP PFNGLVERTEXATTRIB1SPROC)(GLuint index, GLshort x);
typedef void (APIENTRYP PFNGLMULTITEXCOORD1SVPROC)(GLenum target, const GLshort *v);
typedef void (APIENTRYP PFNGLRASTERPOS2SPROC)(GLshort x, GLshort y);
typedef void (APIENTRYP PFNGLCOLOR4BVPROC)(const GLbyte *v);
typedef void (APIENTRYP PFNGLRASTERPOS2FPROC)(GLfloat x, GLfloat y);
typedef void (APIENTRYP PFNGLRASTERPOS2DPROC)(GLdouble x, GLdouble y);
typedef void (APIENTRYP PFNGLLOADIDENTITYPROC)();
typedef void (APIENTRYP PFNGLRASTERPOS2IPROC)(GLint x, GLint y);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLCLEARBUFFERFIPROC)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef void (APIENTRYP PFNGLDRAWARRAYSINDIRECTPROC)(GLenum mode, const void *indirect);
typedef void (APIENTRYP PFNGLGENVERTEXARRAYSPROC)(GLsizei n, GLuint *arrays);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVPROC)(GLuint index, GLenum pname, GLdouble *params);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLUNIFORM1UIPROC)(GLint location, GLuint v0);
typedef GLint (APIENTRYP PFNGLGETFRAGDATALOCATIONPROC)(GLuint program, const GLchar *name);
typedef void (APIENTRYP PFNGLGETMATERIALFVPROC)(GLenum face, GLenum pname, GLfloat *params);
typedef void (APIENTRYP PFNGLPIXELMAPUIVPROC)(GLenum map, GLsizei mapsize, const GLuint *values);
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef GLboolean (APIENTRYP PFNGLISSHADERPROC)(GLuint shader);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMSIVPROC)(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLDELETEQUERIESPROC)(GLsizei n, const GLuint *ids);
typedef void (APIENTRYP PFNGLBLENDEQUATIONIPROC)(GLuint buf, GLenum mode);
typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONPROC)(GLuint program, const GLchar *name);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVPROC)(GLuint index, const GLdouble *v);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (APIENTRYP PFNGLENABLEPROC)(GLenum cap);
typedef void (APIENTRYP PFNGLPUSHMATRIXPROC)();
typedef void (APIENTRYP PFNGLORTHOPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (APIENTRYP PFNGLWINDOWPOS3SVPROC)(const GLshort *v);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IPROC)(GLuint program, GLint location, GLint v0);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FPROC)(GLuint program, GLint location, GLfloat v0);
typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKPROC)(GLenum primitiveMode);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP PFNGLINDEXIVPROC)(const GLint *c);
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, GLenum pname, void **pointer);
typedef void (APIENTRYP PFNGLPIXELZOOMPROC)(GLfloat xfactor, GLfloat yfactor);
typedef void (APIENTRYP PFNGLCOLORP3UIPROC)(GLenum type, GLuint color);
typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERPROC)(GLuint id, GLenum mode);
typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
typedef void (APIENTRYP PFNGLUNIFORM4IVPROC)(GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP PFNGLGENTEXTURESPROC)(GLsizei n, GLuint *textures);
typedef GLboolean (APIENTRYP PFNGLISTEXTUREPROC)(GLuint texture);
typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSPROC)(GLsizei n, const GLuint *renderbuffers);
typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
typedef void (APIENTRYP PFNGLNORMAL3BVPROC)(const GLbyte *v);
typedef void (APIENTRYP PFNGLGETFLOATI_VPROC)(GLenum target, GLuint index, GLfloat *data);
typedef void (APIENTRYP PFNGLVERTEX3SVPROC)(const GLshort *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
typedef void (APIENTRYP PFNGLTEXCOORDP4UIPROC)(GLenum type, GLuint coords);
typedef void (APIENTRYP PFNGLMULTITEXCOORD2DVPROC)(GLenum target, const GLdouble *v);
typedef void (APIENTRYP PFNGLUNIFORM2IVPROC)(GLint location, GLsizei count, const GLint *value);
typedef void (APIENTRYP PFNGLFEEDBACKBUFFERPROC)(GLsizei size, GLenum type, GLfloat *buffer);
typedef void (APIENTRYP PFNGLMULTITEXCOORD2IPROC)(GLenum target, GLint s, GLint t);
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (APIENTRYP PFNGLGETSHADERIVPROC)(GLuint shader, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLMULTITEXCOORD2DPROC)(GLenum target, GLdouble s, GLdouble t);
typedef void (APIENTRYP PFNGLMULTITEXCOORD2FPROC)(GLenum target, GLfloat s, GLfloat t);
typedef void (APIENTRYP PFNGLUNIFORM1DVPROC)(GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP PFNGLPIXELTRANSFERIPROC)(GLenum pname, GLint param);
typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVPROC)(GLuint index, const GLfloat *v);
typedef void (APIENTRYP PFNGLVERTEX2SVPROC)(const GLshort *v);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLGETPROGRAMIVPROC)(GLuint program, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLRASTERPOS3IPROC)(GLint x, GLint y, GLint z);
typedef void (APIENTRYP PFNGLRASTERPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFNGLRASTERPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVPROC)(GLuint index, const GLfloat *v);
typedef GLboolean (APIENTRYP PFNGLISLISTPROC)(GLuint list);
typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DPROC)(GLuint program, GLint location, GLdouble v0);
typedef void (APIENTRYP PFNGLRASTERPOS4FVPROC)(const GLfloat *v);
typedef void (APIENTRYP PFNGLGETFLOATVPROC)(GLenum pname, GLfloat *data);
typedef void (APIENTRYP PFNGLHINTPROC)(GLenum target, GLenum mode);
typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
typedef void (APIENTRYP PFNGLSCALEFPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFNGLSCALEDPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFNGLDEPTHRANGEARRAYVPROC)(GLuint first, GLsizei count, const GLdouble *v);
typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DVPROC)(GLuint index, const GLdouble *v);
typedef void (APIENTRYP PFNGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
typedef void (APIENTRYP PFNGLWINDOWPOS2DVPROC)(const GLdouble *v);
typedef void (APIENTRYP PFNGLTEXCOORD3DPROC)(GLdouble s, GLdouble t, GLdouble r);
typedef void (APIENTRYP PFNGLDISABLEPROC)(GLenum cap);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP PFNGLRECTFVPROC)(const GLfloat *v1, const GLfloat *v2);
typedef void (APIENTRYP PFNGLGETLIGHTFVPROC)(GLenum light, GLenum pname, GLfloat *params);
typedef void (APIENTRYP PFNGLMULTITEXCOORD3SPROC)(GLenum target, GLshort s, GLshort t, GLshort r);
typedef void (APIENTRYP PFNGLMULTITEXCOORD3FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void (APIENTRYP PFNGLFOGCOORDDVPROC)(const GLdouble *coord);
typedef void (APIENTRYP PFNGLREADBUFFERPROC)(GLenum src);
typedef void (APIENTRYP PFNGLPUSHNAMEPROC)(GLuint name);
typedef void (APIENTRYP PFNGLGETCLIPPLANEPROC)(GLenum plane, GLdouble *equation);
typedef void (APIENTRYP PFNGLVERTEX4DVPROC)(const GLdouble *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIB3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFNGLBLENDCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, const GLuint *param);
typedef void (APIENTRYP PFNGLINDEXUBVPROC)(const GLubyte *c);
typedef void (APIENTRYP PFNGLRASTERPOS4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP PFNGLRASTERPOS4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (APIENTRYP PFNGLVERTEXATTRIB3SPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void (APIENTRYP PFNGLVERTEX3FVPROC)(const GLfloat *v);
typedef void (APIENTRYP PFNGLRASTERPOS4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (APIENTRYP PFNGLGETPROGRAMSTAGEIVPROC)(GLuint program, GLenum shadertype, GLenum pname, GLint *values);
typedef void (APIENTRYP PFNGLPOPMATRIXPROC)();
typedef void (APIENTRYP PFNGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC)(GLenum texture);
typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void (APIENTRYP PFNGLUNIFORM4DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (APIENTRYP PFNGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (APIENTRYP PFNGLVERTEXATTRIBLPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (APIENTRYP PFNGLMULTITEXCOORD3SVPROC)(GLenum target, const GLshort *v);
typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINENAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
typedef void (APIENTRYP PFNGLMULTITEXCOORD4IVPROC)(GLenum target, const GLint *v);
typedef void (APIENTRYP PFNGLTEXENVFVPROC)(GLenum target, GLenum pname, const GLfloat *params);
typedef void (APIENTRYP PFNGLUNIFORMBLOCKBINDINGPROC)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
typedef void (APIENTRYP PFNGLTEXCOORDPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void *pointer);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVPROC)(GLuint index, const GLubyte *v);
typedef void (APIENTRYP PFNGLGETQUERYINDEXEDIVPROC)(GLenum target, GLuint index, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLTEXENVIVPROC)(GLenum target, GLenum pname, const GLint *params);
typedef void (APIENTRYP PFNGLSELECTBUFFERPROC)(GLsizei size, GLuint *buffer);
typedef void (APIENTRYP PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);
typedef GLuint (APIENTRYP PFNGLCREATEPROGRAMPROC)();
typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXPROC)(GLuint index);
typedef void (APIENTRYP PFNGLENDPROC)();
typedef void (APIENTRYP PFNGLUNIFORM3UIVPROC)(GLint location, GLsizei count, const GLuint *value);
typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXFPROC)(const GLfloat *m);
typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXDPROC)(const GLdouble *m);
typedef void (APIENTRYP PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (APIENTRYP PFNGLUNIFORM3UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVPROC)(GLuint index, const GLuint *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVPROC)(GLuint index, const GLbyte *v);
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);
typedef void (APIENTRYP PFNGLVERTEXATTRIB1DPROC)(GLuint index, GLdouble x);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLGENTRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint *ids);
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVPROC)(GLuint index, GLenum pname, GLuint *params);
typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
typedef void (APIENTRYP PFNGLPROGRAMBINARYPROC)(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVPROC)(GLuint index, const GLbyte *v);
typedef void (APIENTRYP PFNGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat *params);
typedef void (APIENTRYP PFNGLTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, const GLint *params);
typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKPROC)();
typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVPROC)(GLuint index, const GLushort *v);
typedef void (APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVPROC)(GLuint index, const GLint *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORPROC)(GLuint index, GLuint divisor);
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IVPROC)(const GLint *v);
typedef GLuint (APIENTRYP PFNGLGENLISTSPROC)(GLsizei range);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
typedef void (APIENTRYP PFNGLENDLISTPROC)();
typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVPROC)(GLuint index, const GLint *v);
typedef void (APIENTRYP PFNGLGETSHADERPRECISIONFORMATPROC)(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
typedef void (APIENTRYP PFNGLINDEXMASKPROC)(GLuint mask);
typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
typedef void (APIENTRYP PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
typedef void (APIENTRYP PFNGLCOLOR3FVPROC)(const GLfloat *v);
typedef void (APIENTRYP PFNGLTEXCOORDP2UIVPROC)(GLenum type, const GLuint *coords);
typedef void (APIENTRYP PFNGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);
typedef void (APIENTRYP PFNGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);
typedef void (APIENTRYP PFNGLMAPGRID2FPROC)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
typedef void (APIENTRYP PFNGLROTATEDPROC)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
typedef void (APIENTRYP PFNGLBUFFERDATAPROC)(GLenum target, GLsizeiptr size, const void *data, GLenum usage);
typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVPROC)(GLuint index, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLROTATEFPROC)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
typedef void (APIENTRYP PFNGLTEXCOORDP1UIPROC)(GLenum type, GLuint coords);
typedef void (APIENTRYP PFNGLMULTITEXCOORD2FVPROC)(GLenum target, const GLfloat *v);
typedef void (APIENTRYP PFNGLMULTITEXCOORD3IPROC)(GLenum target, GLint s, GLint t, GLint r);
typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IPROC)(GLuint index, GLint x);
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVPROC)(GLenum target, GLenum pname, void **params);
typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (APIENTRYP PFNGLWINDOWPOS3DVPROC)(const GLdouble *v);
typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, const GLfloat *param);
typedef void (APIENTRYP PFNGLGETMATERIALIVPROC)(GLenum face, GLenum pname, GLint *params);
typedef void (APIENTRYP PFNGLUNIFORM1FVPROC)(GLint location, GLsizei count, const GLfloat *value);
typedef void (APIENTRYP PFNGLSCISSORINDEXEDVPROC)(GLuint index, const GLint *v);
typedef void (APIENTRYP PFNGLVERTEX4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (APIENTRYP PFNGLNORMAL3SPROC)(GLshort nx, GLshort ny, GLshort nz);
typedef void (APIENTRYP PFNGLNORMAL3IPROC)(GLint nx, GLint ny, GLint nz);
typedef void (APIENTRYP PFNGLMULTITEXCOORD3DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void (APIENTRYP PFNGLNORMAL3FPROC)(GLfloat nx, GLfloat ny, GLfloat nz);
typedef void (APIENTRYP PFNGLNORMAL3DPROC)(GLdouble nx, GLdouble ny, GLdouble nz);
typedef void (APIENTRYP PFNGLNORMAL3BPROC)(GLbyte nx, GLbyte ny, GLbyte nz);
typedef void (APIENTRYP PFNGLMULTITEXCOORD4DVPROC)(GLenum target, const GLdouble *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIB2DPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void (APIENTRYP PFNGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVPROC)(GLuint index, const GLdouble *v);
typedef void (APIENTRYP PFNGLMULTITEXCOORD4FVPROC)(GLenum target, const GLfloat *v);
typedef void (APIENTRYP PFNGLVERTEXATTRIB2SPROC)(GLuint index, GLshort x, GLshort y);
typedef void (APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef GLuint (APIENTRYP PFNGLGETUNIFORMBLOCKINDEXPROC)(GLuint program, const GLchar *uniformBlockName);
typedef void (APIENTRYP PFNGLFRONTFACEPROC)(GLenum mode);

GLAPI PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D;
#define glCopyTexImage1D glad_glCopyTexImage1D
GLAPI PFNGLSTENCILMASKSEPARATEPROC glad_glStencilMaskSeparate;
#define glStencilMaskSeparate glad_glStencilMaskSeparate
GLAPI PFNGLINDEXIPROC glad_glIndexi;
#define glIndexi glad_glIndexi
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_glCompressedTexSubImage3D;
#define glCompressedTexSubImage3D glad_glCompressedTexSubImage3D
GLAPI PFNGLEVALCOORD2DPROC glad_glEvalCoord2d;
#define glEvalCoord2d glad_glEvalCoord2d
GLAPI PFNGLEVALCOORD2FPROC glad_glEvalCoord2f;
#define glEvalCoord2f glad_glEvalCoord2f
GLAPI PFNGLINDEXDPROC glad_glIndexd;
#define glIndexd glad_glIndexd
GLAPI PFNGLINDEXFPROC glad_glIndexf;
#define glIndexf glad_glIndexf
GLAPI PFNGLINDEXSPROC glad_glIndexs;
#define glIndexs glad_glIndexs
GLAPI PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glad_glGetSubroutineUniformLocation;
#define glGetSubroutineUniformLocation glad_glGetSubroutineUniformLocation
GLAPI PFNGLSECONDARYCOLOR3FVPROC glad_glSecondaryColor3fv;
#define glSecondaryColor3fv glad_glSecondaryColor3fv
GLAPI PFNGLFOGFVPROC glad_glFogfv;
#define glFogfv glad_glFogfv
GLAPI PFNGLVERTEXP4UIPROC glad_glVertexP4ui;
#define glVertexP4ui glad_glVertexP4ui
GLAPI PFNGLVERTEX4IVPROC glad_glVertex4iv;
#define glVertex4iv glad_glVertex4iv
GLAPI PFNGLVERTEXATTRIBP4UIPROC glad_glVertexAttribP4ui;
#define glVertexAttribP4ui glad_glVertexAttribP4ui
GLAPI PFNGLISBUFFERPROC glad_glIsBuffer;
#define glIsBuffer glad_glIsBuffer
GLAPI PFNGLGETMULTISAMPLEFVPROC glad_glGetMultisamplefv;
#define glGetMultisamplefv glad_glGetMultisamplefv
GLAPI PFNGLMINSAMPLESHADINGPROC glad_glMinSampleShading;
#define glMinSampleShading glad_glMinSampleShading
GLAPI PFNGLPOPATTRIBPROC glad_glPopAttrib;
#define glPopAttrib glad_glPopAttrib
GLAPI PFNGLCOLORMATERIALPROC glad_glColorMaterial;
#define glColorMaterial glad_glColorMaterial
GLAPI PFNGLCOLOR3BPROC glad_glColor3b;
#define glColor3b glad_glColor3b
GLAPI PFNGLCOLOR3FPROC glad_glColor3f;
#define glColor3f glad_glColor3f
GLAPI PFNGLCOLOR3DPROC glad_glColor3d;
#define glColor3d glad_glColor3d
GLAPI PFNGLCOLOR3IPROC glad_glColor3i;
#define glColor3i glad_glColor3i
GLAPI PFNGLVERTEXATTRIB4UBVPROC glad_glVertexAttrib4ubv;
#define glVertexAttrib4ubv glad_glVertexAttrib4ubv
GLAPI PFNGLCOLOR3SPROC glad_glColor3s;
#define glColor3s glad_glColor3s
GLAPI PFNGLMULTITEXCOORD1IVPROC glad_glMultiTexCoord1iv;
#define glMultiTexCoord1iv glad_glMultiTexCoord1iv
GLAPI PFNGLMULTITEXCOORDP2UIPROC glad_glMultiTexCoordP2ui;
#define glMultiTexCoordP2ui glad_glMultiTexCoordP2ui
GLAPI PFNGLVERTEXATTRIBL4DPROC glad_glVertexAttribL4d;
#define glVertexAttribL4d glad_glVertexAttribL4d
GLAPI PFNGLVERTEX2IVPROC glad_glVertex2iv;
#define glVertex2iv glad_glVertex2iv
GLAPI PFNGLUNIFORMMATRIX3DVPROC glad_glUniformMatrix3dv;
#define glUniformMatrix3dv glad_glUniformMatrix3dv
GLAPI PFNGLTEXCOORDP3UIVPROC glad_glTexCoordP3uiv;
#define glTexCoordP3uiv glad_glTexCoordP3uiv
GLAPI PFNGLRESUMETRANSFORMFEEDBACKPROC glad_glResumeTransformFeedback;
#define glResumeTransformFeedback glad_glResumeTransformFeedback
GLAPI PFNGLFOGIPROC glad_glFogi;
#define glFogi glad_glFogi
GLAPI PFNGLVERTEXPOINTERPROC glad_glVertexPointer;
#define glVertexPointer glad_glVertexPointer
GLAPI PFNGLFOGFPROC glad_glFogf;
#define glFogf glad_glFogf
GLAPI PFNGLMULTITEXCOORD1DPROC glad_glMultiTexCoord1d;
#define glMultiTexCoord1d glad_glMultiTexCoord1d
GLAPI PFNGLMULTITEXCOORD1FPROC glad_glMultiTexCoord1f;
#define glMultiTexCoord1f glad_glMultiTexCoord1f
GLAPI PFNGLVERTEXATTRIBI2IPROC glad_glVertexAttribI2i;
#define glVertexAttribI2i glad_glVertexAttribI2i
GLAPI PFNGLMULTITEXCOORD1IPROC glad_glMultiTexCoord1i;
#define glMultiTexCoord1i glad_glMultiTexCoord1i
GLAPI PFNGLMULTITEXCOORD1SPROC glad_glMultiTexCoord1s;
#define glMultiTexCoord1s glad_glMultiTexCoord1s
GLAPI PFNGLSTENCILOPPROC glad_glStencilOp;
#define glStencilOp glad_glStencilOp
GLAPI PFNGLFRAMEBUFFERTEXTURE2DPROC glad_glFramebufferTexture2D;
#define glFramebufferTexture2D glad_glFramebufferTexture2D
GLAPI PFNGLTEXCOORD3SVPROC glad_glTexCoord3sv;
#define glTexCoord3sv glad_glTexCoord3sv
GLAPI PFNGLGENFRAMEBUFFERSPROC glad_glGenFramebuffers;
#define glGenFramebuffers glad_glGenFramebuffers
GLAPI PFNGLGETATTACHEDSHADERSPROC glad_glGetAttachedShaders;
#define glGetAttachedShaders glad_glGetAttachedShaders
GLAPI PFNGLDELETEVERTEXARRAYSPROC glad_glDeleteVertexArrays;
#define glDeleteVertexArrays glad_glDeleteVertexArrays
GLAPI PFNGLVIEWPORTARRAYVPROC glad_glViewportArrayv;
#define glViewportArrayv glad_glViewportArrayv
GLAPI PFNGLMULTITEXCOORD2SPROC glad_glMultiTexCoord2s;
#define glMultiTexCoord2s glad_glMultiTexCoord2s
GLAPI PFNGLCOLOR4FVPROC glad_glColor4fv;
#define glColor4fv glad_glColor4fv
GLAPI PFNGLTEXCOORD2SVPROC glad_glTexCoord2sv;
#define glTexCoord2sv glad_glTexCoord2sv
GLAPI PFNGLUNIFORM2DVPROC glad_glUniform2dv;
#define glUniform2dv glad_glUniform2dv
GLAPI PFNGLGETPIXELMAPUIVPROC glad_glGetPixelMapuiv;
#define glGetPixelMapuiv glad_glGetPixelMapuiv
GLAPI PFNGLGETUNIFORMFVPROC glad_glGetUniformfv;
#define glGetUniformfv glad_glGetUniformfv
GLAPI PFNGLGETUNIFORMUIVPROC glad_glGetUniformuiv;
#define glGetUniformuiv glad_glGetUniformuiv
GLAPI PFNGLFRUSTUMPROC glad_glFrustum;
#define glFrustum glad_glFrustum
GLAPI PFNGLFENCESYNCPROC glad_glFenceSync;
#define glFenceSync glad_glFenceSync
GLAPI PFNGLVERTEXATTRIB3SVPROC glad_glVertexAttrib3sv;
#define glVertexAttrib3sv glad_glVertexAttrib3sv
GLAPI PFNGLVALIDATEPROGRAMPIPELINEPROC glad_glValidateProgramPipeline;
#define glValidateProgramPipeline glad_glValidateProgramPipeline
GLAPI PFNGLGENSAMPLERSPROC glad_glGenSamplers;
#define glGenSamplers glad_glGenSamplers
GLAPI PFNGLTEXCOORD4IVPROC glad_glTexCoord4iv;
#define glTexCoord4iv glad_glTexCoord4iv
GLAPI PFNGLDRAWTRANSFORMFEEDBACKPROC glad_glDrawTransformFeedback;
#define glDrawTransformFeedback glad_glDrawTransformFeedback
GLAPI PFNGLGETTEXPARAMETERIUIVPROC glad_glGetTexParameterIuiv;
#define glGetTexParameterIuiv glad_glGetTexParameterIuiv
GLAPI PFNGLINDEXPOINTERPROC glad_glIndexPointer;
#define glIndexPointer glad_glIndexPointer
GLAPI PFNGLVERTEXATTRIB4NBVPROC glad_glVertexAttrib4Nbv;
#define glVertexAttrib4Nbv glad_glVertexAttrib4Nbv
GLAPI PFNGLISSYNCPROC glad_glIsSync;
#define glIsSync glad_glIsSync
GLAPI PFNGLUNIFORMMATRIX2X3DVPROC glad_glUniformMatrix2x3dv;
#define glUniformMatrix2x3dv glad_glUniformMatrix2x3dv
GLAPI PFNGLSECONDARYCOLOR3SVPROC glad_glSecondaryColor3sv;
#define glSecondaryColor3sv glad_glSecondaryColor3sv
GLAPI PFNGLWINDOWPOS2IVPROC glad_glWindowPos2iv;
#define glWindowPos2iv glad_glWindowPos2iv
GLAPI PFNGLFOGCOORDDPROC glad_glFogCoordd;
#define glFogCoordd glad_glFogCoordd
GLAPI PFNGLPROGRAMUNIFORM1UIPROC glad_glProgramUniform1ui;
#define glProgramUniform1ui glad_glProgramUniform1ui
GLAPI PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D;
#define glCopyTexImage2D glad_glCopyTexImage2D
GLAPI PFNGLUNIFORM4UIVPROC glad_glUniform4uiv;
#define glUniform4uiv glad_glUniform4uiv
GLAPI PFNGLSCISSORARRAYVPROC glad_glScissorArrayv;
#define glScissorArrayv glad_glScissorArrayv
GLAPI PFNGLCALLLISTPROC glad_glCallList;
#define glCallList glad_glCallList
GLAPI PFNGLMAPBUFFERPROC glad_glMapBuffer;
#define glMapBuffer glad_glMapBuffer
GLAPI PFNGLSECONDARYCOLOR3DPROC glad_glSecondaryColor3d;
#define glSecondaryColor3d glad_glSecondaryColor3d
GLAPI PFNGLSECONDARYCOLOR3FPROC glad_glSecondaryColor3f;
#define glSecondaryColor3f glad_glSecondaryColor3f
GLAPI PFNGLDELETESYNCPROC glad_glDeleteSync;
#define glDeleteSync glad_glDeleteSync
GLAPI PFNGLUNIFORM3IVPROC glad_glUniform3iv;
#define glUniform3iv glad_glUniform3iv
GLAPI PFNGLPOLYGONMODEPROC glad_glPolygonMode;
#define glPolygonMode glad_glPolygonMode
GLAPI PFNGLPROGRAMUNIFORM4IVPROC glad_glProgramUniform4iv;
#define glProgramUniform4iv glad_glProgramUniform4iv
GLAPI PFNGLUSEPROGRAMPROC glad_glUseProgram;
#define glUseProgram glad_glUseProgram
GLAPI PFNGLLINESTIPPLEPROC glad_glLineStipple;
#define glLineStipple glad_glLineStipple
GLAPI PFNGLGETPROGRAMINFOLOGPROC glad_glGetProgramInfoLog;
#define glGetProgramInfoLog glad_glGetProgramInfoLog
GLAPI PFNGLPIXELSTOREFPROC glad_glPixelStoref;
#define glPixelStoref glad_glPixelStoref
GLAPI PFNGLSAMPLEMASKIPROC glad_glSampleMaski;
#define glSampleMaski glad_glSampleMaski
GLAPI PFNGLDELETESHADERPROC glad_glDeleteShader;
#define glDeleteShader glad_glDeleteShader
GLAPI PFNGLGETMAPDVPROC glad_glGetMapdv;
#define glGetMapdv glad_glGetMapdv
GLAPI PFNGLUNIFORM2UIPROC glad_glUniform2ui;
#define glUniform2ui glad_glUniform2ui
GLAPI PFNGLVERTEXATTRIBI3IPROC glad_glVertexAttribI3i;
#define glVertexAttribI3i glad_glVertexAttribI3i
GLAPI PFNGLVERTEXATTRIBI4USVPROC glad_glVertexAttribI4usv;
#define glVertexAttribI4usv glad_glVertexAttribI4usv
GLAPI PFNGLTEXPARAMETERFPROC glad_glTexParameterf;
#define glTexParameterf glad_glTexParameterf
GLAPI PFNGLTEXPARAMETERIPROC glad_glTexParameteri;
#define glTexParameteri glad_glTexParameteri
GLAPI PFNGLGETSHADERSOURCEPROC glad_glGetShaderSource;
#define glGetShaderSource glad_glGetShaderSource
GLAPI PFNGLCOLOR4UBPROC glad_glColor4ub;
#define glColor4ub glad_glColor4ub
GLAPI PFNGLCOLOR4UIPROC glad_glColor4ui;
#define glColor4ui glad_glColor4ui
GLAPI PFNGLPROGRAMUNIFORM2UIPROC glad_glProgramUniform2ui;
#define glProgramUniform2ui glad_glProgramUniform2ui
GLAPI PFNGLCOLOR4USPROC glad_glColor4us;
#define glColor4us glad_glColor4us
GLAPI PFNGLVERTEXATTRIBP1UIVPROC glad_glVertexAttribP1uiv;
#define glVertexAttribP1uiv glad_glVertexAttribP1uiv
GLAPI PFNGLLINKPROGRAMPROC glad_glLinkProgram;
#define glLinkProgram glad_glLinkProgram
GLAPI PFNGLTEXCOORD2DVPROC glad_glTexCoord2dv;
#define glTexCoord2dv glad_glTexCoord2dv
GLAPI PFNGLGETSTRINGPROC glad_glGetString;
#define glGetString glad_glGetString
GLAPI PFNGLENDQUERYPROC glad_glEndQuery;
#define glEndQuery glad_glEndQuery
GLAPI PFNGLSECONDARYCOLOR3UIVPROC glad_glSecondaryColor3uiv;
#define glSecondaryColor3uiv glad_glSecondaryColor3uiv
GLAPI PFNGLEDGEFLAGPOINTERPROC glad_glEdgeFlagPointer;
#define glEdgeFlagPointer glad_glEdgeFlagPointer
GLAPI PFNGLCOPYPIXELSPROC glad_glCopyPixels;
#define glCopyPixels glad_glCopyPixels
GLAPI PFNGLVERTEXATTRIBI2UIPROC glad_glVertexAttribI2ui;
#define glVertexAttribI2ui glad_glVertexAttribI2ui
GLAPI PFNGLRASTERPOS3SPROC glad_glRasterPos3s;
#define glRasterPos3s glad_glRasterPos3s
GLAPI PFNGLDELETETEXTURESPROC glad_glDeleteTextures;
#define glDeleteTextures glad_glDeleteTextures
GLAPI PFNGLVERTEXATTRIB4FPROC glad_glVertexAttrib4f;
#define glVertexAttrib4f glad_glVertexAttrib4f
GLAPI PFNGLVERTEXATTRIB4DPROC glad_glVertexAttrib4d;
#define glVertexAttrib4d glad_glVertexAttrib4d
GLAPI PFNGLVERTEXATTRIB4SPROC glad_glVertexAttrib4s;
#define glVertexAttrib4s glad_glVertexAttrib4s
GLAPI PFNGLSAMPLERPARAMETERIPROC glad_glSamplerParameteri;
#define glSamplerParameteri glad_glSamplerParameteri
GLAPI PFNGLSAMPLERPARAMETERFPROC glad_glSamplerParameterf;
#define glSamplerParameterf glad_glSamplerParameterf
GLAPI PFNGLUNIFORM1FPROC glad_glUniform1f;
#define glUniform1f glad_glUniform1f
GLAPI PFNGLUNIFORM1DPROC glad_glUniform1d;
#define glUniform1d glad_glUniform1d
GLAPI PFNGLRENDERMODEPROC glad_glRenderMode;
#define glRenderMode glad_glRenderMode
GLAPI PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_glGetCompressedTexImage;
#define glGetCompressedTexImage glad_glGetCompressedTexImage
GLAPI PFNGLUNIFORM1IPROC glad_glUniform1i;
#define glUniform1i glad_glUniform1i
GLAPI PFNGLGETTEXENVFVPROC glad_glGetTexEnvfv;
#define glGetTexEnvfv glad_glGetTexEnvfv
GLAPI PFNGLCULLFACEPROC glad_glCullFace;
#define glCullFace glad_glCullFace
GLAPI PFNGLPROGRAMUNIFORM4IPROC glad_glProgramUniform4i;
#define glProgramUniform4i glad_glProgramUniform4i
GLAPI PFNGLPROGRAMUNIFORM4FPROC glad_glProgramUniform4f;
#define glProgramUniform4f glad_glProgramUniform4f
GLAPI PFNGLVIEWPORTINDEXEDFPROC glad_glViewportIndexedf;
#define glViewportIndexedf glad_glViewportIndexedf
GLAPI PFNGLPROGRAMUNIFORM4DPROC glad_glProgramUniform4d;
#define glProgramUniform4d glad_glProgramUniform4d
GLAPI PFNGLGETSTRINGIPROC glad_glGetStringi;
#define glGetStringi glad_glGetStringi
GLAPI PFNGLATTACHSHADERPROC glad_glAttachShader;
#define glAttachShader glad_glAttachShader
GLAPI PFNGLQUERYCOUNTERPROC glad_glQueryCounter;
#define glQueryCounter glad_glQueryCounter
GLAPI PFNGLFOGCOORDPOINTERPROC glad_glFogCoordPointer;
#define glFogCoordPointer glad_glFogCoordPointer
GLAPI PFNGLSECONDARYCOLOR3DVPROC glad_glSecondaryColor3dv;
#define glSecondaryColor3dv glad_glSecondaryColor3dv
GLAPI PFNGLVERTEXATTRIBI4SVPROC glad_glVertexAttribI4sv;
#define glVertexAttribI4sv glad_glVertexAttribI4sv
GLAPI PFNGLGETBUFFERPARAMETERIVPROC glad_glGetBufferParameteriv;
#define glGetBufferParameteriv glad_glGetBufferParameteriv
GLAPI PFNGLTEXPARAMETERIUIVPROC glad_glTexParameterIuiv;
#define glTexParameterIuiv glad_glTexParameterIuiv
GLAPI PFNGLWINDOWPOS3FVPROC glad_glWindowPos3fv;
#define glWindowPos3fv glad_glWindowPos3fv
GLAPI PFNGLLIGHTMODELFVPROC glad_glLightModelfv;
#define glLightModelfv glad_glLightModelfv
GLAPI PFNGLPOINTPARAMETERFVPROC glad_glPointParameterfv;
#define glPointParameterfv glad_glPointParameterfv
GLAPI PFNGLVERTEX4SPROC glad_glVertex4s;
#define glVertex4s glad_glVertex4s
GLAPI PFNGLISTRANSFORMFEEDBACKPROC glad_glIsTransformFeedback;
#define glIsTransformFeedback glad_glIsTransformFeedback
GLAPI PFNGLVERTEX4DPROC glad_glVertex4d;
#define glVertex4d glad_glVertex4d
GLAPI PFNGLISPROGRAMPIPELINEPROC glad_glIsProgramPipeline;
#define glIsProgramPipeline glad_glIsProgramPipeline
GLAPI PFNGLVERTEX4IPROC glad_glVertex4i;
#define glVertex4i glad_glVertex4i
GLAPI PFNGLUNIFORMMATRIX3FVPROC glad_glUniformMatrix3fv;
#define glUniformMatrix3fv glad_glUniformMatrix3fv
GLAPI PFNGLVERTEXATTRIBL2DVPROC glad_glVertexAttribL2dv;
#define glVertexAttribL2dv glad_glVertexAttribL2dv
GLAPI PFNGLSECONDARYCOLORPOINTERPROC glad_glSecondaryColorPointer;
#define glSecondaryColorPointer glad_glSecondaryColorPointer
GLAPI PFNGLALPHAFUNCPROC glad_glAlphaFunc;
#define glAlphaFunc glad_glAlphaFunc
GLAPI PFNGLVERTEXATTRIBL2DPROC glad_glVertexAttribL2d;
#define glVertexAttribL2d glad_glVertexAttribL2d
GLAPI PFNGLSTENCILFUNCPROC glad_glStencilFunc;
#define glStencilFunc glad_glStencilFunc
GLAPI PFNGLTEXCOORD3DVPROC glad_glTexCoord3dv;
#define glTexCoord3dv glad_glTexCoord3dv
GLAPI PFNGLGETPROGRAMPIPELINEIVPROC glad_glGetProgramPipelineiv;
#define glGetProgramPipelineiv glad_glGetProgramPipelineiv
GLAPI PFNGLGETSHADERINFOLOGPROC glad_glGetShaderInfoLog;
#define glGetShaderInfoLog glad_glGetShaderInfoLog
GLAPI PFNGLVERTEXATTRIBI4IPROC glad_glVertexAttribI4i;
#define glVertexAttribI4i glad_glVertexAttribI4i
GLAPI PFNGLRASTERPOS2IVPROC glad_glRasterPos2iv;
#define glRasterPos2iv glad_glRasterPos2iv
GLAPI PFNGLBLENDEQUATIONSEPARATEPROC glad_glBlendEquationSeparate;
#define glBlendEquationSeparate glad_glBlendEquationSeparate
GLAPI PFNGLGETSUBROUTINEINDEXPROC glad_glGetSubroutineIndex;
#define glGetSubroutineIndex glad_glGetSubroutineIndex
GLAPI PFNGLVERTEXATTRIB2SVPROC glad_glVertexAttrib2sv;
#define glVertexAttrib2sv glad_glVertexAttrib2sv
GLAPI PFNGLPUSHATTRIBPROC glad_glPushAttrib;
#define glPushAttrib glad_glPushAttrib
GLAPI PFNGLLIGHTIVPROC glad_glLightiv;
#define glLightiv glad_glLightiv
GLAPI PFNGLDELETEBUFFERSPROC glad_glDeleteBuffers;
#define glDeleteBuffers glad_glDeleteBuffers
GLAPI PFNGLBINDPROGRAMPIPELINEPROC glad_glBindProgramPipeline;
#define glBindProgramPipeline glad_glBindProgramPipeline
GLAPI PFNGLSCISSORPROC glad_glScissor;
#define glScissor glad_glScissor
GLAPI PFNGLGETBOOLEANVPROC glad_glGetBooleanv;
#define glGetBooleanv glad_glGetBooleanv
GLAPI PFNGLMATERIALFVPROC glad_glMaterialfv;
#define glMaterialfv glad_glMaterialfv
GLAPI PFNGLVERTEXATTRIBI2UIVPROC glad_glVertexAttribI2uiv;
#define glVertexAttribI2uiv glad_glVertexAttribI2uiv
GLAPI PFNGLCOLOR4DVPROC glad_glColor4dv;
#define glColor4dv glad_glColor4dv
GLAPI PFNGLUNIFORM2FVPROC glad_glUniform2fv;
#define glUniform2fv glad_glUniform2fv
GLAPI PFNGLBINDBUFFERRANGEPROC glad_glBindBufferRange;
#define glBindBufferRange glad_glBindBufferRange
GLAPI PFNGLNORMAL3IVPROC glad_glNormal3iv;
#define glNormal3iv glad_glNormal3iv
GLAPI PFNGLVERTEXATTRIBL3DVPROC glad_glVertexAttribL3dv;
#define glVertexAttribL3dv glad_glVertexAttribL3dv
GLAPI PFNGLGETUNIFORMDVPROC glad_glGetUniformdv;
#define glGetUniformdv glad_glGetUniformdv
GLAPI PFNGLCOLOR3USPROC glad_glColor3us;
#define glColor3us glad_glColor3us
GLAPI PFNGLMULTITEXCOORD4SPROC glad_glMultiTexCoord4s;
#define glMultiTexCoord4s glad_glMultiTexCoord4s
GLAPI PFNGLTEXCOORD1IVPROC glad_glTexCoord1iv;
#define glTexCoord1iv glad_glTexCoord1iv
GLAPI PFNGLCOLOR3UIVPROC glad_glColor3uiv;
#define glColor3uiv glad_glColor3uiv
GLAPI PFNGLLISTBASEPROC glad_glListBase;
#define glListBase glad_glListBase
GLAPI PFNGLCLIENTWAITSYNCPROC glad_glClientWaitSync;
#define glClientWaitSync glad_glClientWaitSync
GLAPI PFNGLVERTEXATTRIB4NSVPROC glad_glVertexAttrib4Nsv;
#define glVertexAttrib4Nsv glad_glVertexAttrib4Nsv
GLAPI PFNGLGETUNIFORMSUBROUTINEUIVPROC glad_glGetUniformSubroutineuiv;
#define glGetUniformSubroutineuiv glad_glGetUniformSubroutineuiv
GLAPI PFNGLGETBOOLEANI_VPROC glad_glGetBooleani_v;
#define glGetBooleani_v glad_glGetBooleani_v
GLAPI PFNGLISSAMPLERPROC glad_glIsSampler;
#define glIsSampler glad_glIsSampler
GLAPI PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D;
#define glCopyTexSubImage1D glad_glCopyTexSubImage1D
GLAPI PFNGLTEXCOORD1IPROC glad_glTexCoord1i;
#define glTexCoord1i glad_glTexCoord1i
GLAPI PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_glCheckFramebufferStatus;
#define glCheckFramebufferStatus glad_glCheckFramebufferStatus
GLAPI PFNGLTEXCOORD1DPROC glad_glTexCoord1d;
#define glTexCoord1d glad_glTexCoord1d
GLAPI PFNGLTEXCOORD1FPROC glad_glTexCoord1f;
#define glTexCoord1f glad_glTexCoord1f
GLAPI PFNGLVERTEXP3UIVPROC glad_glVertexP3uiv;
#define glVertexP3uiv glad_glVertexP3uiv
GLAPI PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_glTransformFeedbackVaryings;
#define glTransformFeedbackVaryings glad_glTransformFeedbackVaryings
GLAPI PFNGLDRAWRANGEELEMENTSPROC glad_glDrawRangeElements;
#define glDrawRangeElements glad_glDrawRangeElements
GLAPI PFNGLTEXCOORD1SPROC glad_glTexCoord1s;
#define glTexCoord1s glad_glTexCoord1s
GLAPI PFNGLBINDBUFFERBASEPROC glad_glBindBufferBase;
#define glBindBufferBase glad_glBindBufferBase
GLAPI PFNGLCOLOR3BVPROC glad_glColor3bv;
#define glColor3bv glad_glColor3bv
GLAPI PFNGLMULTIDRAWARRAYSPROC glad_glMultiDrawArrays;
#define glMultiDrawArrays glad_glMultiDrawArrays
GLAPI PFNGLVERTEXATTRIBL1DPROC glad_glVertexAttribL1d;
#define glVertexAttribL1d glad_glVertexAttribL1d
GLAPI PFNGLVERTEXATTRIBI3UIVPROC glad_glVertexAttribI3uiv;
#define glVertexAttribI3uiv glad_glVertexAttribI3uiv
GLAPI PFNGLCLEARACCUMPROC glad_glClearAccum;
#define glClearAccum glad_glClearAccum
GLAPI PFNGLBEGINQUERYPROC glad_glBeginQuery;
#define glBeginQuery glad_glBeginQuery
GLAPI PFNGLBINDBUFFERPROC glad_glBindBuffer;
#define glBindBuffer glad_glBindBuffer
GLAPI PFNGLMAP2DPROC glad_glMap2d;
#define glMap2d glad_glMap2d
GLAPI PFNGLMAP2FPROC glad_glMap2f;
#define glMap2f glad_glMap2f
GLAPI PFNGLUNIFORMMATRIX2X4FVPROC glad_glUniformMatrix2x4fv;
#define glUniformMatrix2x4fv glad_glUniformMatrix2x4fv
GLAPI PFNGLDEPTHRANGEINDEXEDPROC glad_glDepthRangeIndexed;
#define glDepthRangeIndexed glad_glDepthRangeIndexed
GLAPI PFNGLISENABLEDPROC glad_glIsEnabled;
#define glIsEnabled glad_glIsEnabled
GLAPI PFNGLGETERRORPROC glad_glGetError;
#define glGetError glad_glGetError
GLAPI PFNGLGETTEXENVIVPROC glad_glGetTexEnviv;
#define glGetTexEnviv glad_glGetTexEnviv
GLAPI PFNGLEVALCOORD1DPROC glad_glEvalCoord1d;
#define glEvalCoord1d glad_glEvalCoord1d
GLAPI PFNGLGETTEXLEVELPARAMETERFVPROC glad_glGetTexLevelParameterfv;
#define glGetTexLevelParameterfv glad_glGetTexLevelParameterfv
GLAPI PFNGLEVALCOORD1FPROC glad_glEvalCoord1f;
#define glEvalCoord1f glad_glEvalCoord1f
GLAPI PFNGLPIXELMAPFVPROC glad_glPixelMapfv;
#define glPixelMapfv glad_glPixelMapfv
GLAPI PFNGLGETPIXELMAPUSVPROC glad_glGetPixelMapusv;
#define glGetPixelMapusv glad_glGetPixelMapusv
GLAPI PFNGLACCUMPROC glad_glAccum;
#define glAccum glad_glAccum
GLAPI PFNGLTEXCOORD2IVPROC glad_glTexCoord2iv;
#define glTexCoord2iv glad_glTexCoord2iv
GLAPI PFNGLPROGRAMUNIFORM4UIPROC glad_glProgramUniform4ui;
#define glProgramUniform4ui glad_glProgramUniform4ui
GLAPI PFNGLSTENCILMASKPROC glad_glStencilMask;
#define glStencilMask glad_glStencilMask
GLAPI PFNGLRECTSVPROC glad_glRectsv;
#define glRectsv glad_glRectsv
GLAPI PFNGLGETTEXGENIVPROC glad_glGetTexGeniv;
#define glGetTexGeniv glad_glGetTexGeniv
GLAPI PFNGLPIXELSTOREIPROC glad_glPixelStorei;
#define glPixelStorei glad_glPixelStorei
GLAPI PFNGLDEPTHMASKPROC glad_glDepthMask;
#define glDepthMask glad_glDepthMask
GLAPI PFNGLPATCHPARAMETERFVPROC glad_glPatchParameterfv;
#define glPatchParameterfv glad_glPatchParameterfv
GLAPI PFNGLVERTEXATTRIBI3UIPROC glad_glVertexAttribI3ui;
#define glVertexAttribI3ui glad_glVertexAttribI3ui
GLAPI PFNGLPROGRAMPARAMETERIPROC glad_glProgramParameteri;
#define glProgramParameteri glad_glProgramParameteri
GLAPI PFNGLGETMAPFVPROC glad_glGetMapfv;
#define glGetMapfv glad_glGetMapfv
GLAPI PFNGLRASTERPOS2FVPROC glad_glRasterPos2fv;
#define glRasterPos2fv glad_glRasterPos2fv
GLAPI PFNGLRECTDPROC glad_glRectd;
#define glRectd glad_glRectd
GLAPI PFNGLWINDOWPOS2SVPROC glad_glWindowPos2sv;
#define glWindowPos2sv glad_glWindowPos2sv
GLAPI PFNGLCREATESHADERPROC glad_glCreateShader;
#define glCreateShader glad_glCreateShader
GLAPI PFNGLGENRENDERBUFFERSPROC glad_glGenRenderbuffers;
#define glGenRenderbuffers glad_glGenRenderbuffers
GLAPI PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D;
#define glCopyTexSubImage2D glad_glCopyTexSubImage2D
GLAPI PFNGLBLENDFUNCSEPARATEPROC glad_glBlendFuncSeparate;
#define glBlendFuncSeparate glad_glBlendFuncSeparate
GLAPI PFNGLTEXCOORD2FVPROC glad_glTexCoord2fv;
#define glTexCoord2fv glad_glTexCoord2fv
GLAPI PFNGLRECTSPROC glad_glRects;
#define glRects glad_glRects
GLAPI PFNGLTEXCOORD4FVPROC glad_glTexCoord4fv;
#define glTexCoord4fv glad_glTexCoord4fv
GLAPI PFNGLPOINTSIZEPROC glad_glPointSize;
#define glPointSize glad_glPointSize
GLAPI PFNGLGETPROGRAMPIPELINEINFOLOGPROC glad_glGetProgramPipelineInfoLog;
#define glGetProgramPipelineInfoLog glad_glGetProgramPipelineInfoLog
GLAPI PFNGLVERTEXATTRIB4NUIVPROC glad_glVertexAttrib4Nuiv;
#define glVertexAttrib4Nuiv glad_glVertexAttrib4Nuiv
GLAPI PFNGLRENDERBUFFERSTORAGEPROC glad_glRenderbufferStorage;
#define glRenderbufferStorage glad_glRenderbufferStorage
GLAPI PFNGLWAITSYNCPROC glad_glWaitSync;
#define glWaitSync glad_glWaitSync
GLAPI PFNGLUNIFORM3IPROC glad_glUniform3i;
#define glUniform3i glad_glUniform3i
GLAPI PFNGLBLENDEQUATIONSEPARATEIPROC glad_glBlendEquationSeparatei;
#define glBlendEquationSeparatei glad_glBlendEquationSeparatei
GLAPI PFNGLUNIFORM3DPROC glad_glUniform3d;
#define glUniform3d glad_glUniform3d
GLAPI PFNGLUNIFORM3FPROC glad_glUniform3f;
#define glUniform3f glad_glUniform3f
GLAPI PFNGLGETFRAGDATAINDEXPROC glad_glGetFragDataIndex;
#define glGetFragDataIndex glad_glGetFragDataIndex
GLAPI PFNGLCOLOR3SVPROC glad_glColor3sv;
#define glColor3sv glad_glColor3sv
GLAPI PFNGLVERTEX4SVPROC glad_glVertex4sv;
#define glVertex4sv glad_glVertex4sv
GLAPI PFNGLDELETEFRAMEBUFFERSPROC glad_glDeleteFramebuffers;
#define glDeleteFramebuffers glad_glDeleteFramebuffers
GLAPI PFNGLDRAWARRAYSPROC glad_glDrawArrays;
#define glDrawArrays glad_glDrawArrays
GLAPI PFNGLCLEARPROC glad_glClear;
#define glClear glad_glClear
GLAPI PFNGLVERTEXATTRIBP2UIPROC glad_glVertexAttribP2ui;
#define glVertexAttribP2ui glad_glVertexAttribP2ui
GLAPI PFNGLTRANSLATEFPROC glad_glTranslatef;
#define glTranslatef glad_glTranslatef
GLAPI PFNGLVERTEXATTRIB4NUBPROC glad_glVertexAttrib4Nub;
#define glVertexAttrib4Nub glad_glVertexAttrib4Nub
GLAPI PFNGLTRANSLATEDPROC glad_glTranslated;
#define glTranslated glad_glTranslated
GLAPI PFNGLSAMPLERPARAMETERIIVPROC glad_glSamplerParameterIiv;
#define glSamplerParameterIiv glad_glSamplerParameterIiv
GLAPI PFNGLTEXIMAGE1DPROC glad_glTexImage1D;
#define glTexImage1D glad_glTexImage1D
GLAPI PFNGLSECONDARYCOLOR3BVPROC glad_glSecondaryColor3bv;
#define glSecondaryColor3bv glad_glSecondaryColor3bv
GLAPI PFNGLGETQUERYOBJECTI64VPROC glad_glGetQueryObjecti64v;
#define glGetQueryObjecti64v glad_glGetQueryObjecti64v
GLAPI PFNGLISRENDERBUFFERPROC glad_glIsRenderbuffer;
#define glIsRenderbuffer glad_glIsRenderbuffer
GLAPI PFNGLVERTEX3IVPROC glad_glVertex3iv;
#define glVertex3iv glad_glVertex3iv
GLAPI PFNGLTEXGENFVPROC glad_glTexGenfv;
#define glTexGenfv glad_glTexGenfv
GLAPI PFNGLMATERIALIPROC glad_glMateriali;
#define glMateriali glad_glMateriali
GLAPI PFNGLISVERTEXARRAYPROC glad_glIsVertexArray;
#define glIsVertexArray glad_glIsVertexArray
GLAPI PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_glDisableVertexAttribArray;
#define glDisableVertexAttribArray glad_glDisableVertexAttribArray
GLAPI PFNGLVERTEX3DVPROC glad_glVertex3dv;
#define glVertex3dv glad_glVertex3dv
GLAPI PFNGLMATERIALFPROC glad_glMaterialf;
#define glMaterialf glad_glMaterialf
GLAPI PFNGLVERTEXATTRIBI4UBVPROC glad_glVertexAttribI4ubv;
#define glVertexAttribI4ubv glad_glVertexAttribI4ubv
GLAPI PFNGLPOLYGONOFFSETPROC glad_glPolygonOffset;
#define glPolygonOffset glad_glPolygonOffset
GLAPI PFNGLGETVERTEXATTRIBIIVPROC glad_glGetVertexAttribIiv;
#define glGetVertexAttribIiv glad_glGetVertexAttribIiv
GLAPI PFNGLPATCHPARAMETERIPROC glad_glPatchParameteri;
#define glPatchParameteri glad_glPatchParameteri
GLAPI PFNGLMAP1DPROC glad_glMap1d;
#define glMap1d glad_glMap1d
GLAPI PFNGLMAP1FPROC glad_glMap1f;
#define glMap1f glad_glMap1f
GLAPI PFNGLRASTERPOS3SVPROC glad_glRasterPos3sv;
#define glRasterPos3sv glad_glRasterPos3sv
GLAPI PFNGLLIGHTIPROC glad_glLighti;
#define glLighti glad_glLighti
GLAPI PFNGLLIGHTFPROC glad_glLightf;
#define glLightf glad_glLightf
GLAPI PFNGLSTENCILFUNCSEPARATEPROC glad_glStencilFuncSeparate;
#define glStencilFuncSeparate glad_glStencilFuncSeparate
GLAPI PFNGLMAPGRID2DPROC glad_glMapGrid2d;
#define glMapGrid2d glad_glMapGrid2d
GLAPI PFNGLUNIFORM2DPROC glad_glUniform2d;
#define glUniform2d glad_glUniform2d
GLAPI PFNGLVERTEXATTRIBP3UIPROC glad_glVertexAttribP3ui;
#define glVertexAttribP3ui glad_glVertexAttribP3ui
GLAPI PFNGLPROGRAMUNIFORM2FVPROC glad_glProgramUniform2fv;
#define glProgramUniform2fv glad_glProgramUniform2fv
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glad_glProgramUniformMatrix2x4dv;
#define glProgramUniformMatrix2x4dv glad_glProgramUniformMatrix2x4dv
GLAPI PFNGLTEXENVFPROC glad_glTexEnvf;
#define glTexEnvf glad_glTexEnvf
GLAPI PFNGLGETINTEGER64I_VPROC glad_glGetInteger64i_v;
#define glGetInteger64i_v glad_glGetInteger64i_v
GLAPI PFNGLTEXENVIPROC glad_glTexEnvi;
#define glTexEnvi glad_glTexEnvi
GLAPI PFNGLBLITFRAMEBUFFERPROC glad_glBlitFramebuffer;
#define glBlitFramebuffer glad_glBlitFramebuffer
GLAPI PFNGLISENABLEDIPROC glad_glIsEnabledi;
#define glIsEnabledi glad_glIsEnabledi
GLAPI PFNGLGETPOINTERVPROC glad_glGetPointerv;
#define glGetPointerv glad_glGetPointerv
GLAPI PFNGLGETMAPIVPROC glad_glGetMapiv;
#define glGetMapiv glad_glGetMapiv
GLAPI PFNGLMULTITEXCOORD4SVPROC glad_glMultiTexCoord4sv;
#define glMultiTexCoord4sv glad_glMultiTexCoord4sv
GLAPI PFNGLPROGRAMUNIFORMMATRIX3FVPROC glad_glProgramUniformMatrix3fv;
#define glProgramUniformMatrix3fv glad_glProgramUniformMatrix3fv
GLAPI PFNGLBINDFRAGDATALOCATIONPROC glad_glBindFragDataLocation;
#define glBindFragDataLocation glad_glBindFragDataLocation
GLAPI PFNGLSECONDARYCOLOR3UBVPROC glad_glSecondaryColor3ubv;
#define glSecondaryColor3ubv glad_glSecondaryColor3ubv
GLAPI PFNGLMULTITEXCOORD3IVPROC glad_glMultiTexCoord3iv;
#define glMultiTexCoord3iv glad_glMultiTexCoord3iv
GLAPI PFNGLLIGHTMODELFPROC glad_glLightModelf;
#define glLightModelf glad_glLightModelf
GLAPI PFNGLLIGHTMODELIPROC glad_glLightModeli;
#define glLightModeli glad_glLightModeli
GLAPI PFNGLWINDOWPOS3IVPROC glad_glWindowPos3iv;
#define glWindowPos3iv glad_glWindowPos3iv
GLAPI PFNGLMULTITEXCOORDP1UIVPROC glad_glMultiTexCoordP1uiv;
#define glMultiTexCoordP1uiv glad_glMultiTexCoordP1uiv
GLAPI PFNGLCALLLISTSPROC glad_glCallLists;
#define glCallLists glad_glCallLists
GLAPI PFNGLTEXCOORD3IPROC glad_glTexCoord3i;
#define glTexCoord3i glad_glTexCoord3i
GLAPI PFNGLTEXCOORD3FPROC glad_glTexCoord3f;
#define glTexCoord3f glad_glTexCoord3f
GLAPI PFNGLCOPYTEXSUBIMAGE3DPROC glad_glCopyTexSubImage3D;
#define glCopyTexSubImage3D glad_glCopyTexSubImage3D
GLAPI PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_glGetActiveUniformBlockName;
#define glGetActiveUniformBlockName glad_glGetActiveUniformBlockName
GLAPI PFNGLTEXCOORD3SPROC glad_glTexCoord3s;
#define glTexCoord3s glad_glTexCoord3s
GLAPI PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_glGetActiveUniformBlockiv;
#define glGetActiveUniformBlockiv glad_glGetActiveUniformBlockiv
GLAPI PFNGLARETEXTURESRESIDENTPROC glad_glAreTexturesResident;
#define glAreTexturesResident glad_glAreTexturesResident
GLAPI PFNGLRASTERPOS4SVPROC glad_glRasterPos4sv;
#define glRasterPos4sv glad_glRasterPos4sv
GLAPI PFNGLCOLOR4SPROC glad_glColor4s;
#define glColor4s glad_glColor4s
GLAPI PFNGLBINDVERTEXARRAYPROC glad_glBindVertexArray;
#define glBindVertexArray glad_glBindVertexArray
GLAPI PFNGLCOLOR4BPROC glad_glColor4b;
#define glColor4b glad_glColor4b
GLAPI PFNGLCOLOR4FPROC glad_glColor4f;
#define glColor4f glad_glColor4f
GLAPI PFNGLCOLOR4DPROC glad_glColor4d;
#define glColor4d glad_glColor4d
GLAPI PFNGLCOLOR4IPROC glad_glColor4i;
#define glColor4i glad_glColor4i
GLAPI PFNGLDRAWELEMENTSINSTANCEDPROC glad_glDrawElementsInstanced;
#define glDrawElementsInstanced glad_glDrawElementsInstanced
GLAPI PFNGLVERTEX2DVPROC glad_glVertex2dv;
#define glVertex2dv glad_glVertex2dv
GLAPI PFNGLUNIFORMMATRIX2X4DVPROC glad_glUniformMatrix2x4dv;
#define glUniformMatrix2x4dv glad_glUniformMatrix2x4dv
GLAPI PFNGLVIEWPORTPROC glad_glViewport;
#define glViewport glad_glViewport
GLAPI PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glad_glGetActiveSubroutineUniformiv;
#define glGetActiveSubroutineUniformiv glad_glGetActiveSubroutineUniformiv
GLAPI PFNGLTEXBUFFERPROC glad_glTexBuffer;
#define glTexBuffer glad_glTexBuffer
GLAPI PFNGLARRAYELEMENTPROC glad_glArrayElement;
#define glArrayElement glad_glArrayElement
GLAPI PFNGLVALIDATEPROGRAMPROC glad_glValidateProgram;
#define glValidateProgram glad_glValidateProgram
GLAPI PFNGLACTIVESHADERPROGRAMPROC glad_glActiveShaderProgram;
#define glActiveShaderProgram glad_glActiveShaderProgram
GLAPI PFNGLEVALCOORD1DVPROC glad_glEvalCoord1dv;
#define glEvalCoord1dv glad_glEvalCoord1dv
GLAPI PFNGLMULTITEXCOORDP2UIVPROC glad_glMultiTexCoordP2uiv;
#define glMultiTexCoordP2uiv glad_glMultiTexCoordP2uiv
GLAPI PFNGLRECTIPROC glad_glRecti;
#define glRecti glad_glRecti
GLAPI PFNGLRECTFPROC glad_glRectf;
#define glRectf glad_glRectf
GLAPI PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_glGetRenderbufferParameteriv;
#define glGetRenderbufferParameteriv glad_glGetRenderbufferParameteriv
GLAPI PFNGLTEXSUBIMAGE1DPROC glad_glTexSubImage1D;
#define glTexSubImage1D glad_glTexSubImage1D
GLAPI PFNGLBINDTEXTUREPROC glad_glBindTexture;
#define glBindTexture glad_glBindTexture
GLAPI PFNGLDETACHSHADERPROC glad_glDetachShader;
#define glDetachShader glad_glDetachShader
GLAPI PFNGLUNIFORMMATRIX3X4DVPROC glad_glUniformMatrix3x4dv;
#define glUniformMatrix3x4dv glad_glUniformMatrix3x4dv
GLAPI PFNGLVIEWPORTINDEXEDFVPROC glad_glViewportIndexedfv;
#define glViewportIndexedfv glad_glViewportIndexedfv
GLAPI PFNGLDRAWELEMENTSBASEVERTEXPROC glad_glDrawElementsBaseVertex;
#define glDrawElementsBaseVertex glad_glDrawElementsBaseVertex
GLAPI PFNGLSAMPLECOVERAGEPROC glad_glSampleCoverage;
#define glSampleCoverage glad_glSampleCoverage
GLAPI PFNGLGETUNIFORMIVPROC glad_glGetUniformiv;
#define glGetUniformiv glad_glGetUniformiv
GLAPI PFNGLUNIFORM4UIPROC glad_glUniform4ui;
#define glUniform4ui glad_glUniform4ui
GLAPI PFNGLBINDFRAMEBUFFERPROC glad_glBindFramebuffer;
#define glBindFramebuffer glad_glBindFramebuffer
GLAPI PFNGLTEXGENFPROC glad_glTexGenf;
#define glTexGenf glad_glTexGenf
GLAPI PFNGLTEXGENDPROC glad_glTexGend;
#define glTexGend glad_glTexGend
GLAPI PFNGLTEXGENIPROC glad_glTexGeni;
#define glTexGeni glad_glTexGeni
GLAPI PFNGLSCISSORINDEXEDPROC glad_glScissorIndexed;
#define glScissorIndexed glad_glScissorIndexed
GLAPI PFNGLRASTERPOS2DVPROC glad_glRasterPos2dv;
#define glRasterPos2dv glad_glRasterPos2dv
GLAPI PFNGLCREATESHADERPROGRAMVPROC glad_glCreateShaderProgramv;
#define glCreateShaderProgramv glad_glCreateShaderProgramv
GLAPI PFNGLGETQUERYOBJECTIVPROC glad_glGetQueryObjectiv;
#define glGetQueryObjectiv glad_glGetQueryObjectiv
GLAPI PFNGLGENERATEMIPMAPPROC glad_glGenerateMipmap;
#define glGenerateMipmap glad_glGenerateMipmap
GLAPI PFNGLDELETELISTSPROC glad_glDeleteLists;
#define glDeleteLists glad_glDeleteLists
GLAPI PFNGLTEXCOORD2DPROC glad_glTexCoord2d;
#define glTexCoord2d glad_glTexCoord2d
GLAPI PFNGLPOINTPARAMETERIPROC glad_glPointParameteri;
#define glPointParameteri glad_glPointParameteri
GLAPI PFNGLTEXCOORD2FPROC glad_glTexCoord2f;
#define glTexCoord2f glad_glTexCoord2f
GLAPI PFNGLCOLOR4IVPROC glad_glColor4iv;
#define glColor4iv glad_glColor4iv
GLAPI PFNGLUNMAPBUFFERPROC glad_glUnmapBuffer;
#define glUnmapBuffer glad_glUnmapBuffer
GLAPI PFNGLTEXCOORD2IPROC glad_glTexCoord2i;
#define glTexCoord2i glad_glTexCoord2i
GLAPI PFNGLPOINTPARAMETERFPROC glad_glPointParameterf;
#define glPointParameterf glad_glPointParameterf
GLAPI PFNGLTEXCOORD2SPROC glad_glTexCoord2s;
#define glTexCoord2s glad_glTexCoord2s
GLAPI PFNGLVERTEXATTRIBP4UIVPROC glad_glVertexAttribP4uiv;
#define glVertexAttribP4uiv glad_glVertexAttribP4uiv
GLAPI PFNGLNORMAL3DVPROC glad_glNormal3dv;
#define glNormal3dv glad_glNormal3dv
GLAPI PFNGLRELEASESHADERCOMPILERPROC glad_glReleaseShaderCompiler;
#define glReleaseShaderCompiler glad_glReleaseShaderCompiler
GLAPI PFNGLSECONDARYCOLOR3SPROC glad_glSecondaryColor3s;
#define glSecondaryColor3s glad_glSecondaryColor3s
GLAPI PFNGLTEXCOORD1DVPROC glad_glTexCoord1dv;
#define glTexCoord1dv glad_glTexCoord1dv
GLAPI PFNGLREADPIXELSPROC glad_glReadPixels;
#define glReadPixels glad_glReadPixels
GLAPI PFNGLVERTEXATTRIBI3IVPROC glad_glVertexAttribI3iv;
#define glVertexAttribI3iv glad_glVertexAttribI3iv
GLAPI PFNGLSHADEMODELPROC glad_glShadeModel;
#define glShadeModel glad_glShadeModel
GLAPI PFNGLMAPGRID1DPROC glad_glMapGrid1d;
#define glMapGrid1d glad_glMapGrid1d
GLAPI PFNGLMAPGRID1FPROC glad_glMapGrid1f;
#define glMapGrid1f glad_glMapGrid1f
GLAPI PFNGLRECTIVPROC glad_glRectiv;
#define glRectiv glad_glRectiv
GLAPI PFNGLCOLORP4UIPROC glad_glColorP4ui;
#define glColorP4ui glad_glColorP4ui
GLAPI PFNGLRASTERPOS3DVPROC glad_glRasterPos3dv;
#define glRasterPos3dv glad_glRasterPos3dv
GLAPI PFNGLCLEARBUFFERUIVPROC glad_glClearBufferuiv;
#define glClearBufferuiv glad_glClearBufferuiv
GLAPI PFNGLNORMALP3UIPROC glad_glNormalP3ui;
#define glNormalP3ui glad_glNormalP3ui
GLAPI PFNGLVERTEXATTRIBI4IVPROC glad_glVertexAttribI4iv;
#define glVertexAttribI4iv glad_glVertexAttribI4iv
GLAPI PFNGLCOLOR4UBVPROC glad_glColor4ubv;
#define glColor4ubv glad_glColor4ubv
GLAPI PFNGLGETBUFFERSUBDATAPROC glad_glGetBufferSubData;
#define glGetBufferSubData glad_glGetBufferSubData
GLAPI PFNGLGETVERTEXATTRIBLDVPROC glad_glGetVertexAttribLdv;
#define glGetVertexAttribLdv glad_glGetVertexAttribLdv
GLAPI PFNGLTEXCOORDP1UIVPROC glad_glTexCoordP1uiv;
#define glTexCoordP1uiv glad_glTexCoordP1uiv
GLAPI PFNGLTEXIMAGE3DPROC glad_glTexImage3D;
#define glTexImage3D glad_glTexImage3D
GLAPI PFNGLISFRAMEBUFFERPROC glad_glIsFramebuffer;
#define glIsFramebuffer glad_glIsFramebuffer
GLAPI PFNGLTEXCOORDP4UIVPROC glad_glTexCoordP4uiv;
#define glTexCoordP4uiv glad_glTexCoordP4uiv
GLAPI PFNGLTEXGENDVPROC glad_glTexGendv;
#define glTexGendv glad_glTexGendv
GLAPI PFNGLVERTEXP2UIVPROC glad_glVertexP2uiv;
#define glVertexP2uiv glad_glVertexP2uiv
GLAPI PFNGLVERTEXATTRIB3FPROC glad_glVertexAttrib3f;
#define glVertexAttrib3f glad_glVertexAttrib3f
GLAPI PFNGLGETBUFFERPARAMETERI64VPROC glad_glGetBufferParameteri64v;
#define glGetBufferParameteri64v glad_glGetBufferParameteri64v
GLAPI PFNGLPROGRAMUNIFORM4DVPROC glad_glProgramUniform4dv;
#define glProgramUniform4dv glad_glProgramUniform4dv
GLAPI PFNGLMULTITEXCOORDP4UIPROC glad_glMultiTexCoordP4ui;
#define glMultiTexCoordP4ui glad_glMultiTexCoordP4ui
GLAPI PFNGLPROGRAMUNIFORM3UIVPROC glad_glProgramUniform3uiv;
#define glProgramUniform3uiv glad_glProgramUniform3uiv
GLAPI PFNGLVERTEXATTRIB4NUSVPROC glad_glVertexAttrib4Nusv;
#define glVertexAttrib4Nusv glad_glVertexAttrib4Nusv
GLAPI PFNGLCOLORMASKPROC glad_glColorMask;
#define glColorMask glad_glColorMask
GLAPI PFNGLBLENDFUNCIPROC glad_glBlendFunci;
#define glBlendFunci glad_glBlendFunci
GLAPI PFNGLGETUNIFORMLOCATIONPROC glad_glGetUniformLocation;
#define glGetUniformLocation glad_glGetUniformLocation
GLAPI PFNGLTEXCOORD4DVPROC glad_glTexCoord4dv;
#define glTexCoord4dv glad_glTexCoord4dv
GLAPI PFNGLUNIFORM4FVPROC glad_glUniform4fv;
#define glUniform4fv glad_glUniform4fv
GLAPI PFNGLENDCONDITIONALRENDERPROC glad_glEndConditionalRender;
#define glEndConditionalRender glad_glEndConditionalRender
GLAPI PFNGLENABLECLIENTSTATEPROC glad_glEnableClientState;
#define glEnableClientState glad_glEnableClientState
GLAPI PFNGLMULTITEXCOORD2SVPROC glad_glMultiTexCoord2sv;
#define glMultiTexCoord2sv glad_glMultiTexCoord2sv
GLAPI PFNGLPROGRAMUNIFORM2UIVPROC glad_glProgramUniform2uiv;
#define glProgramUniform2uiv glad_glProgramUniform2uiv
GLAPI PFNGLGETQUERYOBJECTUIVPROC glad_glGetQueryObjectuiv;
#define glGetQueryObjectuiv glad_glGetQueryObjectuiv
GLAPI PFNGLVERTEXATTRIB4IVPROC glad_glVertexAttrib4iv;
#define glVertexAttrib4iv glad_glVertexAttrib4iv
GLAPI PFNGLPROGRAMUNIFORM1UIVPROC glad_glProgramUniform1uiv;
#define glProgramUniform1uiv glad_glProgramUniform1uiv
GLAPI PFNGLGETTEXGENDVPROC glad_glGetTexGendv;
#define glGetTexGendv glad_glGetTexGendv
GLAPI PFNGLVERTEXATTRIBL1DVPROC glad_glVertexAttribL1dv;
#define glVertexAttribL1dv glad_glVertexAttribL1dv
GLAPI PFNGLCOLOR3USVPROC glad_glColor3usv;
#define glColor3usv glad_glColor3usv
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glad_glProgramUniformMatrix2x4fv;
#define glProgramUniformMatrix2x4fv glad_glProgramUniformMatrix2x4fv
GLAPI PFNGLPROGRAMUNIFORM2DVPROC glad_glProgramUniform2dv;
#define glProgramUniform2dv glad_glProgramUniform2dv
GLAPI PFNGLRASTERPOS2SVPROC glad_glRasterPos2sv;
#define glRasterPos2sv glad_glRasterPos2sv
GLAPI PFNGLUNIFORMMATRIX2FVPROC glad_glUniformMatrix2fv;
#define glUniformMatrix2fv glad_glUniformMatrix2fv
GLAPI PFNGLTEXCOORD1SVPROC glad_glTexCoord1sv;
#define glTexCoord1sv glad_glTexCoord1sv
GLAPI PFNGLNEWLISTPROC glad_glNewList;
#define glNewList glad_glNewList
GLAPI PFNGLSECONDARYCOLORP3UIVPROC glad_glSecondaryColorP3uiv;
#define glSecondaryColorP3uiv glad_glSecondaryColorP3uiv
GLAPI PFNGLGETINTEGERVPROC glad_glGetIntegerv;
#define glGetIntegerv glad_glGetIntegerv
GLAPI PFNGLPROGRAMUNIFORMMATRIX3DVPROC glad_glProgramUniformMatrix3dv;
#define glProgramUniformMatrix3dv glad_glProgramUniformMatrix3dv
GLAPI PFNGLVERTEX2SPROC glad_glVertex2s;
#define glVertex2s glad_glVertex2s
GLAPI PFNGLISQUERYPROC glad_glIsQuery;
#define glIsQuery glad_glIsQuery
GLAPI PFNGLTEXIMAGE2DPROC glad_glTexImage2D;
#define glTexImage2D glad_glTexImage2D
GLAPI PFNGLDRAWPIXELSPROC glad_glDrawPixels;
#define glDrawPixels glad_glDrawPixels
GLAPI PFNGLMULTMATRIXDPROC glad_glMultMatrixd;
#define glMultMatrixd glad_glMultMatrixd
GLAPI PFNGLMULTMATRIXFPROC glad_glMultMatrixf;
#define glMultMatrixf glad_glMultMatrixf
GLAPI PFNGLCOLOR4USVPROC glad_glColor4usv;
#define glColor4usv glad_glColor4usv
GLAPI PFNGLPOLYGONSTIPPLEPROC glad_glPolygonStipple;
#define glPolygonStipple glad_glPolygonStipple
GLAPI PFNGLINTERLEAVEDARRAYSPROC glad_glInterleavedArrays;
#define glInterleavedArrays glad_glInterleavedArrays
GLAPI PFNGLPIXELMAPUSVPROC glad_glPixelMapusv;
#define glPixelMapusv glad_glPixelMapusv
GLAPI PFNGLGETSAMPLERPARAMETERIVPROC glad_glGetSamplerParameteriv;
#define glGetSamplerParameteriv glad_glGetSamplerParameteriv
GLAPI PFNGLCOPYBUFFERSUBDATAPROC glad_glCopyBufferSubData;
#define glCopyBufferSubData glad_glCopyBufferSubData
GLAPI PFNGLVERTEXATTRIBI1UIVPROC glad_glVertexAttribI1uiv;
#define glVertexAttribI1uiv glad_glVertexAttribI1uiv
GLAPI PFNGLGETACTIVEUNIFORMPROC glad_glGetActiveUniform;
#define glGetActiveUniform glad_glGetActiveUniform
GLAPI PFNGLCOLORPOINTERPROC glad_glColorPointer;
#define glColorPointer glad_glColorPointer
GLAPI PFNGLVERTEXATTRIBL3DPROC glad_glVertexAttribL3d;
#define glVertexAttribL3d glad_glVertexAttribL3d
GLAPI PFNGLPROGRAMUNIFORMMATRIX4FVPROC glad_glProgramUniformMatrix4fv;
#define glProgramUniformMatrix4fv glad_glProgramUniformMatrix4fv
GLAPI PFNGLVERTEX2FVPROC glad_glVertex2fv;
#define glVertex2fv glad_glVertex2fv
GLAPI PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_glFramebufferRenderbuffer;
#define glFramebufferRenderbuffer glad_glFramebufferRenderbuffer
GLAPI PFNGLGETDOUBLEI_VPROC glad_glGetDoublei_v;
#define glGetDoublei_v glad_glGetDoublei_v
GLAPI PFNGLVERTEXATTRIB1SVPROC glad_glVertexAttrib1sv;
#define glVertexAttrib1sv glad_glVertexAttrib1sv
GLAPI PFNGLBINDSAMPLERPROC glad_glBindSampler;
#define glBindSampler glad_glBindSampler
GLAPI PFNGLLINEWIDTHPROC glad_glLineWidth;
#define glLineWidth glad_glLineWidth
GLAPI PFNGLGETINTEGERI_VPROC glad_glGetIntegeri_v;
#define glGetIntegeri_v glad_glGetIntegeri_v
GLAPI PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_glGetTransformFeedbackVarying;
#define glGetTransformFeedbackVarying glad_glGetTransformFeedbackVarying
GLAPI PFNGLFOGIVPROC glad_glFogiv;
#define glFogiv glad_glFogiv
GLAPI PFNGLLIGHTMODELIVPROC glad_glLightModeliv;
#define glLightModeliv glad_glLightModeliv
GLAPI PFNGLDEPTHRANGEFPROC glad_glDepthRangef;
#define glDepthRangef glad_glDepthRangef
GLAPI PFNGLGETPIXELMAPFVPROC glad_glGetPixelMapfv;
#define glGetPixelMapfv glad_glGetPixelMapfv
GLAPI PFNGLENABLEIPROC glad_glEnablei;
#define glEnablei glad_glEnablei
GLAPI PFNGLEVALCOORD1FVPROC glad_glEvalCoord1fv;
#define glEvalCoord1fv glad_glEvalCoord1fv
GLAPI PFNGLPROGRAMUNIFORMMATRIX2DVPROC glad_glProgramUniformMatrix2dv;
#define glProgramUniformMatrix2dv glad_glProgramUniformMatrix2dv
GLAPI PFNGLUNIFORMMATRIX3X2FVPROC glad_glUniformMatrix3x2fv;
#define glUniformMatrix3x2fv glad_glUniformMatrix3x2fv
GLAPI PFNGLVERTEXATTRIB2DVPROC glad_glVertexAttrib2dv;
#define glVertexAttrib2dv glad_glVertexAttrib2dv
GLAPI PFNGLUNIFORMMATRIX3X4FVPROC glad_glUniformMatrix3x4fv;
#define glUniformMatrix3x4fv glad_glUniformMatrix3x4fv
GLAPI PFNGLUSEPROGRAMSTAGESPROC glad_glUseProgramStages;
#define glUseProgramStages glad_glUseProgramStages
GLAPI PFNGLEDGEFLAGPROC glad_glEdgeFlag;
#define glEdgeFlag glad_glEdgeFlag
GLAPI PFNGLFOGCOORDFPROC glad_glFogCoordf;
#define glFogCoordf glad_glFogCoordf
GLAPI PFNGLVERTEX3DPROC glad_glVertex3d;
#define glVertex3d glad_glVertex3d
GLAPI PFNGLVERTEX3FPROC glad_glVertex3f;
#define glVertex3f glad_glVertex3f
GLAPI PFNGLVERTEX3IPROC glad_glVertex3i;
#define glVertex3i glad_glVertex3i
GLAPI PFNGLVERTEX3SPROC glad_glVertex3s;
#define glVertex3s glad_glVertex3s
GLAPI PFNGLTEXCOORDP2UIPROC glad_glTexCoordP2ui;
#define glTexCoordP2ui glad_glTexCoordP2ui
GLAPI PFNGLCOLORMASKIPROC glad_glColorMaski;
#define glColorMaski glad_glColorMaski
GLAPI PFNGLRASTERPOS4IPROC glad_glRasterPos4i;
#define glRasterPos4i glad_glRasterPos4i
GLAPI PFNGLNORMALPOINTERPROC glad_glNormalPointer;
#define glNormalPointer glad_glNormalPointer
GLAPI PFNGLPASSTHROUGHPROC glad_glPassThrough;
#define glPassThrough glad_glPassThrough
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glad_glProgramUniformMatrix4x3fv;
#define glProgramUniformMatrix4x3fv glad_glProgramUniformMatrix4x3fv
GLAPI PFNGLBEGINPROC glad_glBegin;
#define glBegin glad_glBegin
GLAPI PFNGLEVALCOORD2DVPROC glad_glEvalCoord2dv;
#define glEvalCoord2dv glad_glEvalCoord2dv
GLAPI PFNGLCOLOR3UBVPROC glad_glColor3ubv;
#define glColor3ubv glad_glColor3ubv
GLAPI PFNGLVERTEXP3UIPROC glad_glVertexP3ui;
#define glVertexP3ui glad_glVertexP3ui
GLAPI PFNGLLIGHTFVPROC glad_glLightfv;
#define glLightfv glad_glLightfv
GLAPI PFNGLGETACTIVEUNIFORMNAMEPROC glad_glGetActiveUniformName;
#define glGetActiveUniformName glad_glGetActiveUniformName
GLAPI PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetFramebufferAttachmentParameteriv;
#define glGetFramebufferAttachmentParameteriv glad_glGetFramebufferAttachmentParameteriv
GLAPI PFNGLTEXPARAMETERIVPROC glad_glTexParameteriv;
#define glTexParameteriv glad_glTexParameteriv
GLAPI PFNGLGETTEXIMAGEPROC glad_glGetTexImage;
#define glGetTexImage glad_glGetTexImage
GLAPI PFNGLINDEXSVPROC glad_glIndexsv;
#define glIndexsv glad_glIndexsv
GLAPI PFNGLBITMAPPROC glad_glBitmap;
#define glBitmap glad_glBitmap
GLAPI PFNGLPROGRAMUNIFORM2IVPROC glad_glProgramUniform2iv;
#define glProgramUniform2iv glad_glProgramUniform2iv
GLAPI PFNGLGETQUERYIVPROC glad_glGetQueryiv;
#define glGetQueryiv glad_glGetQueryiv
GLAPI PFNGLTEXCOORD4FPROC glad_glTexCoord4f;
#define glTexCoord4f glad_glTexCoord4f
GLAPI PFNGLTEXCOORD4DPROC glad_glTexCoord4d;
#define glTexCoord4d glad_glTexCoord4d
GLAPI PFNGLGETSAMPLERPARAMETERFVPROC glad_glGetSamplerParameterfv;
#define glGetSamplerParameterfv glad_glGetSamplerParameterfv
GLAPI PFNGLTEXCOORD4IPROC glad_glTexCoord4i;
#define glTexCoord4i glad_glTexCoord4i
GLAPI PFNGLTEXCOORD4SPROC glad_glTexCoord4s;
#define glTexCoord4s glad_glTexCoord4s
GLAPI PFNGLGETUNIFORMINDICESPROC glad_glGetUniformIndices;
#define glGetUniformIndices glad_glGetUniformIndices
GLAPI PFNGLPOINTPARAMETERIVPROC glad_glPointParameteriv;
#define glPointParameteriv glad_glPointParameteriv
GLAPI PFNGLNORMAL3FVPROC glad_glNormal3fv;
#define glNormal3fv glad_glNormal3fv
GLAPI PFNGLTEXCOORD1FVPROC glad_glTexCoord1fv;
#define glTexCoord1fv glad_glTexCoord1fv
GLAPI PFNGLMULTITEXCOORD1DVPROC glad_glMultiTexCoord1dv;
#define glMultiTexCoord1dv glad_glMultiTexCoord1dv
GLAPI PFNGLTEXCOORD3FVPROC glad_glTexCoord3fv;
#define glTexCoord3fv glad_glTexCoord3fv
GLAPI PFNGLSECONDARYCOLOR3USVPROC glad_glSecondaryColor3usv;
#define glSecondaryColor3usv glad_glSecondaryColor3usv
GLAPI PFNGLMULTITEXCOORDP3UIVPROC glad_glMultiTexCoordP3uiv;
#define glMultiTexCoordP3uiv glad_glMultiTexCoordP3uiv
GLAPI PFNGLDEPTHRANGEPROC glad_glDepthRange;
#define glDepthRange glad_glDepthRange
GLAPI PFNGLDRAWBUFFERPROC glad_glDrawBuffer;
#define glDrawBuffer glad_glDrawBuffer
GLAPI PFNGLRASTERPOS3FVPROC glad_glRasterPos3fv;
#define glRasterPos3fv glad_glRasterPos3fv
GLAPI PFNGLCLEARINDEXPROC glad_glClearIndex;
#define glClearIndex glad_glClearIndex
GLAPI PFNGLFLUSHPROC glad_glFlush;
#define glFlush glad_glFlush
GLAPI PFNGLGETTEXLEVELPARAMETERIVPROC glad_glGetTexLevelParameteriv;
#define glGetTexLevelParameteriv glad_glGetTexLevelParameteriv
GLAPI PFNGLCLAMPCOLORPROC glad_glClampColor;
#define glClampColor glad_glClampColor
GLAPI PFNGLCLEARSTENCILPROC glad_glClearStencil;
#define glClearStencil glad_glClearStencil
GLAPI PFNGLMULTITEXCOORD3FVPROC glad_glMultiTexCoord3fv;
#define glMultiTexCoord3fv glad_glMultiTexCoord3fv
GLAPI PFNGLVERTEX2FPROC glad_glVertex2f;
#define glVertex2f glad_glVertex2f
GLAPI PFNGLVERTEX2DPROC glad_glVertex2d;
#define glVertex2d glad_glVertex2d
GLAPI PFNGLBEGINQUERYINDEXEDPROC glad_glBeginQueryIndexed;
#define glBeginQueryIndexed glad_glBeginQueryIndexed
GLAPI PFNGLVERTEX2IPROC glad_glVertex2i;
#define glVertex2i glad_glVertex2i
GLAPI PFNGLPROGRAMUNIFORM4FVPROC glad_glProgramUniform4fv;
#define glProgramUniform4fv glad_glProgramUniform4fv
GLAPI PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_glFlushMappedBufferRange;
#define glFlushMappedBufferRange glad_glFlushMappedBufferRange
GLAPI PFNGLGENQUERIESPROC glad_glGenQueries;
#define glGenQueries glad_glGenQueries
GLAPI PFNGLTEXSUBIMAGE3DPROC glad_glTexSubImage3D;
#define glTexSubImage3D glad_glTexSubImage3D
GLAPI PFNGLDELETESAMPLERSPROC glad_glDeleteSamplers;
#define glDeleteSamplers glad_glDeleteSamplers
GLAPI PFNGLSECONDARYCOLORP3UIPROC glad_glSecondaryColorP3ui;
#define glSecondaryColorP3ui glad_glSecondaryColorP3ui
GLAPI PFNGLMATRIXMODEPROC glad_glMatrixMode;
#define glMatrixMode glad_glMatrixMode
GLAPI PFNGLPRIORITIZETEXTURESPROC glad_glPrioritizeTextures;
#define glPrioritizeTextures glad_glPrioritizeTextures
GLAPI PFNGLGETDOUBLEVPROC glad_glGetDoublev;
#define glGetDoublev glad_glGetDoublev
GLAPI PFNGLUNIFORM4DVPROC glad_glUniform4dv;
#define glUniform4dv glad_glUniform4dv
GLAPI PFNGLVERTEXATTRIB1FPROC glad_glVertexAttrib1f;
#define glVertexAttrib1f glad_glVertexAttrib1f
GLAPI PFNGLUNIFORM3FVPROC glad_glUniform3fv;
#define glUniform3fv glad_glUniform3fv
GLAPI PFNGLMULTITEXCOORDP1UIPROC glad_glMultiTexCoordP1ui;
#define glMultiTexCoordP1ui glad_glMultiTexCoordP1ui
GLAPI PFNGLGENBUFFERSPROC glad_glGenBuffers;
#define glGenBuffers glad_glGenBuffers
GLAPI PFNGLUNIFORMMATRIX4DVPROC glad_glUniformMatrix4dv;
#define glUniformMatrix4dv glad_glUniformMatrix4dv
GLAPI PFNGLMULTIDRAWELEMENTSPROC glad_glMultiDrawElements;
#define glMultiDrawElements glad_glMultiDrawElements
GLAPI PFNGLGETTEXGENFVPROC glad_glGetTexGenfv;
#define glGetTexGenfv glad_glGetTexGenfv
GLAPI PFNGLMULTITEXCOORD2IVPROC glad_glMultiTexCoord2iv;
#define glMultiTexCoord2iv glad_glMultiTexCoord2iv
GLAPI PFNGLRASTERPOS3IVPROC glad_glRasterPos3iv;
#define glRasterPos3iv glad_glRasterPos3iv
GLAPI PFNGLVERTEXP2UIPROC glad_glVertexP2ui;
#define glVertexP2ui glad_glVertexP2ui
GLAPI PFNGLSECONDARYCOLOR3BPROC glad_glSecondaryColor3b;
#define glSecondaryColor3b glad_glSecondaryColor3b
GLAPI PFNGLTEXCOORD4SVPROC glad_glTexCoord4sv;
#define glTexCoord4sv glad_glTexCoord4sv
GLAPI PFNGLUNIFORM2UIVPROC glad_glUniform2uiv;
#define glUniform2uiv glad_glUniform2uiv
GLAPI PFNGLFINISHPROC glad_glFinish;
#define glFinish glad_glFinish
GLAPI PFNGLSECONDARYCOLOR3IPROC glad_glSecondaryColor3i;
#define glSecondaryColor3i glad_glSecondaryColor3i
GLAPI PFNGLUNIFORM1UIVPROC glad_glUniform1uiv;
#define glUniform1uiv glad_glUniform1uiv
GLAPI PFNGLUNIFORMMATRIX2DVPROC glad_glUniformMatrix2dv;
#define glUniformMatrix2dv glad_glUniformMatrix2dv
GLAPI PFNGLINDEXDVPROC glad_glIndexdv;
#define glIndexdv glad_glIndexdv
GLAPI PFNGLTEXCOORD3IVPROC glad_glTexCoord3iv;
#define glTexCoord3iv glad_glTexCoord3iv
GLAPI PFNGLCLEARDEPTHPROC glad_glClearDepth;
#define glClearDepth glad_glClearDepth
GLAPI PFNGLUNIFORMMATRIX4X2DVPROC glad_glUniformMatrix4x2dv;
#define glUniformMatrix4x2dv glad_glUniformMatrix4x2dv
GLAPI PFNGLNORMAL3SVPROC glad_glNormal3sv;
#define glNormal3sv glad_glNormal3sv
GLAPI PFNGLRASTERPOS4IVPROC glad_glRasterPos4iv;
#define glRasterPos4iv glad_glRasterPos4iv
GLAPI PFNGLEDGEFLAGVPROC glad_glEdgeFlagv;
#define glEdgeFlagv glad_glEdgeFlagv
GLAPI PFNGLDELETEPROGRAMPROC glad_glDeleteProgram;
#define glDeleteProgram glad_glDeleteProgram
GLAPI PFNGLUNIFORMMATRIX4X3DVPROC glad_glUniformMatrix4x3dv;
#define glUniformMatrix4x3dv glad_glUniformMatrix4x3dv
GLAPI PFNGLNORMALP3UIVPROC glad_glNormalP3uiv;
#define glNormalP3uiv glad_glNormalP3uiv
GLAPI PFNGLINITNAMESPROC glad_glInitNames;
#define glInitNames glad_glInitNames
GLAPI PFNGLCOLOR3DVPROC glad_glColor3dv;
#define glColor3dv glad_glColor3dv
GLAPI PFNGLGETVERTEXATTRIBFVPROC glad_glGetVertexAttribfv;
#define glGetVertexAttribfv glad_glGetVertexAttribfv
GLAPI PFNGLGETACTIVEATTRIBPROC glad_glGetActiveAttrib;
#define glGetActiveAttrib glad_glGetActiveAttrib
GLAPI PFNGLTEXSUBIMAGE2DPROC glad_glTexSubImage2D;
#define glTexSubImage2D glad_glTexSubImage2D
GLAPI PFNGLCLEARBUFFERFVPROC glad_glClearBufferfv;
#define glClearBufferfv glad_glClearBufferfv
GLAPI PFNGLLOGICOPPROC glad_glLogicOp;
#define glLogicOp glad_glLogicOp
GLAPI PFNGLPIXELTRANSFERFPROC glad_glPixelTransferf;
#define glPixelTransferf glad_glPixelTransferf
GLAPI PFNGLPROGRAMUNIFORMMATRIX4DVPROC glad_glProgramUniformMatrix4dv;
#define glProgramUniformMatrix4dv glad_glProgramUniformMatrix4dv
GLAPI PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glad_glDrawTransformFeedbackStream;
#define glDrawTransformFeedbackStream glad_glDrawTransformFeedbackStream
GLAPI PFNGLPROVOKINGVERTEXPROC glad_glProvokingVertex;
#define glProvokingVertex glad_glProvokingVertex
GLAPI PFNGLSHADERBINARYPROC glad_glShaderBinary;
#define glShaderBinary glad_glShaderBinary
GLAPI PFNGLTEXGENIVPROC glad_glTexGeniv;
#define glTexGeniv glad_glTexGeniv
GLAPI PFNGLDRAWELEMENTSPROC glad_glDrawElements;
#define glDrawElements glad_glDrawElements
GLAPI PFNGLCLIENTACTIVETEXTUREPROC glad_glClientActiveTexture;
#define glClientActiveTexture glad_glClientActiveTexture
GLAPI PFNGLUNIFORM1IVPROC glad_glUniform1iv;
#define glUniform1iv glad_glUniform1iv
GLAPI PFNGLDRAWARRAYSINSTANCEDPROC glad_glDrawArraysInstanced;
#define glDrawArraysInstanced glad_glDrawArraysInstanced
GLAPI PFNGLPROGRAMUNIFORMMATRIX2FVPROC glad_glProgramUniformMatrix2fv;
#define glProgramUniformMatrix2fv glad_glProgramUniformMatrix2fv
GLAPI PFNGLSAMPLERPARAMETERIVPROC glad_glSamplerParameteriv;
#define glSamplerParameteriv glad_glSamplerParameteriv
GLAPI PFNGLVERTEXATTRIB4UIVPROC glad_glVertexAttrib4uiv;
#define glVertexAttrib4uiv glad_glVertexAttrib4uiv
GLAPI PFNGLENDQUERYINDEXEDPROC glad_glEndQueryIndexed;
#define glEndQueryIndexed glad_glEndQueryIndexed
GLAPI PFNGLPROGRAMUNIFORM3DVPROC glad_glProgramUniform3dv;
#define glProgramUniform3dv glad_glProgramUniform3dv
GLAPI PFNGLPROGRAMUNIFORM1IVPROC glad_glProgramUniform1iv;
#define glProgramUniform1iv glad_glProgramUniform1iv
GLAPI PFNGLBINDRENDERBUFFERPROC glad_glBindRenderbuffer;
#define glBindRenderbuffer glad_glBindRenderbuffer
GLAPI PFNGLMATERIALIVPROC glad_glMaterialiv;
#define glMaterialiv glad_glMaterialiv
GLAPI PFNGLISPROGRAMPROC glad_glIsProgram;
#define glIsProgram glad_glIsProgram
GLAPI PFNGLUNIFORMMATRIX3X2DVPROC glad_glUniformMatrix3x2dv;
#define glUniformMatrix3x2dv glad_glUniformMatrix3x2dv
GLAPI PFNGLVERTEXATTRIB4FVPROC glad_glVertexAttrib4fv;
#define glVertexAttrib4fv glad_glVertexAttrib4fv
GLAPI PFNGLPUSHCLIENTATTRIBPROC glad_glPushClientAttrib;
#define glPushClientAttrib glad_glPushClientAttrib
GLAPI PFNGLVERTEXATTRIB2FVPROC glad_glVertexAttrib2fv;
#define glVertexAttrib2fv glad_glVertexAttrib2fv
GLAPI PFNGLBINDTRANSFORMFEEDBACKPROC glad_glBindTransformFeedback;
#define glBindTransformFeedback glad_glBindTransformFeedback
GLAPI PFNGLDISABLECLIENTSTATEPROC glad_glDisableClientState;
#define glDisableClientState glad_glDisableClientState
GLAPI PFNGLCOLOR4UIVPROC glad_glColor4uiv;
#define glColor4uiv glad_glColor4uiv
GLAPI PFNGLPROGRAMUNIFORM3IPROC glad_glProgramUniform3i;
#define glProgramUniform3i glad_glProgramUniform3i
GLAPI PFNGLEVALMESH2PROC glad_glEvalMesh2;
#define glEvalMesh2 glad_glEvalMesh2
GLAPI PFNGLEVALMESH1PROC glad_glEvalMesh1;
#define glEvalMesh1 glad_glEvalMesh1
GLAPI PFNGLPROGRAMUNIFORM3FPROC glad_glProgramUniform3f;
#define glProgramUniform3f glad_glProgramUniform3f
GLAPI PFNGLGETSAMPLERPARAMETERIIVPROC glad_glGetSamplerParameterIiv;
#define glGetSamplerParameterIiv glad_glGetSamplerParameterIiv
GLAPI PFNGLPROGRAMUNIFORM3DPROC glad_glProgramUniform3d;
#define glProgramUniform3d glad_glProgramUniform3d
GLAPI PFNGLEVALCOORD2FVPROC glad_glEvalCoord2fv;
#define glEvalCoord2fv glad_glEvalCoord2fv
GLAPI PFNGLLOADTRANSPOSEMATRIXDPROC glad_glLoadTransposeMatrixd;
#define glLoadTransposeMatrixd glad_glLoadTransposeMatrixd
GLAPI PFNGLLOADTRANSPOSEMATRIXFPROC glad_glLoadTransposeMatrixf;
#define glLoadTransposeMatrixf glad_glLoadTransposeMatrixf
GLAPI PFNGLVERTEXATTRIBI1UIPROC glad_glVertexAttribI1ui;
#define glVertexAttribI1ui glad_glVertexAttribI1ui
GLAPI PFNGLGETINTEGER64VPROC glad_glGetInteger64v;
#define glGetInteger64v glad_glGetInteger64v
GLAPI PFNGLCLIPPLANEPROC glad_glClipPlane;
#define glClipPlane glad_glClipPlane
GLAPI PFNGLINDEXUBPROC glad_glIndexub;
#define glIndexub glad_glIndexub
GLAPI PFNGLVERTEXATTRIB4NIVPROC glad_glVertexAttrib4Niv;
#define glVertexAttrib4Niv glad_glVertexAttrib4Niv
GLAPI PFNGLCLEARBUFFERIVPROC glad_glClearBufferiv;
#define glClearBufferiv glad_glClearBufferiv
GLAPI PFNGLCOLORP4UIVPROC glad_glColorP4uiv;
#define glColorP4uiv glad_glColorP4uiv
GLAPI PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glad_glGetActiveSubroutineUniformName;
#define glGetActiveSubroutineUniformName glad_glGetActiveSubroutineUniformName
GLAPI PFNGLMULTITEXCOORD1FVPROC glad_glMultiTexCoord1fv;
#define glMultiTexCoord1fv glad_glMultiTexCoord1fv
GLAPI PFNGLGETSAMPLERPARAMETERIUIVPROC glad_glGetSamplerParameterIuiv;
#define glGetSamplerParameterIuiv glad_glGetSamplerParameterIuiv
GLAPI PFNGLTEXCOORDP3UIPROC glad_glTexCoordP3ui;
#define glTexCoordP3ui glad_glTexCoordP3ui
GLAPI PFNGLWINDOWPOS3SPROC glad_glWindowPos3s;
#define glWindowPos3s glad_glWindowPos3s
GLAPI PFNGLCLEARDEPTHFPROC glad_glClearDepthf;
#define glClearDepthf glad_glClearDepthf
GLAPI PFNGLWINDOWPOS3IPROC glad_glWindowPos3i;
#define glWindowPos3i glad_glWindowPos3i
GLAPI PFNGLWINDOWPOS3DPROC glad_glWindowPos3d;
#define glWindowPos3d glad_glWindowPos3d
GLAPI PFNGLWINDOWPOS3FPROC glad_glWindowPos3f;
#define glWindowPos3f glad_glWindowPos3f
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glad_glProgramUniformMatrix4x3dv;
#define glProgramUniformMatrix4x3dv glad_glProgramUniformMatrix4x3dv
GLAPI PFNGLMAPBUFFERRANGEPROC glad_glMapBufferRange;
#define glMapBufferRange glad_glMapBufferRange
GLAPI PFNGLMULTITEXCOORD4FPROC glad_glMultiTexCoord4f;
#define glMultiTexCoord4f glad_glMultiTexCoord4f
GLAPI PFNGLCOLOR3UBPROC glad_glColor3ub;
#define glColor3ub glad_glColor3ub
GLAPI PFNGLMULTITEXCOORD4DPROC glad_glMultiTexCoord4d;
#define glMultiTexCoord4d glad_glMultiTexCoord4d
GLAPI PFNGLCOLOR3UIPROC glad_glColor3ui;
#define glColor3ui glad_glColor3ui
GLAPI PFNGLMULTITEXCOORD4IPROC glad_glMultiTexCoord4i;
#define glMultiTexCoord4i glad_glMultiTexCoord4i
GLAPI PFNGLGETPOLYGONSTIPPLEPROC glad_glGetPolygonStipple;
#define glGetPolygonStipple glad_glGetPolygonStipple
GLAPI PFNGLVERTEXATTRIBI4UIPROC glad_glVertexAttribI4ui;
#define glVertexAttribI4ui glad_glVertexAttribI4ui
GLAPI PFNGLDEPTHFUNCPROC glad_glDepthFunc;
#define glDepthFunc glad_glDepthFunc
GLAPI PFNGLBLENDEQUATIONPROC glad_glBlendEquation;
#define glBlendEquation glad_glBlendEquation
GLAPI PFNGLMULTITEXCOORD3DVPROC glad_glMultiTexCoord3dv;
#define glMultiTexCoord3dv glad_glMultiTexCoord3dv
GLAPI PFNGLCOLOR4SVPROC glad_glColor4sv;
#define glColor4sv glad_glColor4sv
GLAPI PFNGLPOPCLIENTATTRIBPROC glad_glPopClientAttrib;
#define glPopClientAttrib glad_glPopClientAttrib
GLAPI PFNGLCOLOR3IVPROC glad_glColor3iv;
#define glColor3iv glad_glColor3iv
GLAPI PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_glCompressedTexImage1D;
#define glCompressedTexImage1D glad_glCompressedTexImage1D
GLAPI PFNGLDELETETRANSFORMFEEDBACKSPROC glad_glDeleteTransformFeedbacks;
#define glDeleteTransformFeedbacks glad_glDeleteTransformFeedbacks
GLAPI PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_glDrawRangeElementsBaseVertex;
#define glDrawRangeElementsBaseVertex glad_glDrawRangeElementsBaseVertex
GLAPI PFNGLBINDATTRIBLOCATIONPROC glad_glBindAttribLocation;
#define glBindAttribLocation glad_glBindAttribLocation
GLAPI PFNGLVERTEXATTRIB1DVPROC glad_glVertexAttrib1dv;
#define glVertexAttrib1dv glad_glVertexAttrib1dv
GLAPI PFNGLBUFFERSUBDATAPROC glad_glBufferSubData;
#define glBufferSubData glad_glBufferSubData
GLAPI PFNGLGETLIGHTIVPROC glad_glGetLightiv;
#define glGetLightiv glad_glGetLightiv
GLAPI PFNGLBLENDFUNCSEPARATEIPROC glad_glBlendFuncSeparatei;
#define glBlendFuncSeparatei glad_glBlendFuncSeparatei
GLAPI PFNGLVERTEXP4UIVPROC glad_glVertexP4uiv;
#define glVertexP4uiv glad_glVertexP4uiv
GLAPI PFNGLWINDOWPOS2FVPROC glad_glWindowPos2fv;
#define glWindowPos2fv glad_glWindowPos2fv
GLAPI PFNGLDISABLEIPROC glad_glDisablei;
#define glDisablei glad_glDisablei
GLAPI PFNGLGETSYNCIVPROC glad_glGetSynciv;
#define glGetSynciv glad_glGetSynciv
GLAPI PFNGLPROGRAMUNIFORM2IPROC glad_glProgramUniform2i;
#define glProgramUniform2i glad_glProgramUniform2i
GLAPI PFNGLPROGRAMUNIFORM2DPROC glad_glProgramUniform2d;
#define glProgramUniform2d glad_glProgramUniform2d
GLAPI PFNGLPROGRAMUNIFORM2FPROC glad_glProgramUniform2f;
#define glProgramUniform2f glad_glProgramUniform2f
GLAPI PFNGLGETPROGRAMBINARYPROC glad_glGetProgramBinary;
#define glGetProgramBinary glad_glGetProgramBinary
GLAPI PFNGLEVALPOINT1PROC glad_glEvalPoint1;
#define glEvalPoint1 glad_glEvalPoint1
GLAPI PFNGLEVALPOINT2PROC glad_glEvalPoint2;
#define glEvalPoint2 glad_glEvalPoint2
GLAPI PFNGLPAUSETRANSFORMFEEDBACKPROC glad_glPauseTransformFeedback;
#define glPauseTransformFeedback glad_glPauseTransformFeedback
GLAPI PFNGLVERTEXATTRIBP3UIVPROC glad_glVertexAttribP3uiv;
#define glVertexAttribP3uiv glad_glVertexAttribP3uiv
GLAPI PFNGLRASTERPOS4DVPROC glad_glRasterPos4dv;
#define glRasterPos4dv glad_glRasterPos4dv
GLAPI PFNGLVERTEXATTRIB4SVPROC glad_glVertexAttrib4sv;
#define glVertexAttrib4sv glad_glVertexAttrib4sv
GLAPI PFNGLLOADNAMEPROC glad_glLoadName;
#define glLoadName glad_glLoadName
GLAPI PFNGLLOADMATRIXFPROC glad_glLoadMatrixf;
#define glLoadMatrixf glad_glLoadMatrixf
GLAPI PFNGLLOADMATRIXDPROC glad_glLoadMatrixd;
#define glLoadMatrixd glad_glLoadMatrixd
GLAPI PFNGLTEXPARAMETERFVPROC glad_glTexParameterfv;
#define glTexParameterfv glad_glTexParameterfv
GLAPI PFNGLUNIFORM3DVPROC glad_glUniform3dv;
#define glUniform3dv glad_glUniform3dv
GLAPI PFNGLPROGRAMUNIFORM3FVPROC glad_glProgramUniform3fv;
#define glProgramUniform3fv glad_glProgramUniform3fv
GLAPI PFNGLPOPNAMEPROC glad_glPopName;
#define glPopName glad_glPopName
GLAPI PFNGLDRAWELEMENTSINDIRECTPROC glad_glDrawElementsIndirect;
#define glDrawElementsIndirect glad_glDrawElementsIndirect
GLAPI PFNGLGETQUERYOBJECTUI64VPROC glad_glGetQueryObjectui64v;
#define glGetQueryObjectui64v glad_glGetQueryObjectui64v
GLAPI PFNGLPROGRAMUNIFORM1FVPROC glad_glProgramUniform1fv;
#define glProgramUniform1fv glad_glProgramUniform1fv
GLAPI PFNGLUNIFORMMATRIX4FVPROC glad_glUniformMatrix4fv;
#define glUniformMatrix4fv glad_glUniformMatrix4fv
GLAPI PFNGLDELETEPROGRAMPIPELINESPROC glad_glDeleteProgramPipelines;
#define glDeleteProgramPipelines glad_glDeleteProgramPipelines
GLAPI PFNGLGENPROGRAMPIPELINESPROC glad_glGenProgramPipelines;
#define glGenProgramPipelines glad_glGenProgramPipelines
GLAPI PFNGLWINDOWPOS2SPROC glad_glWindowPos2s;
#define glWindowPos2s glad_glWindowPos2s
GLAPI PFNGLWINDOWPOS2IPROC glad_glWindowPos2i;
#define glWindowPos2i glad_glWindowPos2i
GLAPI PFNGLWINDOWPOS2FPROC glad_glWindowPos2f;
#define glWindowPos2f glad_glWindowPos2f
GLAPI PFNGLWINDOWPOS2DPROC glad_glWindowPos2d;
#define glWindowPos2d glad_glWindowPos2d
GLAPI PFNGLUNIFORMSUBROUTINESUIVPROC glad_glUniformSubroutinesuiv;
#define glUniformSubroutinesuiv glad_glUniformSubroutinesuiv
GLAPI PFNGLRECTDVPROC glad_glRectdv;
#define glRectdv glad_glRectdv
GLAPI PFNGLCOLORP3UIVPROC glad_glColorP3uiv;
#define glColorP3uiv glad_glColorP3uiv
GLAPI PFNGLFOGCOORDFVPROC glad_glFogCoordfv;
#define glFogCoordfv glad_glFogCoordfv
GLAPI PFNGLCOMPILESHADERPROC glad_glCompileShader;
#define glCompileShader glad_glCompileShader
GLAPI PFNGLINDEXFVPROC glad_glIndexfv;
#define glIndexfv glad_glIndexfv
GLAPI PFNGLVERTEXATTRIBIPOINTERPROC glad_glVertexAttribIPointer;
#define glVertexAttribIPointer glad_glVertexAttribIPointer
GLAPI PFNGLMULTITEXCOORDP3UIPROC glad_glMultiTexCoordP3ui;
#define glMultiTexCoordP3ui glad_glMultiTexCoordP3ui
GLAPI PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_glCompressedTexImage2D;
#define glCompressedTexImage2D glad_glCompressedTexImage2D
GLAPI PFNGLVERTEX4FVPROC glad_glVertex4fv;
#define glVertex4fv glad_glVertex4fv
GLAPI PFNGLDRAWBUFFERSPROC glad_glDrawBuffers;
#define glDrawBuffers glad_glDrawBuffers
GLAPI PFNGLVERTEXATTRIB1SPROC glad_glVertexAttrib1s;
#define glVertexAttrib1s glad_glVertexAttrib1s
GLAPI PFNGLMULTITEXCOORD1SVPROC glad_glMultiTexCoord1sv;
#define glMultiTexCoord1sv glad_glMultiTexCoord1sv
GLAPI PFNGLRASTERPOS2SPROC glad_glRasterPos2s;
#define glRasterPos2s glad_glRasterPos2s
GLAPI PFNGLCOLOR4BVPROC glad_glColor4bv;
#define glColor4bv glad_glColor4bv
GLAPI PFNGLRASTERPOS2FPROC glad_glRasterPos2f;
#define glRasterPos2f glad_glRasterPos2f
GLAPI PFNGLRASTERPOS2DPROC glad_glRasterPos2d;
#define glRasterPos2d glad_glRasterPos2d
GLAPI PFNGLLOADIDENTITYPROC glad_glLoadIdentity;
#define glLoadIdentity glad_glLoadIdentity
GLAPI PFNGLRASTERPOS2IPROC glad_glRasterPos2i;
#define glRasterPos2i glad_glRasterPos2i
GLAPI PFNGLUNIFORMMATRIX4X3FVPROC glad_glUniformMatrix4x3fv;
#define glUniformMatrix4x3fv glad_glUniformMatrix4x3fv
GLAPI PFNGLCLEARBUFFERFIPROC glad_glClearBufferfi;
#define glClearBufferfi glad_glClearBufferfi
GLAPI PFNGLDRAWARRAYSINDIRECTPROC glad_glDrawArraysIndirect;
#define glDrawArraysIndirect glad_glDrawArraysIndirect
GLAPI PFNGLGENVERTEXARRAYSPROC glad_glGenVertexArrays;
#define glGenVertexArrays glad_glGenVertexArrays
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glad_glProgramUniformMatrix3x2dv;
#define glProgramUniformMatrix3x2dv glad_glProgramUniformMatrix3x2dv
GLAPI PFNGLGETVERTEXATTRIBDVPROC glad_glGetVertexAttribdv;
#define glGetVertexAttribdv glad_glGetVertexAttribdv
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glad_glProgramUniformMatrix3x4dv;
#define glProgramUniformMatrix3x4dv glad_glProgramUniformMatrix3x4dv
GLAPI PFNGLUNIFORM1UIPROC glad_glUniform1ui;
#define glUniform1ui glad_glUniform1ui
GLAPI PFNGLGETFRAGDATALOCATIONPROC glad_glGetFragDataLocation;
#define glGetFragDataLocation glad_glGetFragDataLocation
GLAPI PFNGLGETMATERIALFVPROC glad_glGetMaterialfv;
#define glGetMaterialfv glad_glGetMaterialfv
GLAPI PFNGLPIXELMAPUIVPROC glad_glPixelMapuiv;
#define glPixelMapuiv glad_glPixelMapuiv
GLAPI PFNGLFRAMEBUFFERTEXTUREPROC glad_glFramebufferTexture;
#define glFramebufferTexture glad_glFramebufferTexture
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glad_glProgramUniformMatrix4x2dv;
#define glProgramUniformMatrix4x2dv glad_glProgramUniformMatrix4x2dv
GLAPI PFNGLISSHADERPROC glad_glIsShader;
#define glIsShader glad_glIsShader
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glad_glProgramUniformMatrix2x3fv;
#define glProgramUniformMatrix2x3fv glad_glProgramUniformMatrix2x3fv
GLAPI PFNGLGETACTIVEUNIFORMSIVPROC glad_glGetActiveUniformsiv;
#define glGetActiveUniformsiv glad_glGetActiveUniformsiv
GLAPI PFNGLDELETEQUERIESPROC glad_glDeleteQueries;
#define glDeleteQueries glad_glDeleteQueries
GLAPI PFNGLBLENDEQUATIONIPROC glad_glBlendEquationi;
#define glBlendEquationi glad_glBlendEquationi
GLAPI PFNGLGETATTRIBLOCATIONPROC glad_glGetAttribLocation;
#define glGetAttribLocation glad_glGetAttribLocation
GLAPI PFNGLVERTEXATTRIB4DVPROC glad_glVertexAttrib4dv;
#define glVertexAttrib4dv glad_glVertexAttrib4dv
GLAPI PFNGLPROGRAMUNIFORM3UIPROC glad_glProgramUniform3ui;
#define glProgramUniform3ui glad_glProgramUniform3ui
GLAPI PFNGLENABLEPROC glad_glEnable;
#define glEnable glad_glEnable
GLAPI PFNGLPUSHMATRIXPROC glad_glPushMatrix;
#define glPushMatrix glad_glPushMatrix
GLAPI PFNGLORTHOPROC glad_glOrtho;
#define glOrtho glad_glOrtho
GLAPI PFNGLWINDOWPOS3SVPROC glad_glWindowPos3sv;
#define glWindowPos3sv glad_glWindowPos3sv
GLAPI PFNGLPROGRAMUNIFORM1IPROC glad_glProgramUniform1i;
#define glProgramUniform1i glad_glProgramUniform1i
GLAPI PFNGLPROGRAMUNIFORM1FPROC glad_glProgramUniform1f;
#define glProgramUniform1f glad_glProgramUniform1f
GLAPI PFNGLBEGINTRANSFORMFEEDBACKPROC glad_glBeginTransformFeedback;
#define glBeginTransformFeedback glad_glBeginTransformFeedback
GLAPI PFNGLPROGRAMUNIFORM3IVPROC glad_glProgramUniform3iv;
#define glProgramUniform3iv glad_glProgramUniform3iv
GLAPI PFNGLINDEXIVPROC glad_glIndexiv;
#define glIndexiv glad_glIndexiv
GLAPI PFNGLGETVERTEXATTRIBPOINTERVPROC glad_glGetVertexAttribPointerv;
#define glGetVertexAttribPointerv glad_glGetVertexAttribPointerv
GLAPI PFNGLPIXELZOOMPROC glad_glPixelZoom;
#define glPixelZoom glad_glPixelZoom
GLAPI PFNGLCOLORP3UIPROC glad_glColorP3ui;
#define glColorP3ui glad_glColorP3ui
GLAPI PFNGLBEGINCONDITIONALRENDERPROC glad_glBeginConditionalRender;
#define glBeginConditionalRender glad_glBeginConditionalRender
GLAPI PFNGLMULTITEXCOORDP4UIVPROC glad_glMultiTexCoordP4uiv;
#define glMultiTexCoordP4uiv glad_glMultiTexCoordP4uiv
GLAPI PFNGLUNIFORM4IVPROC glad_glUniform4iv;
#define glUniform4iv glad_glUniform4iv
GLAPI PFNGLGENTEXTURESPROC glad_glGenTextures;
#define glGenTextures glad_glGenTextures
GLAPI PFNGLISTEXTUREPROC glad_glIsTexture;
#define glIsTexture glad_glIsTexture
GLAPI PFNGLDELETERENDERBUFFERSPROC glad_glDeleteRenderbuffers;
#define glDeleteRenderbuffers glad_glDeleteRenderbuffers
GLAPI PFNGLVERTEXATTRIBPOINTERPROC glad_glVertexAttribPointer;
#define glVertexAttribPointer glad_glVertexAttribPointer
GLAPI PFNGLNORMAL3BVPROC glad_glNormal3bv;
#define glNormal3bv glad_glNormal3bv
GLAPI PFNGLGETFLOATI_VPROC glad_glGetFloati_v;
#define glGetFloati_v glad_glGetFloati_v
GLAPI PFNGLVERTEX3SVPROC glad_glVertex3sv;
#define glVertex3sv glad_glVertex3sv
GLAPI PFNGLVERTEXATTRIBP1UIPROC glad_glVertexAttribP1ui;
#define glVertexAttribP1ui glad_glVertexAttribP1ui
GLAPI PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_glBindFragDataLocationIndexed;
#define glBindFragDataLocationIndexed glad_glBindFragDataLocationIndexed
GLAPI PFNGLTEXCOORDP4UIPROC glad_glTexCoordP4ui;
#define glTexCoordP4ui glad_glTexCoordP4ui
GLAPI PFNGLMULTITEXCOORD2DVPROC glad_glMultiTexCoord2dv;
#define glMultiTexCoord2dv glad_glMultiTexCoord2dv
GLAPI PFNGLUNIFORM2IVPROC glad_glUniform2iv;
#define glUniform2iv glad_glUniform2iv
GLAPI PFNGLFEEDBACKBUFFERPROC glad_glFeedbackBuffer;
#define glFeedbackBuffer glad_glFeedbackBuffer
GLAPI PFNGLMULTITEXCOORD2IPROC glad_glMultiTexCoord2i;
#define glMultiTexCoord2i glad_glMultiTexCoord2i
GLAPI PFNGLFRAMEBUFFERTEXTURE1DPROC glad_glFramebufferTexture1D;
#define glFramebufferTexture1D glad_glFramebufferTexture1D
GLAPI PFNGLGETSHADERIVPROC glad_glGetShaderiv;
#define glGetShaderiv glad_glGetShaderiv
GLAPI PFNGLMULTITEXCOORD2DPROC glad_glMultiTexCoord2d;
#define glMultiTexCoord2d glad_glMultiTexCoord2d
GLAPI PFNGLMULTITEXCOORD2FPROC glad_glMultiTexCoord2f;
#define glMultiTexCoord2f glad_glMultiTexCoord2f
GLAPI PFNGLUNIFORM1DVPROC glad_glUniform1dv;
#define glUniform1dv glad_glUniform1dv
GLAPI PFNGLPIXELTRANSFERIPROC glad_glPixelTransferi;
#define glPixelTransferi glad_glPixelTransferi
GLAPI PFNGLVERTEXATTRIB1FVPROC glad_glVertexAttrib1fv;
#define glVertexAttrib1fv glad_glVertexAttrib1fv
GLAPI PFNGLVERTEX2SVPROC glad_glVertex2sv;
#define glVertex2sv glad_glVertex2sv
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glad_glProgramUniformMatrix3x4fv;
#define glProgramUniformMatrix3x4fv glad_glProgramUniformMatrix3x4fv
GLAPI PFNGLGETPROGRAMIVPROC glad_glGetProgramiv;
#define glGetProgramiv glad_glGetProgramiv
GLAPI PFNGLRASTERPOS3IPROC glad_glRasterPos3i;
#define glRasterPos3i glad_glRasterPos3i
GLAPI PFNGLRASTERPOS3DPROC glad_glRasterPos3d;
#define glRasterPos3d glad_glRasterPos3d
GLAPI PFNGLRASTERPOS3FPROC glad_glRasterPos3f;
#define glRasterPos3f glad_glRasterPos3f
GLAPI PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_glCompressedTexImage3D;
#define glCompressedTexImage3D glad_glCompressedTexImage3D
GLAPI PFNGLVERTEXATTRIB3FVPROC glad_glVertexAttrib3fv;
#define glVertexAttrib3fv glad_glVertexAttrib3fv
GLAPI PFNGLISLISTPROC glad_glIsList;
#define glIsList glad_glIsList
GLAPI PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_glMultiDrawElementsBaseVertex;
#define glMultiDrawElementsBaseVertex glad_glMultiDrawElementsBaseVertex
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_glCompressedTexSubImage1D;
#define glCompressedTexSubImage1D glad_glCompressedTexSubImage1D
GLAPI PFNGLGETTEXPARAMETERIIVPROC glad_glGetTexParameterIiv;
#define glGetTexParameterIiv glad_glGetTexParameterIiv
GLAPI PFNGLPROGRAMUNIFORM1DPROC glad_glProgramUniform1d;
#define glProgramUniform1d glad_glProgramUniform1d
GLAPI PFNGLRASTERPOS4FVPROC glad_glRasterPos4fv;
#define glRasterPos4fv glad_glRasterPos4fv
GLAPI PFNGLGETFLOATVPROC glad_glGetFloatv;
#define glGetFloatv glad_glGetFloatv
GLAPI PFNGLHINTPROC glad_glHint;
#define glHint glad_glHint
GLAPI PFNGLVERTEXATTRIBP2UIVPROC glad_glVertexAttribP2uiv;
#define glVertexAttribP2uiv glad_glVertexAttribP2uiv
GLAPI PFNGLSCALEFPROC glad_glScalef;
#define glScalef glad_glScalef
GLAPI PFNGLSCALEDPROC glad_glScaled;
#define glScaled glad_glScaled
GLAPI PFNGLDEPTHRANGEARRAYVPROC glad_glDepthRangeArrayv;
#define glDepthRangeArrayv glad_glDepthRangeArrayv
GLAPI PFNGLSTENCILOPSEPARATEPROC glad_glStencilOpSeparate;
#define glStencilOpSeparate glad_glStencilOpSeparate
GLAPI PFNGLVERTEXATTRIBL4DVPROC glad_glVertexAttribL4dv;
#define glVertexAttribL4dv glad_glVertexAttribL4dv
GLAPI PFNGLGETTEXPARAMETERIVPROC glad_glGetTexParameteriv;
#define glGetTexParameteriv glad_glGetTexParameteriv
GLAPI PFNGLPROGRAMUNIFORM1DVPROC glad_glProgramUniform1dv;
#define glProgramUniform1dv glad_glProgramUniform1dv
GLAPI PFNGLWINDOWPOS2DVPROC glad_glWindowPos2dv;
#define glWindowPos2dv glad_glWindowPos2dv
GLAPI PFNGLTEXCOORD3DPROC glad_glTexCoord3d;
#define glTexCoord3d glad_glTexCoord3d
GLAPI PFNGLDISABLEPROC glad_glDisable;
#define glDisable glad_glDisable
GLAPI PFNGLPROGRAMUNIFORM4UIVPROC glad_glProgramUniform4uiv;
#define glProgramUniform4uiv glad_glProgramUniform4uiv
GLAPI PFNGLRECTFVPROC glad_glRectfv;
#define glRectfv glad_glRectfv
GLAPI PFNGLGETLIGHTFVPROC glad_glGetLightfv;
#define glGetLightfv glad_glGetLightfv
GLAPI PFNGLMULTITEXCOORD3SPROC glad_glMultiTexCoord3s;
#define glMultiTexCoord3s glad_glMultiTexCoord3s
GLAPI PFNGLMULTITEXCOORD3FPROC glad_glMultiTexCoord3f;
#define glMultiTexCoord3f glad_glMultiTexCoord3f
GLAPI PFNGLFOGCOORDDVPROC glad_glFogCoorddv;
#define glFogCoorddv glad_glFogCoorddv
GLAPI PFNGLREADBUFFERPROC glad_glReadBuffer;
#define glReadBuffer glad_glReadBuffer
GLAPI PFNGLPUSHNAMEPROC glad_glPushName;
#define glPushName glad_glPushName
GLAPI PFNGLGETCLIPPLANEPROC glad_glGetClipPlane;
#define glGetClipPlane glad_glGetClipPlane
GLAPI PFNGLVERTEX4DVPROC glad_glVertex4dv;
#define glVertex4dv glad_glVertex4dv
GLAPI PFNGLVERTEXATTRIB3DPROC glad_glVertexAttrib3d;
#define glVertexAttrib3d glad_glVertexAttrib3d
GLAPI PFNGLBLENDCOLORPROC glad_glBlendColor;
#define glBlendColor glad_glBlendColor
GLAPI PFNGLSAMPLERPARAMETERIUIVPROC glad_glSamplerParameterIuiv;
#define glSamplerParameterIuiv glad_glSamplerParameterIuiv
GLAPI PFNGLINDEXUBVPROC glad_glIndexubv;
#define glIndexubv glad_glIndexubv
GLAPI PFNGLRASTERPOS4DPROC glad_glRasterPos4d;
#define glRasterPos4d glad_glRasterPos4d
GLAPI PFNGLRASTERPOS4FPROC glad_glRasterPos4f;
#define glRasterPos4f glad_glRasterPos4f
GLAPI PFNGLVERTEXATTRIB3SPROC glad_glVertexAttrib3s;
#define glVertexAttrib3s glad_glVertexAttrib3s
GLAPI PFNGLVERTEX3FVPROC glad_glVertex3fv;
#define glVertex3fv glad_glVertex3fv
GLAPI PFNGLRASTERPOS4SPROC glad_glRasterPos4s;
#define glRasterPos4s glad_glRasterPos4s
GLAPI PFNGLGETPROGRAMSTAGEIVPROC glad_glGetProgramStageiv;
#define glGetProgramStageiv glad_glGetProgramStageiv
GLAPI PFNGLPOPMATRIXPROC glad_glPopMatrix;
#define glPopMatrix glad_glPopMatrix
GLAPI PFNGLUNIFORM4IPROC glad_glUniform4i;
#define glUniform4i glad_glUniform4i
GLAPI PFNGLACTIVETEXTUREPROC glad_glActiveTexture;
#define glActiveTexture glad_glActiveTexture
GLAPI PFNGLENABLEVERTEXATTRIBARRAYPROC glad_glEnableVertexAttribArray;
#define glEnableVertexAttribArray glad_glEnableVertexAttribArray
GLAPI PFNGLUNIFORM4DPROC glad_glUniform4d;
#define glUniform4d glad_glUniform4d
GLAPI PFNGLUNIFORM4FPROC glad_glUniform4f;
#define glUniform4f glad_glUniform4f
GLAPI PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glRenderbufferStorageMultisample;
#define glRenderbufferStorageMultisample glad_glRenderbufferStorageMultisample
GLAPI PFNGLVERTEXATTRIBLPOINTERPROC glad_glVertexAttribLPointer;
#define glVertexAttribLPointer glad_glVertexAttribLPointer
GLAPI PFNGLMULTITEXCOORD3SVPROC glad_glMultiTexCoord3sv;
#define glMultiTexCoord3sv glad_glMultiTexCoord3sv
GLAPI PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_glDrawElementsInstancedBaseVertex;
#define glDrawElementsInstancedBaseVertex glad_glDrawElementsInstancedBaseVertex
GLAPI PFNGLGETACTIVESUBROUTINENAMEPROC glad_glGetActiveSubroutineName;
#define glGetActiveSubroutineName glad_glGetActiveSubroutineName
GLAPI PFNGLMULTITEXCOORD4IVPROC glad_glMultiTexCoord4iv;
#define glMultiTexCoord4iv glad_glMultiTexCoord4iv
GLAPI PFNGLTEXENVFVPROC glad_glTexEnvfv;
#define glTexEnvfv glad_glTexEnvfv
GLAPI PFNGLUNIFORMBLOCKBINDINGPROC glad_glUniformBlockBinding;
#define glUniformBlockBinding glad_glUniformBlockBinding
GLAPI PFNGLTEXCOORDPOINTERPROC glad_glTexCoordPointer;
#define glTexCoordPointer glad_glTexCoordPointer
GLAPI PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glad_glProgramUniformMatrix3x2fv;
#define glProgramUniformMatrix3x2fv glad_glProgramUniformMatrix3x2fv
GLAPI PFNGLVERTEXATTRIB4NUBVPROC glad_glVertexAttrib4Nubv;
#define glVertexAttrib4Nubv glad_glVertexAttrib4Nubv
GLAPI PFNGLGETQUERYINDEXEDIVPROC glad_glGetQueryIndexediv;
#define glGetQueryIndexediv glad_glGetQueryIndexediv
GLAPI PFNGLTEXENVIVPROC glad_glTexEnviv;
#define glTexEnviv glad_glTexEnviv
GLAPI PFNGLSELECTBUFFERPROC glad_glSelectBuffer;
#define glSelectBuffer glad_glSelectBuffer
GLAPI PFNGLBLENDFUNCPROC glad_glBlendFunc;
#define glBlendFunc glad_glBlendFunc
GLAPI PFNGLCREATEPROGRAMPROC glad_glCreateProgram;
#define glCreateProgram glad_glCreateProgram
GLAPI PFNGLPRIMITIVERESTARTINDEXPROC glad_glPrimitiveRestartIndex;
#define glPrimitiveRestartIndex glad_glPrimitiveRestartIndex
GLAPI PFNGLENDPROC glad_glEnd;
#define glEnd glad_glEnd
GLAPI PFNGLUNIFORM3UIVPROC glad_glUniform3uiv;
#define glUniform3uiv glad_glUniform3uiv
GLAPI PFNGLMULTTRANSPOSEMATRIXFPROC glad_glMultTransposeMatrixf;
#define glMultTransposeMatrixf glad_glMultTransposeMatrixf
GLAPI PFNGLMULTTRANSPOSEMATRIXDPROC glad_glMultTransposeMatrixd;
#define glMultTransposeMatrixd glad_glMultTransposeMatrixd
GLAPI PFNGLCLEARCOLORPROC glad_glClearColor;
#define glClearColor glad_glClearColor
GLAPI PFNGLUNIFORM3UIPROC glad_glUniform3ui;
#define glUniform3ui glad_glUniform3ui
GLAPI PFNGLSECONDARYCOLOR3USPROC glad_glSecondaryColor3us;
#define glSecondaryColor3us glad_glSecondaryColor3us
GLAPI PFNGLVERTEXATTRIBI4UIVPROC glad_glVertexAttribI4uiv;
#define glVertexAttribI4uiv glad_glVertexAttribI4uiv
GLAPI PFNGLVERTEXATTRIB4BVPROC glad_glVertexAttrib4bv;
#define glVertexAttrib4bv glad_glVertexAttrib4bv
GLAPI PFNGLSECONDARYCOLOR3UBPROC glad_glSecondaryColor3ub;
#define glSecondaryColor3ub glad_glSecondaryColor3ub
GLAPI PFNGLSECONDARYCOLOR3UIPROC glad_glSecondaryColor3ui;
#define glSecondaryColor3ui glad_glSecondaryColor3ui
GLAPI PFNGLVERTEXATTRIB1DPROC glad_glVertexAttrib1d;
#define glVertexAttrib1d glad_glVertexAttrib1d
GLAPI PFNGLUNIFORMMATRIX2X3FVPROC glad_glUniformMatrix2x3fv;
#define glUniformMatrix2x3fv glad_glUniformMatrix2x3fv
GLAPI PFNGLGENTRANSFORMFEEDBACKSPROC glad_glGenTransformFeedbacks;
#define glGenTransformFeedbacks glad_glGenTransformFeedbacks
GLAPI PFNGLGETVERTEXATTRIBIUIVPROC glad_glGetVertexAttribIuiv;
#define glGetVertexAttribIuiv glad_glGetVertexAttribIuiv
GLAPI PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_glCompressedTexSubImage2D;
#define glCompressedTexSubImage2D glad_glCompressedTexSubImage2D
GLAPI PFNGLPROGRAMBINARYPROC glad_glProgramBinary;
#define glProgramBinary glad_glProgramBinary
GLAPI PFNGLVERTEXATTRIBI4BVPROC glad_glVertexAttribI4bv;
#define glVertexAttribI4bv glad_glVertexAttribI4bv
GLAPI PFNGLGETTEXPARAMETERFVPROC glad_glGetTexParameterfv;
#define glGetTexParameterfv glad_glGetTexParameterfv
GLAPI PFNGLTEXPARAMETERIIVPROC glad_glTexParameterIiv;
#define glTexParameterIiv glad_glTexParameterIiv
GLAPI PFNGLENDTRANSFORMFEEDBACKPROC glad_glEndTransformFeedback;
#define glEndTransformFeedback glad_glEndTransformFeedback
GLAPI PFNGLVERTEXATTRIB4USVPROC glad_glVertexAttrib4usv;
#define glVertexAttrib4usv glad_glVertexAttrib4usv
GLAPI PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_glTexImage2DMultisample;
#define glTexImage2DMultisample glad_glTexImage2DMultisample
GLAPI PFNGLVERTEXATTRIBI1IVPROC glad_glVertexAttribI1iv;
#define glVertexAttribI1iv glad_glVertexAttribI1iv
GLAPI PFNGLVERTEXATTRIBDIVISORPROC glad_glVertexAttribDivisor;
#define glVertexAttribDivisor glad_glVertexAttribDivisor
GLAPI PFNGLUNIFORMMATRIX4X2FVPROC glad_glUniformMatrix4x2fv;
#define glUniformMatrix4x2fv glad_glUniformMatrix4x2fv
GLAPI PFNGLSECONDARYCOLOR3IVPROC glad_glSecondaryColor3iv;
#define glSecondaryColor3iv glad_glSecondaryColor3iv
GLAPI PFNGLGENLISTSPROC glad_glGenLists;
#define glGenLists glad_glGenLists
GLAPI PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glad_glProgramUniformMatrix4x2fv;
#define glProgramUniformMatrix4x2fv glad_glProgramUniformMatrix4x2fv
GLAPI PFNGLENDLISTPROC glad_glEndList;
#define glEndList glad_glEndList
GLAPI PFNGLVERTEXATTRIBI2IVPROC glad_glVertexAttribI2iv;
#define glVertexAttribI2iv glad_glVertexAttribI2iv
GLAPI PFNGLGETSHADERPRECISIONFORMATPROC glad_glGetShaderPrecisionFormat;
#define glGetShaderPrecisionFormat glad_glGetShaderPrecisionFormat
GLAPI PFNGLINDEXMASKPROC glad_glIndexMask;
#define glIndexMask glad_glIndexMask
GLAPI PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glad_glProgramUniformMatrix2x3dv;
#define glProgramUniformMatrix2x3dv glad_glProgramUniformMatrix2x3dv
GLAPI PFNGLSHADERSOURCEPROC glad_glShaderSource;
#define glShaderSource glad_glShaderSource
GLAPI PFNGLCOLOR3FVPROC glad_glColor3fv;
#define glColor3fv glad_glColor3fv
GLAPI PFNGLTEXCOORDP2UIVPROC glad_glTexCoordP2uiv;
#define glTexCoordP2uiv glad_glTexCoordP2uiv
GLAPI PFNGLUNIFORM2IPROC glad_glUniform2i;
#define glUniform2i glad_glUniform2i
GLAPI PFNGLUNIFORM2FPROC glad_glUniform2f;
#define glUniform2f glad_glUniform2f
GLAPI PFNGLMAPGRID2FPROC glad_glMapGrid2f;
#define glMapGrid2f glad_glMapGrid2f
GLAPI PFNGLROTATEDPROC glad_glRotated;
#define glRotated glad_glRotated
GLAPI PFNGLBUFFERDATAPROC glad_glBufferData;
#define glBufferData glad_glBufferData
GLAPI PFNGLGETVERTEXATTRIBIVPROC glad_glGetVertexAttribiv;
#define glGetVertexAttribiv glad_glGetVertexAttribiv
GLAPI PFNGLROTATEFPROC glad_glRotatef;
#define glRotatef glad_glRotatef
GLAPI PFNGLTEXCOORDP1UIPROC glad_glTexCoordP1ui;
#define glTexCoordP1ui glad_glTexCoordP1ui
GLAPI PFNGLMULTITEXCOORD2FVPROC glad_glMultiTexCoord2fv;
#define glMultiTexCoord2fv glad_glMultiTexCoord2fv
GLAPI PFNGLMULTITEXCOORD3IPROC glad_glMultiTexCoord3i;
#define glMultiTexCoord3i glad_glMultiTexCoord3i
GLAPI PFNGLVERTEXATTRIBI1IPROC glad_glVertexAttribI1i;
#define glVertexAttribI1i glad_glVertexAttribI1i
GLAPI PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_glFramebufferTextureLayer;
#define glFramebufferTextureLayer glad_glFramebufferTextureLayer
GLAPI PFNGLGETBUFFERPOINTERVPROC glad_glGetBufferPointerv;
#define glGetBufferPointerv glad_glGetBufferPointerv
GLAPI PFNGLFRAMEBUFFERTEXTURE3DPROC glad_glFramebufferTexture3D;
#define glFramebufferTexture3D glad_glFramebufferTexture3D
GLAPI PFNGLWINDOWPOS3DVPROC glad_glWindowPos3dv;
#define glWindowPos3dv glad_glWindowPos3dv
GLAPI PFNGLSAMPLERPARAMETERFVPROC glad_glSamplerParameterfv;
#define glSamplerParameterfv glad_glSamplerParameterfv
GLAPI PFNGLGETMATERIALIVPROC glad_glGetMaterialiv;
#define glGetMaterialiv glad_glGetMaterialiv
GLAPI PFNGLUNIFORM1FVPROC glad_glUniform1fv;
#define glUniform1fv glad_glUniform1fv
GLAPI PFNGLSCISSORINDEXEDVPROC glad_glScissorIndexedv;
#define glScissorIndexedv glad_glScissorIndexedv
GLAPI PFNGLVERTEX4FPROC glad_glVertex4f;
#define glVertex4f glad_glVertex4f
GLAPI PFNGLNORMAL3SPROC glad_glNormal3s;
#define glNormal3s glad_glNormal3s
GLAPI PFNGLNORMAL3IPROC glad_glNormal3i;
#define glNormal3i glad_glNormal3i
GLAPI PFNGLMULTITEXCOORD3DPROC glad_glMultiTexCoord3d;
#define glMultiTexCoord3d glad_glMultiTexCoord3d
GLAPI PFNGLNORMAL3FPROC glad_glNormal3f;
#define glNormal3f glad_glNormal3f
GLAPI PFNGLNORMAL3DPROC glad_glNormal3d;
#define glNormal3d glad_glNormal3d
GLAPI PFNGLNORMAL3BPROC glad_glNormal3b;
#define glNormal3b glad_glNormal3b
GLAPI PFNGLMULTITEXCOORD4DVPROC glad_glMultiTexCoord4dv;
#define glMultiTexCoord4dv glad_glMultiTexCoord4dv
GLAPI PFNGLVERTEXATTRIB2DPROC glad_glVertexAttrib2d;
#define glVertexAttrib2d glad_glVertexAttrib2d
GLAPI PFNGLVERTEXATTRIB2FPROC glad_glVertexAttrib2f;
#define glVertexAttrib2f glad_glVertexAttrib2f
GLAPI PFNGLVERTEXATTRIB3DVPROC glad_glVertexAttrib3dv;
#define glVertexAttrib3dv glad_glVertexAttrib3dv
GLAPI PFNGLMULTITEXCOORD4FVPROC glad_glMultiTexCoord4fv;
#define glMultiTexCoord4fv glad_glMultiTexCoord4fv
GLAPI PFNGLVERTEXATTRIB2SPROC glad_glVertexAttrib2s;
#define glVertexAttrib2s glad_glVertexAttrib2s
GLAPI PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_glTexImage3DMultisample;
#define glTexImage3DMultisample glad_glTexImage3DMultisample
GLAPI PFNGLGETUNIFORMBLOCKINDEXPROC glad_glGetUniformBlockIndex;
#define glGetUniformBlockIndex glad_glGetUniformBlockIndex
GLAPI PFNGLFRONTFACEPROC glad_glFrontFace;
#define glFrontFace glad_glFrontFace



typedef void* (* GLADloadproc)(const char *name, void* userptr);
typedef void* (* GLADsimpleloadproc)(const char *name);
GLAPI int gladLoadGL(GLADloadproc load, void* userptr);
GLAPI int gladLoadGLSimple(GLADsimpleloadproc load);



#ifdef GLAD_GL

GLAPI int gladLoadGLInternalLoader();

#endif
#ifdef __cplusplus
}
#endif
#endif
/* Source */
#ifdef GLAD_GL_IMPLEMENTATION
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


int GLAD_GL_VERSION_1_0;
int GLAD_GL_VERSION_1_1;
int GLAD_GL_VERSION_1_2;
int GLAD_GL_VERSION_1_3;
int GLAD_GL_VERSION_1_4;
int GLAD_GL_VERSION_1_5;
int GLAD_GL_VERSION_2_0;
int GLAD_GL_VERSION_2_1;
int GLAD_GL_VERSION_3_0;
int GLAD_GL_VERSION_3_1;
int GLAD_GL_VERSION_3_2;
int GLAD_GL_VERSION_3_3;
int GLAD_GL_VERSION_4_0;
int GLAD_GL_VERSION_4_1;



PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D;
PFNGLSTENCILMASKSEPARATEPROC glad_glStencilMaskSeparate;
PFNGLINDEXIPROC glad_glIndexi;
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_glCompressedTexSubImage3D;
PFNGLEVALCOORD2DPROC glad_glEvalCoord2d;
PFNGLEVALCOORD2FPROC glad_glEvalCoord2f;
PFNGLINDEXDPROC glad_glIndexd;
PFNGLINDEXFPROC glad_glIndexf;
PFNGLINDEXSPROC glad_glIndexs;
PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glad_glGetSubroutineUniformLocation;
PFNGLSECONDARYCOLOR3FVPROC glad_glSecondaryColor3fv;
PFNGLFOGFVPROC glad_glFogfv;
PFNGLVERTEXP4UIPROC glad_glVertexP4ui;
PFNGLVERTEX4IVPROC glad_glVertex4iv;
PFNGLVERTEXATTRIBP4UIPROC glad_glVertexAttribP4ui;
PFNGLISBUFFERPROC glad_glIsBuffer;
PFNGLGETMULTISAMPLEFVPROC glad_glGetMultisamplefv;
PFNGLMINSAMPLESHADINGPROC glad_glMinSampleShading;
PFNGLPOPATTRIBPROC glad_glPopAttrib;
PFNGLCOLORMATERIALPROC glad_glColorMaterial;
PFNGLCOLOR3BPROC glad_glColor3b;
PFNGLCOLOR3FPROC glad_glColor3f;
PFNGLCOLOR3DPROC glad_glColor3d;
PFNGLCOLOR3IPROC glad_glColor3i;
PFNGLVERTEXATTRIB4UBVPROC glad_glVertexAttrib4ubv;
PFNGLCOLOR3SPROC glad_glColor3s;
PFNGLMULTITEXCOORD1IVPROC glad_glMultiTexCoord1iv;
PFNGLMULTITEXCOORDP2UIPROC glad_glMultiTexCoordP2ui;
PFNGLVERTEXATTRIBL4DPROC glad_glVertexAttribL4d;
PFNGLVERTEX2IVPROC glad_glVertex2iv;
PFNGLUNIFORMMATRIX3DVPROC glad_glUniformMatrix3dv;
PFNGLTEXCOORDP3UIVPROC glad_glTexCoordP3uiv;
PFNGLRESUMETRANSFORMFEEDBACKPROC glad_glResumeTransformFeedback;
PFNGLFOGIPROC glad_glFogi;
PFNGLVERTEXPOINTERPROC glad_glVertexPointer;
PFNGLFOGFPROC glad_glFogf;
PFNGLMULTITEXCOORD1DPROC glad_glMultiTexCoord1d;
PFNGLMULTITEXCOORD1FPROC glad_glMultiTexCoord1f;
PFNGLVERTEXATTRIBI2IPROC glad_glVertexAttribI2i;
PFNGLMULTITEXCOORD1IPROC glad_glMultiTexCoord1i;
PFNGLMULTITEXCOORD1SPROC glad_glMultiTexCoord1s;
PFNGLSTENCILOPPROC glad_glStencilOp;
PFNGLFRAMEBUFFERTEXTURE2DPROC glad_glFramebufferTexture2D;
PFNGLTEXCOORD3SVPROC glad_glTexCoord3sv;
PFNGLGENFRAMEBUFFERSPROC glad_glGenFramebuffers;
PFNGLGETATTACHEDSHADERSPROC glad_glGetAttachedShaders;
PFNGLDELETEVERTEXARRAYSPROC glad_glDeleteVertexArrays;
PFNGLVIEWPORTARRAYVPROC glad_glViewportArrayv;
PFNGLMULTITEXCOORD2SPROC glad_glMultiTexCoord2s;
PFNGLCOLOR4FVPROC glad_glColor4fv;
PFNGLTEXCOORD2SVPROC glad_glTexCoord2sv;
PFNGLUNIFORM2DVPROC glad_glUniform2dv;
PFNGLGETPIXELMAPUIVPROC glad_glGetPixelMapuiv;
PFNGLGETUNIFORMFVPROC glad_glGetUniformfv;
PFNGLGETUNIFORMUIVPROC glad_glGetUniformuiv;
PFNGLFRUSTUMPROC glad_glFrustum;
PFNGLFENCESYNCPROC glad_glFenceSync;
PFNGLVERTEXATTRIB3SVPROC glad_glVertexAttrib3sv;
PFNGLVALIDATEPROGRAMPIPELINEPROC glad_glValidateProgramPipeline;
PFNGLGENSAMPLERSPROC glad_glGenSamplers;
PFNGLTEXCOORD4IVPROC glad_glTexCoord4iv;
PFNGLDRAWTRANSFORMFEEDBACKPROC glad_glDrawTransformFeedback;
PFNGLGETTEXPARAMETERIUIVPROC glad_glGetTexParameterIuiv;
PFNGLINDEXPOINTERPROC glad_glIndexPointer;
PFNGLVERTEXATTRIB4NBVPROC glad_glVertexAttrib4Nbv;
PFNGLISSYNCPROC glad_glIsSync;
PFNGLUNIFORMMATRIX2X3DVPROC glad_glUniformMatrix2x3dv;
PFNGLSECONDARYCOLOR3SVPROC glad_glSecondaryColor3sv;
PFNGLWINDOWPOS2IVPROC glad_glWindowPos2iv;
PFNGLFOGCOORDDPROC glad_glFogCoordd;
PFNGLPROGRAMUNIFORM1UIPROC glad_glProgramUniform1ui;
PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D;
PFNGLUNIFORM4UIVPROC glad_glUniform4uiv;
PFNGLSCISSORARRAYVPROC glad_glScissorArrayv;
PFNGLCALLLISTPROC glad_glCallList;
PFNGLMAPBUFFERPROC glad_glMapBuffer;
PFNGLSECONDARYCOLOR3DPROC glad_glSecondaryColor3d;
PFNGLSECONDARYCOLOR3FPROC glad_glSecondaryColor3f;
PFNGLDELETESYNCPROC glad_glDeleteSync;
PFNGLUNIFORM3IVPROC glad_glUniform3iv;
PFNGLPOLYGONMODEPROC glad_glPolygonMode;
PFNGLPROGRAMUNIFORM4IVPROC glad_glProgramUniform4iv;
PFNGLUSEPROGRAMPROC glad_glUseProgram;
PFNGLLINESTIPPLEPROC glad_glLineStipple;
PFNGLGETPROGRAMINFOLOGPROC glad_glGetProgramInfoLog;
PFNGLPIXELSTOREFPROC glad_glPixelStoref;
PFNGLSAMPLEMASKIPROC glad_glSampleMaski;
PFNGLDELETESHADERPROC glad_glDeleteShader;
PFNGLGETMAPDVPROC glad_glGetMapdv;
PFNGLUNIFORM2UIPROC glad_glUniform2ui;
PFNGLVERTEXATTRIBI3IPROC glad_glVertexAttribI3i;
PFNGLVERTEXATTRIBI4USVPROC glad_glVertexAttribI4usv;
PFNGLTEXPARAMETERFPROC glad_glTexParameterf;
PFNGLTEXPARAMETERIPROC glad_glTexParameteri;
PFNGLGETSHADERSOURCEPROC glad_glGetShaderSource;
PFNGLCOLOR4UBPROC glad_glColor4ub;
PFNGLCOLOR4UIPROC glad_glColor4ui;
PFNGLPROGRAMUNIFORM2UIPROC glad_glProgramUniform2ui;
PFNGLCOLOR4USPROC glad_glColor4us;
PFNGLVERTEXATTRIBP1UIVPROC glad_glVertexAttribP1uiv;
PFNGLLINKPROGRAMPROC glad_glLinkProgram;
PFNGLTEXCOORD2DVPROC glad_glTexCoord2dv;
PFNGLGETSTRINGPROC glad_glGetString;
PFNGLENDQUERYPROC glad_glEndQuery;
PFNGLSECONDARYCOLOR3UIVPROC glad_glSecondaryColor3uiv;
PFNGLEDGEFLAGPOINTERPROC glad_glEdgeFlagPointer;
PFNGLCOPYPIXELSPROC glad_glCopyPixels;
PFNGLVERTEXATTRIBI2UIPROC glad_glVertexAttribI2ui;
PFNGLRASTERPOS3SPROC glad_glRasterPos3s;
PFNGLDELETETEXTURESPROC glad_glDeleteTextures;
PFNGLVERTEXATTRIB4FPROC glad_glVertexAttrib4f;
PFNGLVERTEXATTRIB4DPROC glad_glVertexAttrib4d;
PFNGLVERTEXATTRIB4SPROC glad_glVertexAttrib4s;
PFNGLSAMPLERPARAMETERIPROC glad_glSamplerParameteri;
PFNGLSAMPLERPARAMETERFPROC glad_glSamplerParameterf;
PFNGLUNIFORM1FPROC glad_glUniform1f;
PFNGLUNIFORM1DPROC glad_glUniform1d;
PFNGLRENDERMODEPROC glad_glRenderMode;
PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_glGetCompressedTexImage;
PFNGLUNIFORM1IPROC glad_glUniform1i;
PFNGLGETTEXENVFVPROC glad_glGetTexEnvfv;
PFNGLCULLFACEPROC glad_glCullFace;
PFNGLPROGRAMUNIFORM4IPROC glad_glProgramUniform4i;
PFNGLPROGRAMUNIFORM4FPROC glad_glProgramUniform4f;
PFNGLVIEWPORTINDEXEDFPROC glad_glViewportIndexedf;
PFNGLPROGRAMUNIFORM4DPROC glad_glProgramUniform4d;
PFNGLGETSTRINGIPROC glad_glGetStringi;
PFNGLATTACHSHADERPROC glad_glAttachShader;
PFNGLQUERYCOUNTERPROC glad_glQueryCounter;
PFNGLFOGCOORDPOINTERPROC glad_glFogCoordPointer;
PFNGLSECONDARYCOLOR3DVPROC glad_glSecondaryColor3dv;
PFNGLVERTEXATTRIBI4SVPROC glad_glVertexAttribI4sv;
PFNGLGETBUFFERPARAMETERIVPROC glad_glGetBufferParameteriv;
PFNGLTEXPARAMETERIUIVPROC glad_glTexParameterIuiv;
PFNGLWINDOWPOS3FVPROC glad_glWindowPos3fv;
PFNGLLIGHTMODELFVPROC glad_glLightModelfv;
PFNGLPOINTPARAMETERFVPROC glad_glPointParameterfv;
PFNGLVERTEX4SPROC glad_glVertex4s;
PFNGLISTRANSFORMFEEDBACKPROC glad_glIsTransformFeedback;
PFNGLVERTEX4DPROC glad_glVertex4d;
PFNGLISPROGRAMPIPELINEPROC glad_glIsProgramPipeline;
PFNGLVERTEX4IPROC glad_glVertex4i;
PFNGLUNIFORMMATRIX3FVPROC glad_glUniformMatrix3fv;
PFNGLVERTEXATTRIBL2DVPROC glad_glVertexAttribL2dv;
PFNGLSECONDARYCOLORPOINTERPROC glad_glSecondaryColorPointer;
PFNGLALPHAFUNCPROC glad_glAlphaFunc;
PFNGLVERTEXATTRIBL2DPROC glad_glVertexAttribL2d;
PFNGLSTENCILFUNCPROC glad_glStencilFunc;
PFNGLTEXCOORD3DVPROC glad_glTexCoord3dv;
PFNGLGETPROGRAMPIPELINEIVPROC glad_glGetProgramPipelineiv;
PFNGLGETSHADERINFOLOGPROC glad_glGetShaderInfoLog;
PFNGLVERTEXATTRIBI4IPROC glad_glVertexAttribI4i;
PFNGLRASTERPOS2IVPROC glad_glRasterPos2iv;
PFNGLBLENDEQUATIONSEPARATEPROC glad_glBlendEquationSeparate;
PFNGLGETSUBROUTINEINDEXPROC glad_glGetSubroutineIndex;
PFNGLVERTEXATTRIB2SVPROC glad_glVertexAttrib2sv;
PFNGLPUSHATTRIBPROC glad_glPushAttrib;
PFNGLLIGHTIVPROC glad_glLightiv;
PFNGLDELETEBUFFERSPROC glad_glDeleteBuffers;
PFNGLBINDPROGRAMPIPELINEPROC glad_glBindProgramPipeline;
PFNGLSCISSORPROC glad_glScissor;
PFNGLGETBOOLEANVPROC glad_glGetBooleanv;
PFNGLMATERIALFVPROC glad_glMaterialfv;
PFNGLVERTEXATTRIBI2UIVPROC glad_glVertexAttribI2uiv;
PFNGLCOLOR4DVPROC glad_glColor4dv;
PFNGLUNIFORM2FVPROC glad_glUniform2fv;
PFNGLBINDBUFFERRANGEPROC glad_glBindBufferRange;
PFNGLNORMAL3IVPROC glad_glNormal3iv;
PFNGLVERTEXATTRIBL3DVPROC glad_glVertexAttribL3dv;
PFNGLGETUNIFORMDVPROC glad_glGetUniformdv;
PFNGLCOLOR3USPROC glad_glColor3us;
PFNGLMULTITEXCOORD4SPROC glad_glMultiTexCoord4s;
PFNGLTEXCOORD1IVPROC glad_glTexCoord1iv;
PFNGLCOLOR3UIVPROC glad_glColor3uiv;
PFNGLLISTBASEPROC glad_glListBase;
PFNGLCLIENTWAITSYNCPROC glad_glClientWaitSync;
PFNGLVERTEXATTRIB4NSVPROC glad_glVertexAttrib4Nsv;
PFNGLGETUNIFORMSUBROUTINEUIVPROC glad_glGetUniformSubroutineuiv;
PFNGLGETBOOLEANI_VPROC glad_glGetBooleani_v;
PFNGLISSAMPLERPROC glad_glIsSampler;
PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D;
PFNGLTEXCOORD1IPROC glad_glTexCoord1i;
PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_glCheckFramebufferStatus;
PFNGLTEXCOORD1DPROC glad_glTexCoord1d;
PFNGLTEXCOORD1FPROC glad_glTexCoord1f;
PFNGLVERTEXP3UIVPROC glad_glVertexP3uiv;
PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_glTransformFeedbackVaryings;
PFNGLDRAWRANGEELEMENTSPROC glad_glDrawRangeElements;
PFNGLTEXCOORD1SPROC glad_glTexCoord1s;
PFNGLBINDBUFFERBASEPROC glad_glBindBufferBase;
PFNGLCOLOR3BVPROC glad_glColor3bv;
PFNGLMULTIDRAWARRAYSPROC glad_glMultiDrawArrays;
PFNGLVERTEXATTRIBL1DPROC glad_glVertexAttribL1d;
PFNGLVERTEXATTRIBI3UIVPROC glad_glVertexAttribI3uiv;
PFNGLCLEARACCUMPROC glad_glClearAccum;
PFNGLBEGINQUERYPROC glad_glBeginQuery;
PFNGLBINDBUFFERPROC glad_glBindBuffer;
PFNGLMAP2DPROC glad_glMap2d;
PFNGLMAP2FPROC glad_glMap2f;
PFNGLUNIFORMMATRIX2X4FVPROC glad_glUniformMatrix2x4fv;
PFNGLDEPTHRANGEINDEXEDPROC glad_glDepthRangeIndexed;
PFNGLISENABLEDPROC glad_glIsEnabled;
PFNGLGETERRORPROC glad_glGetError;
PFNGLGETTEXENVIVPROC glad_glGetTexEnviv;
PFNGLEVALCOORD1DPROC glad_glEvalCoord1d;
PFNGLGETTEXLEVELPARAMETERFVPROC glad_glGetTexLevelParameterfv;
PFNGLEVALCOORD1FPROC glad_glEvalCoord1f;
PFNGLPIXELMAPFVPROC glad_glPixelMapfv;
PFNGLGETPIXELMAPUSVPROC glad_glGetPixelMapusv;
PFNGLACCUMPROC glad_glAccum;
PFNGLTEXCOORD2IVPROC glad_glTexCoord2iv;
PFNGLPROGRAMUNIFORM4UIPROC glad_glProgramUniform4ui;
PFNGLSTENCILMASKPROC glad_glStencilMask;
PFNGLRECTSVPROC glad_glRectsv;
PFNGLGETTEXGENIVPROC glad_glGetTexGeniv;
PFNGLPIXELSTOREIPROC glad_glPixelStorei;
PFNGLDEPTHMASKPROC glad_glDepthMask;
PFNGLPATCHPARAMETERFVPROC glad_glPatchParameterfv;
PFNGLVERTEXATTRIBI3UIPROC glad_glVertexAttribI3ui;
PFNGLPROGRAMPARAMETERIPROC glad_glProgramParameteri;
PFNGLGETMAPFVPROC glad_glGetMapfv;
PFNGLRASTERPOS2FVPROC glad_glRasterPos2fv;
PFNGLRECTDPROC glad_glRectd;
PFNGLWINDOWPOS2SVPROC glad_glWindowPos2sv;
PFNGLCREATESHADERPROC glad_glCreateShader;
PFNGLGENRENDERBUFFERSPROC glad_glGenRenderbuffers;
PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D;
PFNGLBLENDFUNCSEPARATEPROC glad_glBlendFuncSeparate;
PFNGLTEXCOORD2FVPROC glad_glTexCoord2fv;
PFNGLRECTSPROC glad_glRects;
PFNGLTEXCOORD4FVPROC glad_glTexCoord4fv;
PFNGLPOINTSIZEPROC glad_glPointSize;
PFNGLGETPROGRAMPIPELINEINFOLOGPROC glad_glGetProgramPipelineInfoLog;
PFNGLVERTEXATTRIB4NUIVPROC glad_glVertexAttrib4Nuiv;
PFNGLRENDERBUFFERSTORAGEPROC glad_glRenderbufferStorage;
PFNGLWAITSYNCPROC glad_glWaitSync;
PFNGLUNIFORM3IPROC glad_glUniform3i;
PFNGLBLENDEQUATIONSEPARATEIPROC glad_glBlendEquationSeparatei;
PFNGLUNIFORM3DPROC glad_glUniform3d;
PFNGLUNIFORM3FPROC glad_glUniform3f;
PFNGLGETFRAGDATAINDEXPROC glad_glGetFragDataIndex;
PFNGLCOLOR3SVPROC glad_glColor3sv;
PFNGLVERTEX4SVPROC glad_glVertex4sv;
PFNGLDELETEFRAMEBUFFERSPROC glad_glDeleteFramebuffers;
PFNGLDRAWARRAYSPROC glad_glDrawArrays;
PFNGLCLEARPROC glad_glClear;
PFNGLVERTEXATTRIBP2UIPROC glad_glVertexAttribP2ui;
PFNGLTRANSLATEFPROC glad_glTranslatef;
PFNGLVERTEXATTRIB4NUBPROC glad_glVertexAttrib4Nub;
PFNGLTRANSLATEDPROC glad_glTranslated;
PFNGLSAMPLERPARAMETERIIVPROC glad_glSamplerParameterIiv;
PFNGLTEXIMAGE1DPROC glad_glTexImage1D;
PFNGLSECONDARYCOLOR3BVPROC glad_glSecondaryColor3bv;
PFNGLGETQUERYOBJECTI64VPROC glad_glGetQueryObjecti64v;
PFNGLISRENDERBUFFERPROC glad_glIsRenderbuffer;
PFNGLVERTEX3IVPROC glad_glVertex3iv;
PFNGLTEXGENFVPROC glad_glTexGenfv;
PFNGLMATERIALIPROC glad_glMateriali;
PFNGLISVERTEXARRAYPROC glad_glIsVertexArray;
PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_glDisableVertexAttribArray;
PFNGLVERTEX3DVPROC glad_glVertex3dv;
PFNGLMATERIALFPROC glad_glMaterialf;
PFNGLVERTEXATTRIBI4UBVPROC glad_glVertexAttribI4ubv;
PFNGLPOLYGONOFFSETPROC glad_glPolygonOffset;
PFNGLGETVERTEXATTRIBIIVPROC glad_glGetVertexAttribIiv;
PFNGLPATCHPARAMETERIPROC glad_glPatchParameteri;
PFNGLMAP1DPROC glad_glMap1d;
PFNGLMAP1FPROC glad_glMap1f;
PFNGLRASTERPOS3SVPROC glad_glRasterPos3sv;
PFNGLLIGHTIPROC glad_glLighti;
PFNGLLIGHTFPROC glad_glLightf;
PFNGLSTENCILFUNCSEPARATEPROC glad_glStencilFuncSeparate;
PFNGLMAPGRID2DPROC glad_glMapGrid2d;
PFNGLUNIFORM2DPROC glad_glUniform2d;
PFNGLVERTEXATTRIBP3UIPROC glad_glVertexAttribP3ui;
PFNGLPROGRAMUNIFORM2FVPROC glad_glProgramUniform2fv;
PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glad_glProgramUniformMatrix2x4dv;
PFNGLTEXENVFPROC glad_glTexEnvf;
PFNGLGETINTEGER64I_VPROC glad_glGetInteger64i_v;
PFNGLTEXENVIPROC glad_glTexEnvi;
PFNGLBLITFRAMEBUFFERPROC glad_glBlitFramebuffer;
PFNGLISENABLEDIPROC glad_glIsEnabledi;
PFNGLGETPOINTERVPROC glad_glGetPointerv;
PFNGLGETMAPIVPROC glad_glGetMapiv;
PFNGLMULTITEXCOORD4SVPROC glad_glMultiTexCoord4sv;
PFNGLPROGRAMUNIFORMMATRIX3FVPROC glad_glProgramUniformMatrix3fv;
PFNGLBINDFRAGDATALOCATIONPROC glad_glBindFragDataLocation;
PFNGLSECONDARYCOLOR3UBVPROC glad_glSecondaryColor3ubv;
PFNGLMULTITEXCOORD3IVPROC glad_glMultiTexCoord3iv;
PFNGLLIGHTMODELFPROC glad_glLightModelf;
PFNGLLIGHTMODELIPROC glad_glLightModeli;
PFNGLWINDOWPOS3IVPROC glad_glWindowPos3iv;
PFNGLMULTITEXCOORDP1UIVPROC glad_glMultiTexCoordP1uiv;
PFNGLCALLLISTSPROC glad_glCallLists;
PFNGLTEXCOORD3IPROC glad_glTexCoord3i;
PFNGLTEXCOORD3FPROC glad_glTexCoord3f;
PFNGLCOPYTEXSUBIMAGE3DPROC glad_glCopyTexSubImage3D;
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_glGetActiveUniformBlockName;
PFNGLTEXCOORD3SPROC glad_glTexCoord3s;
PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_glGetActiveUniformBlockiv;
PFNGLARETEXTURESRESIDENTPROC glad_glAreTexturesResident;
PFNGLRASTERPOS4SVPROC glad_glRasterPos4sv;
PFNGLCOLOR4SPROC glad_glColor4s;
PFNGLBINDVERTEXARRAYPROC glad_glBindVertexArray;
PFNGLCOLOR4BPROC glad_glColor4b;
PFNGLCOLOR4FPROC glad_glColor4f;
PFNGLCOLOR4DPROC glad_glColor4d;
PFNGLCOLOR4IPROC glad_glColor4i;
PFNGLDRAWELEMENTSINSTANCEDPROC glad_glDrawElementsInstanced;
PFNGLVERTEX2DVPROC glad_glVertex2dv;
PFNGLUNIFORMMATRIX2X4DVPROC glad_glUniformMatrix2x4dv;
PFNGLVIEWPORTPROC glad_glViewport;
PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glad_glGetActiveSubroutineUniformiv;
PFNGLTEXBUFFERPROC glad_glTexBuffer;
PFNGLARRAYELEMENTPROC glad_glArrayElement;
PFNGLVALIDATEPROGRAMPROC glad_glValidateProgram;
PFNGLACTIVESHADERPROGRAMPROC glad_glActiveShaderProgram;
PFNGLEVALCOORD1DVPROC glad_glEvalCoord1dv;
PFNGLMULTITEXCOORDP2UIVPROC glad_glMultiTexCoordP2uiv;
PFNGLRECTIPROC glad_glRecti;
PFNGLRECTFPROC glad_glRectf;
PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_glGetRenderbufferParameteriv;
PFNGLTEXSUBIMAGE1DPROC glad_glTexSubImage1D;
PFNGLBINDTEXTUREPROC glad_glBindTexture;
PFNGLDETACHSHADERPROC glad_glDetachShader;
PFNGLUNIFORMMATRIX3X4DVPROC glad_glUniformMatrix3x4dv;
PFNGLVIEWPORTINDEXEDFVPROC glad_glViewportIndexedfv;
PFNGLDRAWELEMENTSBASEVERTEXPROC glad_glDrawElementsBaseVertex;
PFNGLSAMPLECOVERAGEPROC glad_glSampleCoverage;
PFNGLGETUNIFORMIVPROC glad_glGetUniformiv;
PFNGLUNIFORM4UIPROC glad_glUniform4ui;
PFNGLBINDFRAMEBUFFERPROC glad_glBindFramebuffer;
PFNGLTEXGENFPROC glad_glTexGenf;
PFNGLTEXGENDPROC glad_glTexGend;
PFNGLTEXGENIPROC glad_glTexGeni;
PFNGLSCISSORINDEXEDPROC glad_glScissorIndexed;
PFNGLRASTERPOS2DVPROC glad_glRasterPos2dv;
PFNGLCREATESHADERPROGRAMVPROC glad_glCreateShaderProgramv;
PFNGLGETQUERYOBJECTIVPROC glad_glGetQueryObjectiv;
PFNGLGENERATEMIPMAPPROC glad_glGenerateMipmap;
PFNGLDELETELISTSPROC glad_glDeleteLists;
PFNGLTEXCOORD2DPROC glad_glTexCoord2d;
PFNGLPOINTPARAMETERIPROC glad_glPointParameteri;
PFNGLTEXCOORD2FPROC glad_glTexCoord2f;
PFNGLCOLOR4IVPROC glad_glColor4iv;
PFNGLUNMAPBUFFERPROC glad_glUnmapBuffer;
PFNGLTEXCOORD2IPROC glad_glTexCoord2i;
PFNGLPOINTPARAMETERFPROC glad_glPointParameterf;
PFNGLTEXCOORD2SPROC glad_glTexCoord2s;
PFNGLVERTEXATTRIBP4UIVPROC glad_glVertexAttribP4uiv;
PFNGLNORMAL3DVPROC glad_glNormal3dv;
PFNGLRELEASESHADERCOMPILERPROC glad_glReleaseShaderCompiler;
PFNGLSECONDARYCOLOR3SPROC glad_glSecondaryColor3s;
PFNGLTEXCOORD1DVPROC glad_glTexCoord1dv;
PFNGLREADPIXELSPROC glad_glReadPixels;
PFNGLVERTEXATTRIBI3IVPROC glad_glVertexAttribI3iv;
PFNGLSHADEMODELPROC glad_glShadeModel;
PFNGLMAPGRID1DPROC glad_glMapGrid1d;
PFNGLMAPGRID1FPROC glad_glMapGrid1f;
PFNGLRECTIVPROC glad_glRectiv;
PFNGLCOLORP4UIPROC glad_glColorP4ui;
PFNGLRASTERPOS3DVPROC glad_glRasterPos3dv;
PFNGLCLEARBUFFERUIVPROC glad_glClearBufferuiv;
PFNGLNORMALP3UIPROC glad_glNormalP3ui;
PFNGLVERTEXATTRIBI4IVPROC glad_glVertexAttribI4iv;
PFNGLCOLOR4UBVPROC glad_glColor4ubv;
PFNGLGETBUFFERSUBDATAPROC glad_glGetBufferSubData;
PFNGLGETVERTEXATTRIBLDVPROC glad_glGetVertexAttribLdv;
PFNGLTEXCOORDP1UIVPROC glad_glTexCoordP1uiv;
PFNGLTEXIMAGE3DPROC glad_glTexImage3D;
PFNGLISFRAMEBUFFERPROC glad_glIsFramebuffer;
PFNGLTEXCOORDP4UIVPROC glad_glTexCoordP4uiv;
PFNGLTEXGENDVPROC glad_glTexGendv;
PFNGLVERTEXP2UIVPROC glad_glVertexP2uiv;
PFNGLVERTEXATTRIB3FPROC glad_glVertexAttrib3f;
PFNGLGETBUFFERPARAMETERI64VPROC glad_glGetBufferParameteri64v;
PFNGLPROGRAMUNIFORM4DVPROC glad_glProgramUniform4dv;
PFNGLMULTITEXCOORDP4UIPROC glad_glMultiTexCoordP4ui;
PFNGLPROGRAMUNIFORM3UIVPROC glad_glProgramUniform3uiv;
PFNGLVERTEXATTRIB4NUSVPROC glad_glVertexAttrib4Nusv;
PFNGLCOLORMASKPROC glad_glColorMask;
PFNGLBLENDFUNCIPROC glad_glBlendFunci;
PFNGLGETUNIFORMLOCATIONPROC glad_glGetUniformLocation;
PFNGLTEXCOORD4DVPROC glad_glTexCoord4dv;
PFNGLUNIFORM4FVPROC glad_glUniform4fv;
PFNGLENDCONDITIONALRENDERPROC glad_glEndConditionalRender;
PFNGLENABLECLIENTSTATEPROC glad_glEnableClientState;
PFNGLMULTITEXCOORD2SVPROC glad_glMultiTexCoord2sv;
PFNGLPROGRAMUNIFORM2UIVPROC glad_glProgramUniform2uiv;
PFNGLGETQUERYOBJECTUIVPROC glad_glGetQueryObjectuiv;
PFNGLVERTEXATTRIB4IVPROC glad_glVertexAttrib4iv;
PFNGLPROGRAMUNIFORM1UIVPROC glad_glProgramUniform1uiv;
PFNGLGETTEXGENDVPROC glad_glGetTexGendv;
PFNGLVERTEXATTRIBL1DVPROC glad_glVertexAttribL1dv;
PFNGLCOLOR3USVPROC glad_glColor3usv;
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glad_glProgramUniformMatrix2x4fv;
PFNGLPROGRAMUNIFORM2DVPROC glad_glProgramUniform2dv;
PFNGLRASTERPOS2SVPROC glad_glRasterPos2sv;
PFNGLUNIFORMMATRIX2FVPROC glad_glUniformMatrix2fv;
PFNGLTEXCOORD1SVPROC glad_glTexCoord1sv;
PFNGLNEWLISTPROC glad_glNewList;
PFNGLSECONDARYCOLORP3UIVPROC glad_glSecondaryColorP3uiv;
PFNGLGETINTEGERVPROC glad_glGetIntegerv;
PFNGLPROGRAMUNIFORMMATRIX3DVPROC glad_glProgramUniformMatrix3dv;
PFNGLVERTEX2SPROC glad_glVertex2s;
PFNGLISQUERYPROC glad_glIsQuery;
PFNGLTEXIMAGE2DPROC glad_glTexImage2D;
PFNGLDRAWPIXELSPROC glad_glDrawPixels;
PFNGLMULTMATRIXDPROC glad_glMultMatrixd;
PFNGLMULTMATRIXFPROC glad_glMultMatrixf;
PFNGLCOLOR4USVPROC glad_glColor4usv;
PFNGLPOLYGONSTIPPLEPROC glad_glPolygonStipple;
PFNGLINTERLEAVEDARRAYSPROC glad_glInterleavedArrays;
PFNGLPIXELMAPUSVPROC glad_glPixelMapusv;
PFNGLGETSAMPLERPARAMETERIVPROC glad_glGetSamplerParameteriv;
PFNGLCOPYBUFFERSUBDATAPROC glad_glCopyBufferSubData;
PFNGLVERTEXATTRIBI1UIVPROC glad_glVertexAttribI1uiv;
PFNGLGETACTIVEUNIFORMPROC glad_glGetActiveUniform;
PFNGLCOLORPOINTERPROC glad_glColorPointer;
PFNGLVERTEXATTRIBL3DPROC glad_glVertexAttribL3d;
PFNGLPROGRAMUNIFORMMATRIX4FVPROC glad_glProgramUniformMatrix4fv;
PFNGLVERTEX2FVPROC glad_glVertex2fv;
PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_glFramebufferRenderbuffer;
PFNGLGETDOUBLEI_VPROC glad_glGetDoublei_v;
PFNGLVERTEXATTRIB1SVPROC glad_glVertexAttrib1sv;
PFNGLBINDSAMPLERPROC glad_glBindSampler;
PFNGLLINEWIDTHPROC glad_glLineWidth;
PFNGLGETINTEGERI_VPROC glad_glGetIntegeri_v;
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_glGetTransformFeedbackVarying;
PFNGLFOGIVPROC glad_glFogiv;
PFNGLLIGHTMODELIVPROC glad_glLightModeliv;
PFNGLDEPTHRANGEFPROC glad_glDepthRangef;
PFNGLGETPIXELMAPFVPROC glad_glGetPixelMapfv;
PFNGLENABLEIPROC glad_glEnablei;
PFNGLEVALCOORD1FVPROC glad_glEvalCoord1fv;
PFNGLPROGRAMUNIFORMMATRIX2DVPROC glad_glProgramUniformMatrix2dv;
PFNGLUNIFORMMATRIX3X2FVPROC glad_glUniformMatrix3x2fv;
PFNGLVERTEXATTRIB2DVPROC glad_glVertexAttrib2dv;
PFNGLUNIFORMMATRIX3X4FVPROC glad_glUniformMatrix3x4fv;
PFNGLUSEPROGRAMSTAGESPROC glad_glUseProgramStages;
PFNGLEDGEFLAGPROC glad_glEdgeFlag;
PFNGLFOGCOORDFPROC glad_glFogCoordf;
PFNGLVERTEX3DPROC glad_glVertex3d;
PFNGLVERTEX3FPROC glad_glVertex3f;
PFNGLVERTEX3IPROC glad_glVertex3i;
PFNGLVERTEX3SPROC glad_glVertex3s;
PFNGLTEXCOORDP2UIPROC glad_glTexCoordP2ui;
PFNGLCOLORMASKIPROC glad_glColorMaski;
PFNGLRASTERPOS4IPROC glad_glRasterPos4i;
PFNGLNORMALPOINTERPROC glad_glNormalPointer;
PFNGLPASSTHROUGHPROC glad_glPassThrough;
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glad_glProgramUniformMatrix4x3fv;
PFNGLBEGINPROC glad_glBegin;
PFNGLEVALCOORD2DVPROC glad_glEvalCoord2dv;
PFNGLCOLOR3UBVPROC glad_glColor3ubv;
PFNGLVERTEXP3UIPROC glad_glVertexP3ui;
PFNGLLIGHTFVPROC glad_glLightfv;
PFNGLGETACTIVEUNIFORMNAMEPROC glad_glGetActiveUniformName;
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetFramebufferAttachmentParameteriv;
PFNGLTEXPARAMETERIVPROC glad_glTexParameteriv;
PFNGLGETTEXIMAGEPROC glad_glGetTexImage;
PFNGLINDEXSVPROC glad_glIndexsv;
PFNGLBITMAPPROC glad_glBitmap;
PFNGLPROGRAMUNIFORM2IVPROC glad_glProgramUniform2iv;
PFNGLGETQUERYIVPROC glad_glGetQueryiv;
PFNGLTEXCOORD4FPROC glad_glTexCoord4f;
PFNGLTEXCOORD4DPROC glad_glTexCoord4d;
PFNGLGETSAMPLERPARAMETERFVPROC glad_glGetSamplerParameterfv;
PFNGLTEXCOORD4IPROC glad_glTexCoord4i;
PFNGLTEXCOORD4SPROC glad_glTexCoord4s;
PFNGLGETUNIFORMINDICESPROC glad_glGetUniformIndices;
PFNGLPOINTPARAMETERIVPROC glad_glPointParameteriv;
PFNGLNORMAL3FVPROC glad_glNormal3fv;
PFNGLTEXCOORD1FVPROC glad_glTexCoord1fv;
PFNGLMULTITEXCOORD1DVPROC glad_glMultiTexCoord1dv;
PFNGLTEXCOORD3FVPROC glad_glTexCoord3fv;
PFNGLSECONDARYCOLOR3USVPROC glad_glSecondaryColor3usv;
PFNGLMULTITEXCOORDP3UIVPROC glad_glMultiTexCoordP3uiv;
PFNGLDEPTHRANGEPROC glad_glDepthRange;
PFNGLDRAWBUFFERPROC glad_glDrawBuffer;
PFNGLRASTERPOS3FVPROC glad_glRasterPos3fv;
PFNGLCLEARINDEXPROC glad_glClearIndex;
PFNGLFLUSHPROC glad_glFlush;
PFNGLGETTEXLEVELPARAMETERIVPROC glad_glGetTexLevelParameteriv;
PFNGLCLAMPCOLORPROC glad_glClampColor;
PFNGLCLEARSTENCILPROC glad_glClearStencil;
PFNGLMULTITEXCOORD3FVPROC glad_glMultiTexCoord3fv;
PFNGLVERTEX2FPROC glad_glVertex2f;
PFNGLVERTEX2DPROC glad_glVertex2d;
PFNGLBEGINQUERYINDEXEDPROC glad_glBeginQueryIndexed;
PFNGLVERTEX2IPROC glad_glVertex2i;
PFNGLPROGRAMUNIFORM4FVPROC glad_glProgramUniform4fv;
PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_glFlushMappedBufferRange;
PFNGLGENQUERIESPROC glad_glGenQueries;
PFNGLTEXSUBIMAGE3DPROC glad_glTexSubImage3D;
PFNGLDELETESAMPLERSPROC glad_glDeleteSamplers;
PFNGLSECONDARYCOLORP3UIPROC glad_glSecondaryColorP3ui;
PFNGLMATRIXMODEPROC glad_glMatrixMode;
PFNGLPRIORITIZETEXTURESPROC glad_glPrioritizeTextures;
PFNGLGETDOUBLEVPROC glad_glGetDoublev;
PFNGLUNIFORM4DVPROC glad_glUniform4dv;
PFNGLVERTEXATTRIB1FPROC glad_glVertexAttrib1f;
PFNGLUNIFORM3FVPROC glad_glUniform3fv;
PFNGLMULTITEXCOORDP1UIPROC glad_glMultiTexCoordP1ui;
PFNGLGENBUFFERSPROC glad_glGenBuffers;
PFNGLUNIFORMMATRIX4DVPROC glad_glUniformMatrix4dv;
PFNGLMULTIDRAWELEMENTSPROC glad_glMultiDrawElements;
PFNGLGETTEXGENFVPROC glad_glGetTexGenfv;
PFNGLMULTITEXCOORD2IVPROC glad_glMultiTexCoord2iv;
PFNGLRASTERPOS3IVPROC glad_glRasterPos3iv;
PFNGLVERTEXP2UIPROC glad_glVertexP2ui;
PFNGLSECONDARYCOLOR3BPROC glad_glSecondaryColor3b;
PFNGLTEXCOORD4SVPROC glad_glTexCoord4sv;
PFNGLUNIFORM2UIVPROC glad_glUniform2uiv;
PFNGLFINISHPROC glad_glFinish;
PFNGLSECONDARYCOLOR3IPROC glad_glSecondaryColor3i;
PFNGLUNIFORM1UIVPROC glad_glUniform1uiv;
PFNGLUNIFORMMATRIX2DVPROC glad_glUniformMatrix2dv;
PFNGLINDEXDVPROC glad_glIndexdv;
PFNGLTEXCOORD3IVPROC glad_glTexCoord3iv;
PFNGLCLEARDEPTHPROC glad_glClearDepth;
PFNGLUNIFORMMATRIX4X2DVPROC glad_glUniformMatrix4x2dv;
PFNGLNORMAL3SVPROC glad_glNormal3sv;
PFNGLRASTERPOS4IVPROC glad_glRasterPos4iv;
PFNGLEDGEFLAGVPROC glad_glEdgeFlagv;
PFNGLDELETEPROGRAMPROC glad_glDeleteProgram;
PFNGLUNIFORMMATRIX4X3DVPROC glad_glUniformMatrix4x3dv;
PFNGLNORMALP3UIVPROC glad_glNormalP3uiv;
PFNGLINITNAMESPROC glad_glInitNames;
PFNGLCOLOR3DVPROC glad_glColor3dv;
PFNGLGETVERTEXATTRIBFVPROC glad_glGetVertexAttribfv;
PFNGLGETACTIVEATTRIBPROC glad_glGetActiveAttrib;
PFNGLTEXSUBIMAGE2DPROC glad_glTexSubImage2D;
PFNGLCLEARBUFFERFVPROC glad_glClearBufferfv;
PFNGLLOGICOPPROC glad_glLogicOp;
PFNGLPIXELTRANSFERFPROC glad_glPixelTransferf;
PFNGLPROGRAMUNIFORMMATRIX4DVPROC glad_glProgramUniformMatrix4dv;
PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glad_glDrawTransformFeedbackStream;
PFNGLPROVOKINGVERTEXPROC glad_glProvokingVertex;
PFNGLSHADERBINARYPROC glad_glShaderBinary;
PFNGLTEXGENIVPROC glad_glTexGeniv;
PFNGLDRAWELEMENTSPROC glad_glDrawElements;
PFNGLCLIENTACTIVETEXTUREPROC glad_glClientActiveTexture;
PFNGLUNIFORM1IVPROC glad_glUniform1iv;
PFNGLDRAWARRAYSINSTANCEDPROC glad_glDrawArraysInstanced;
PFNGLPROGRAMUNIFORMMATRIX2FVPROC glad_glProgramUniformMatrix2fv;
PFNGLSAMPLERPARAMETERIVPROC glad_glSamplerParameteriv;
PFNGLVERTEXATTRIB4UIVPROC glad_glVertexAttrib4uiv;
PFNGLENDQUERYINDEXEDPROC glad_glEndQueryIndexed;
PFNGLPROGRAMUNIFORM3DVPROC glad_glProgramUniform3dv;
PFNGLPROGRAMUNIFORM1IVPROC glad_glProgramUniform1iv;
PFNGLBINDRENDERBUFFERPROC glad_glBindRenderbuffer;
PFNGLMATERIALIVPROC glad_glMaterialiv;
PFNGLISPROGRAMPROC glad_glIsProgram;
PFNGLUNIFORMMATRIX3X2DVPROC glad_glUniformMatrix3x2dv;
PFNGLVERTEXATTRIB4FVPROC glad_glVertexAttrib4fv;
PFNGLPUSHCLIENTATTRIBPROC glad_glPushClientAttrib;
PFNGLVERTEXATTRIB2FVPROC glad_glVertexAttrib2fv;
PFNGLBINDTRANSFORMFEEDBACKPROC glad_glBindTransformFeedback;
PFNGLDISABLECLIENTSTATEPROC glad_glDisableClientState;
PFNGLCOLOR4UIVPROC glad_glColor4uiv;
PFNGLPROGRAMUNIFORM3IPROC glad_glProgramUniform3i;
PFNGLEVALMESH2PROC glad_glEvalMesh2;
PFNGLEVALMESH1PROC glad_glEvalMesh1;
PFNGLPROGRAMUNIFORM3FPROC glad_glProgramUniform3f;
PFNGLGETSAMPLERPARAMETERIIVPROC glad_glGetSamplerParameterIiv;
PFNGLPROGRAMUNIFORM3DPROC glad_glProgramUniform3d;
PFNGLEVALCOORD2FVPROC glad_glEvalCoord2fv;
PFNGLLOADTRANSPOSEMATRIXDPROC glad_glLoadTransposeMatrixd;
PFNGLLOADTRANSPOSEMATRIXFPROC glad_glLoadTransposeMatrixf;
PFNGLVERTEXATTRIBI1UIPROC glad_glVertexAttribI1ui;
PFNGLGETINTEGER64VPROC glad_glGetInteger64v;
PFNGLCLIPPLANEPROC glad_glClipPlane;
PFNGLINDEXUBPROC glad_glIndexub;
PFNGLVERTEXATTRIB4NIVPROC glad_glVertexAttrib4Niv;
PFNGLCLEARBUFFERIVPROC glad_glClearBufferiv;
PFNGLCOLORP4UIVPROC glad_glColorP4uiv;
PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glad_glGetActiveSubroutineUniformName;
PFNGLMULTITEXCOORD1FVPROC glad_glMultiTexCoord1fv;
PFNGLGETSAMPLERPARAMETERIUIVPROC glad_glGetSamplerParameterIuiv;
PFNGLTEXCOORDP3UIPROC glad_glTexCoordP3ui;
PFNGLWINDOWPOS3SPROC glad_glWindowPos3s;
PFNGLCLEARDEPTHFPROC glad_glClearDepthf;
PFNGLWINDOWPOS3IPROC glad_glWindowPos3i;
PFNGLWINDOWPOS3DPROC glad_glWindowPos3d;
PFNGLWINDOWPOS3FPROC glad_glWindowPos3f;
PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glad_glProgramUniformMatrix4x3dv;
PFNGLMAPBUFFERRANGEPROC glad_glMapBufferRange;
PFNGLMULTITEXCOORD4FPROC glad_glMultiTexCoord4f;
PFNGLCOLOR3UBPROC glad_glColor3ub;
PFNGLMULTITEXCOORD4DPROC glad_glMultiTexCoord4d;
PFNGLCOLOR3UIPROC glad_glColor3ui;
PFNGLMULTITEXCOORD4IPROC glad_glMultiTexCoord4i;
PFNGLGETPOLYGONSTIPPLEPROC glad_glGetPolygonStipple;
PFNGLVERTEXATTRIBI4UIPROC glad_glVertexAttribI4ui;
PFNGLDEPTHFUNCPROC glad_glDepthFunc;
PFNGLBLENDEQUATIONPROC glad_glBlendEquation;
PFNGLMULTITEXCOORD3DVPROC glad_glMultiTexCoord3dv;
PFNGLCOLOR4SVPROC glad_glColor4sv;
PFNGLPOPCLIENTATTRIBPROC glad_glPopClientAttrib;
PFNGLCOLOR3IVPROC glad_glColor3iv;
PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_glCompressedTexImage1D;
PFNGLDELETETRANSFORMFEEDBACKSPROC glad_glDeleteTransformFeedbacks;
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_glDrawRangeElementsBaseVertex;
PFNGLBINDATTRIBLOCATIONPROC glad_glBindAttribLocation;
PFNGLVERTEXATTRIB1DVPROC glad_glVertexAttrib1dv;
PFNGLBUFFERSUBDATAPROC glad_glBufferSubData;
PFNGLGETLIGHTIVPROC glad_glGetLightiv;
PFNGLBLENDFUNCSEPARATEIPROC glad_glBlendFuncSeparatei;
PFNGLVERTEXP4UIVPROC glad_glVertexP4uiv;
PFNGLWINDOWPOS2FVPROC glad_glWindowPos2fv;
PFNGLDISABLEIPROC glad_glDisablei;
PFNGLGETSYNCIVPROC glad_glGetSynciv;
PFNGLPROGRAMUNIFORM2IPROC glad_glProgramUniform2i;
PFNGLPROGRAMUNIFORM2DPROC glad_glProgramUniform2d;
PFNGLPROGRAMUNIFORM2FPROC glad_glProgramUniform2f;
PFNGLGETPROGRAMBINARYPROC glad_glGetProgramBinary;
PFNGLEVALPOINT1PROC glad_glEvalPoint1;
PFNGLEVALPOINT2PROC glad_glEvalPoint2;
PFNGLPAUSETRANSFORMFEEDBACKPROC glad_glPauseTransformFeedback;
PFNGLVERTEXATTRIBP3UIVPROC glad_glVertexAttribP3uiv;
PFNGLRASTERPOS4DVPROC glad_glRasterPos4dv;
PFNGLVERTEXATTRIB4SVPROC glad_glVertexAttrib4sv;
PFNGLLOADNAMEPROC glad_glLoadName;
PFNGLLOADMATRIXFPROC glad_glLoadMatrixf;
PFNGLLOADMATRIXDPROC glad_glLoadMatrixd;
PFNGLTEXPARAMETERFVPROC glad_glTexParameterfv;
PFNGLUNIFORM3DVPROC glad_glUniform3dv;
PFNGLPROGRAMUNIFORM3FVPROC glad_glProgramUniform3fv;
PFNGLPOPNAMEPROC glad_glPopName;
PFNGLDRAWELEMENTSINDIRECTPROC glad_glDrawElementsIndirect;
PFNGLGETQUERYOBJECTUI64VPROC glad_glGetQueryObjectui64v;
PFNGLPROGRAMUNIFORM1FVPROC glad_glProgramUniform1fv;
PFNGLUNIFORMMATRIX4FVPROC glad_glUniformMatrix4fv;
PFNGLDELETEPROGRAMPIPELINESPROC glad_glDeleteProgramPipelines;
PFNGLGENPROGRAMPIPELINESPROC glad_glGenProgramPipelines;
PFNGLWINDOWPOS2SPROC glad_glWindowPos2s;
PFNGLWINDOWPOS2IPROC glad_glWindowPos2i;
PFNGLWINDOWPOS2FPROC glad_glWindowPos2f;
PFNGLWINDOWPOS2DPROC glad_glWindowPos2d;
PFNGLUNIFORMSUBROUTINESUIVPROC glad_glUniformSubroutinesuiv;
PFNGLRECTDVPROC glad_glRectdv;
PFNGLCOLORP3UIVPROC glad_glColorP3uiv;
PFNGLFOGCOORDFVPROC glad_glFogCoordfv;
PFNGLCOMPILESHADERPROC glad_glCompileShader;
PFNGLINDEXFVPROC glad_glIndexfv;
PFNGLVERTEXATTRIBIPOINTERPROC glad_glVertexAttribIPointer;
PFNGLMULTITEXCOORDP3UIPROC glad_glMultiTexCoordP3ui;
PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_glCompressedTexImage2D;
PFNGLVERTEX4FVPROC glad_glVertex4fv;
PFNGLDRAWBUFFERSPROC glad_glDrawBuffers;
PFNGLVERTEXATTRIB1SPROC glad_glVertexAttrib1s;
PFNGLMULTITEXCOORD1SVPROC glad_glMultiTexCoord1sv;
PFNGLRASTERPOS2SPROC glad_glRasterPos2s;
PFNGLCOLOR4BVPROC glad_glColor4bv;
PFNGLRASTERPOS2FPROC glad_glRasterPos2f;
PFNGLRASTERPOS2DPROC glad_glRasterPos2d;
PFNGLLOADIDENTITYPROC glad_glLoadIdentity;
PFNGLRASTERPOS2IPROC glad_glRasterPos2i;
PFNGLUNIFORMMATRIX4X3FVPROC glad_glUniformMatrix4x3fv;
PFNGLCLEARBUFFERFIPROC glad_glClearBufferfi;
PFNGLDRAWARRAYSINDIRECTPROC glad_glDrawArraysIndirect;
PFNGLGENVERTEXARRAYSPROC glad_glGenVertexArrays;
PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glad_glProgramUniformMatrix3x2dv;
PFNGLGETVERTEXATTRIBDVPROC glad_glGetVertexAttribdv;
PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glad_glProgramUniformMatrix3x4dv;
PFNGLUNIFORM1UIPROC glad_glUniform1ui;
PFNGLGETFRAGDATALOCATIONPROC glad_glGetFragDataLocation;
PFNGLGETMATERIALFVPROC glad_glGetMaterialfv;
PFNGLPIXELMAPUIVPROC glad_glPixelMapuiv;
PFNGLFRAMEBUFFERTEXTUREPROC glad_glFramebufferTexture;
PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glad_glProgramUniformMatrix4x2dv;
PFNGLISSHADERPROC glad_glIsShader;
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glad_glProgramUniformMatrix2x3fv;
PFNGLGETACTIVEUNIFORMSIVPROC glad_glGetActiveUniformsiv;
PFNGLDELETEQUERIESPROC glad_glDeleteQueries;
PFNGLBLENDEQUATIONIPROC glad_glBlendEquationi;
PFNGLGETATTRIBLOCATIONPROC glad_glGetAttribLocation;
PFNGLVERTEXATTRIB4DVPROC glad_glVertexAttrib4dv;
PFNGLPROGRAMUNIFORM3UIPROC glad_glProgramUniform3ui;
PFNGLENABLEPROC glad_glEnable;
PFNGLPUSHMATRIXPROC glad_glPushMatrix;
PFNGLORTHOPROC glad_glOrtho;
PFNGLWINDOWPOS3SVPROC glad_glWindowPos3sv;
PFNGLPROGRAMUNIFORM1IPROC glad_glProgramUniform1i;
PFNGLPROGRAMUNIFORM1FPROC glad_glProgramUniform1f;
PFNGLBEGINTRANSFORMFEEDBACKPROC glad_glBeginTransformFeedback;
PFNGLPROGRAMUNIFORM3IVPROC glad_glProgramUniform3iv;
PFNGLINDEXIVPROC glad_glIndexiv;
PFNGLGETVERTEXATTRIBPOINTERVPROC glad_glGetVertexAttribPointerv;
PFNGLPIXELZOOMPROC glad_glPixelZoom;
PFNGLCOLORP3UIPROC glad_glColorP3ui;
PFNGLBEGINCONDITIONALRENDERPROC glad_glBeginConditionalRender;
PFNGLMULTITEXCOORDP4UIVPROC glad_glMultiTexCoordP4uiv;
PFNGLUNIFORM4IVPROC glad_glUniform4iv;
PFNGLGENTEXTURESPROC glad_glGenTextures;
PFNGLISTEXTUREPROC glad_glIsTexture;
PFNGLDELETERENDERBUFFERSPROC glad_glDeleteRenderbuffers;
PFNGLVERTEXATTRIBPOINTERPROC glad_glVertexAttribPointer;
PFNGLNORMAL3BVPROC glad_glNormal3bv;
PFNGLGETFLOATI_VPROC glad_glGetFloati_v;
PFNGLVERTEX3SVPROC glad_glVertex3sv;
PFNGLVERTEXATTRIBP1UIPROC glad_glVertexAttribP1ui;
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_glBindFragDataLocationIndexed;
PFNGLTEXCOORDP4UIPROC glad_glTexCoordP4ui;
PFNGLMULTITEXCOORD2DVPROC glad_glMultiTexCoord2dv;
PFNGLUNIFORM2IVPROC glad_glUniform2iv;
PFNGLFEEDBACKBUFFERPROC glad_glFeedbackBuffer;
PFNGLMULTITEXCOORD2IPROC glad_glMultiTexCoord2i;
PFNGLFRAMEBUFFERTEXTURE1DPROC glad_glFramebufferTexture1D;
PFNGLGETSHADERIVPROC glad_glGetShaderiv;
PFNGLMULTITEXCOORD2DPROC glad_glMultiTexCoord2d;
PFNGLMULTITEXCOORD2FPROC glad_glMultiTexCoord2f;
PFNGLUNIFORM1DVPROC glad_glUniform1dv;
PFNGLPIXELTRANSFERIPROC glad_glPixelTransferi;
PFNGLVERTEXATTRIB1FVPROC glad_glVertexAttrib1fv;
PFNGLVERTEX2SVPROC glad_glVertex2sv;
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glad_glProgramUniformMatrix3x4fv;
PFNGLGETPROGRAMIVPROC glad_glGetProgramiv;
PFNGLRASTERPOS3IPROC glad_glRasterPos3i;
PFNGLRASTERPOS3DPROC glad_glRasterPos3d;
PFNGLRASTERPOS3FPROC glad_glRasterPos3f;
PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_glCompressedTexImage3D;
PFNGLVERTEXATTRIB3FVPROC glad_glVertexAttrib3fv;
PFNGLISLISTPROC glad_glIsList;
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_glMultiDrawElementsBaseVertex;
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_glCompressedTexSubImage1D;
PFNGLGETTEXPARAMETERIIVPROC glad_glGetTexParameterIiv;
PFNGLPROGRAMUNIFORM1DPROC glad_glProgramUniform1d;
PFNGLRASTERPOS4FVPROC glad_glRasterPos4fv;
PFNGLGETFLOATVPROC glad_glGetFloatv;
PFNGLHINTPROC glad_glHint;
PFNGLVERTEXATTRIBP2UIVPROC glad_glVertexAttribP2uiv;
PFNGLSCALEFPROC glad_glScalef;
PFNGLSCALEDPROC glad_glScaled;
PFNGLDEPTHRANGEARRAYVPROC glad_glDepthRangeArrayv;
PFNGLSTENCILOPSEPARATEPROC glad_glStencilOpSeparate;
PFNGLVERTEXATTRIBL4DVPROC glad_glVertexAttribL4dv;
PFNGLGETTEXPARAMETERIVPROC glad_glGetTexParameteriv;
PFNGLPROGRAMUNIFORM1DVPROC glad_glProgramUniform1dv;
PFNGLWINDOWPOS2DVPROC glad_glWindowPos2dv;
PFNGLTEXCOORD3DPROC glad_glTexCoord3d;
PFNGLDISABLEPROC glad_glDisable;
PFNGLPROGRAMUNIFORM4UIVPROC glad_glProgramUniform4uiv;
PFNGLRECTFVPROC glad_glRectfv;
PFNGLGETLIGHTFVPROC glad_glGetLightfv;
PFNGLMULTITEXCOORD3SPROC glad_glMultiTexCoord3s;
PFNGLMULTITEXCOORD3FPROC glad_glMultiTexCoord3f;
PFNGLFOGCOORDDVPROC glad_glFogCoorddv;
PFNGLREADBUFFERPROC glad_glReadBuffer;
PFNGLPUSHNAMEPROC glad_glPushName;
PFNGLGETCLIPPLANEPROC glad_glGetClipPlane;
PFNGLVERTEX4DVPROC glad_glVertex4dv;
PFNGLVERTEXATTRIB3DPROC glad_glVertexAttrib3d;
PFNGLBLENDCOLORPROC glad_glBlendColor;
PFNGLSAMPLERPARAMETERIUIVPROC glad_glSamplerParameterIuiv;
PFNGLINDEXUBVPROC glad_glIndexubv;
PFNGLRASTERPOS4DPROC glad_glRasterPos4d;
PFNGLRASTERPOS4FPROC glad_glRasterPos4f;
PFNGLVERTEXATTRIB3SPROC glad_glVertexAttrib3s;
PFNGLVERTEX3FVPROC glad_glVertex3fv;
PFNGLRASTERPOS4SPROC glad_glRasterPos4s;
PFNGLGETPROGRAMSTAGEIVPROC glad_glGetProgramStageiv;
PFNGLPOPMATRIXPROC glad_glPopMatrix;
PFNGLUNIFORM4IPROC glad_glUniform4i;
PFNGLACTIVETEXTUREPROC glad_glActiveTexture;
PFNGLENABLEVERTEXATTRIBARRAYPROC glad_glEnableVertexAttribArray;
PFNGLUNIFORM4DPROC glad_glUniform4d;
PFNGLUNIFORM4FPROC glad_glUniform4f;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glRenderbufferStorageMultisample;
PFNGLVERTEXATTRIBLPOINTERPROC glad_glVertexAttribLPointer;
PFNGLMULTITEXCOORD3SVPROC glad_glMultiTexCoord3sv;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_glDrawElementsInstancedBaseVertex;
PFNGLGETACTIVESUBROUTINENAMEPROC glad_glGetActiveSubroutineName;
PFNGLMULTITEXCOORD4IVPROC glad_glMultiTexCoord4iv;
PFNGLTEXENVFVPROC glad_glTexEnvfv;
PFNGLUNIFORMBLOCKBINDINGPROC glad_glUniformBlockBinding;
PFNGLTEXCOORDPOINTERPROC glad_glTexCoordPointer;
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glad_glProgramUniformMatrix3x2fv;
PFNGLVERTEXATTRIB4NUBVPROC glad_glVertexAttrib4Nubv;
PFNGLGETQUERYINDEXEDIVPROC glad_glGetQueryIndexediv;
PFNGLTEXENVIVPROC glad_glTexEnviv;
PFNGLSELECTBUFFERPROC glad_glSelectBuffer;
PFNGLBLENDFUNCPROC glad_glBlendFunc;
PFNGLCREATEPROGRAMPROC glad_glCreateProgram;
PFNGLPRIMITIVERESTARTINDEXPROC glad_glPrimitiveRestartIndex;
PFNGLENDPROC glad_glEnd;
PFNGLUNIFORM3UIVPROC glad_glUniform3uiv;
PFNGLMULTTRANSPOSEMATRIXFPROC glad_glMultTransposeMatrixf;
PFNGLMULTTRANSPOSEMATRIXDPROC glad_glMultTransposeMatrixd;
PFNGLCLEARCOLORPROC glad_glClearColor;
PFNGLUNIFORM3UIPROC glad_glUniform3ui;
PFNGLSECONDARYCOLOR3USPROC glad_glSecondaryColor3us;
PFNGLVERTEXATTRIBI4UIVPROC glad_glVertexAttribI4uiv;
PFNGLVERTEXATTRIB4BVPROC glad_glVertexAttrib4bv;
PFNGLSECONDARYCOLOR3UBPROC glad_glSecondaryColor3ub;
PFNGLSECONDARYCOLOR3UIPROC glad_glSecondaryColor3ui;
PFNGLVERTEXATTRIB1DPROC glad_glVertexAttrib1d;
PFNGLUNIFORMMATRIX2X3FVPROC glad_glUniformMatrix2x3fv;
PFNGLGENTRANSFORMFEEDBACKSPROC glad_glGenTransformFeedbacks;
PFNGLGETVERTEXATTRIBIUIVPROC glad_glGetVertexAttribIuiv;
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_glCompressedTexSubImage2D;
PFNGLPROGRAMBINARYPROC glad_glProgramBinary;
PFNGLVERTEXATTRIBI4BVPROC glad_glVertexAttribI4bv;
PFNGLGETTEXPARAMETERFVPROC glad_glGetTexParameterfv;
PFNGLTEXPARAMETERIIVPROC glad_glTexParameterIiv;
PFNGLENDTRANSFORMFEEDBACKPROC glad_glEndTransformFeedback;
PFNGLVERTEXATTRIB4USVPROC glad_glVertexAttrib4usv;
PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_glTexImage2DMultisample;
PFNGLVERTEXATTRIBI1IVPROC glad_glVertexAttribI1iv;
PFNGLVERTEXATTRIBDIVISORPROC glad_glVertexAttribDivisor;
PFNGLUNIFORMMATRIX4X2FVPROC glad_glUniformMatrix4x2fv;
PFNGLSECONDARYCOLOR3IVPROC glad_glSecondaryColor3iv;
PFNGLGENLISTSPROC glad_glGenLists;
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glad_glProgramUniformMatrix4x2fv;
PFNGLENDLISTPROC glad_glEndList;
PFNGLVERTEXATTRIBI2IVPROC glad_glVertexAttribI2iv;
PFNGLGETSHADERPRECISIONFORMATPROC glad_glGetShaderPrecisionFormat;
PFNGLINDEXMASKPROC glad_glIndexMask;
PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glad_glProgramUniformMatrix2x3dv;
PFNGLSHADERSOURCEPROC glad_glShaderSource;
PFNGLCOLOR3FVPROC glad_glColor3fv;
PFNGLTEXCOORDP2UIVPROC glad_glTexCoordP2uiv;
PFNGLUNIFORM2IPROC glad_glUniform2i;
PFNGLUNIFORM2FPROC glad_glUniform2f;
PFNGLMAPGRID2FPROC glad_glMapGrid2f;
PFNGLROTATEDPROC glad_glRotated;
PFNGLBUFFERDATAPROC glad_glBufferData;
PFNGLGETVERTEXATTRIBIVPROC glad_glGetVertexAttribiv;
PFNGLROTATEFPROC glad_glRotatef;
PFNGLTEXCOORDP1UIPROC glad_glTexCoordP1ui;
PFNGLMULTITEXCOORD2FVPROC glad_glMultiTexCoord2fv;
PFNGLMULTITEXCOORD3IPROC glad_glMultiTexCoord3i;
PFNGLVERTEXATTRIBI1IPROC glad_glVertexAttribI1i;
PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_glFramebufferTextureLayer;
PFNGLGETBUFFERPOINTERVPROC glad_glGetBufferPointerv;
PFNGLFRAMEBUFFERTEXTURE3DPROC glad_glFramebufferTexture3D;
PFNGLWINDOWPOS3DVPROC glad_glWindowPos3dv;
PFNGLSAMPLERPARAMETERFVPROC glad_glSamplerParameterfv;
PFNGLGETMATERIALIVPROC glad_glGetMaterialiv;
PFNGLUNIFORM1FVPROC glad_glUniform1fv;
PFNGLSCISSORINDEXEDVPROC glad_glScissorIndexedv;
PFNGLVERTEX4FPROC glad_glVertex4f;
PFNGLNORMAL3SPROC glad_glNormal3s;
PFNGLNORMAL3IPROC glad_glNormal3i;
PFNGLMULTITEXCOORD3DPROC glad_glMultiTexCoord3d;
PFNGLNORMAL3FPROC glad_glNormal3f;
PFNGLNORMAL3DPROC glad_glNormal3d;
PFNGLNORMAL3BPROC glad_glNormal3b;
PFNGLMULTITEXCOORD4DVPROC glad_glMultiTexCoord4dv;
PFNGLVERTEXATTRIB2DPROC glad_glVertexAttrib2d;
PFNGLVERTEXATTRIB2FPROC glad_glVertexAttrib2f;
PFNGLVERTEXATTRIB3DVPROC glad_glVertexAttrib3dv;
PFNGLMULTITEXCOORD4FVPROC glad_glMultiTexCoord4fv;
PFNGLVERTEXATTRIB2SPROC glad_glVertexAttrib2s;
PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_glTexImage3DMultisample;
PFNGLGETUNIFORMBLOCKINDEXPROC glad_glGetUniformBlockIndex;
PFNGLFRONTFACEPROC glad_glFrontFace;


static void load_GL_VERSION_1_0(GLADloadproc load, void* userptr) {
    if(!GLAD_GL_VERSION_1_0) return;
    glad_glVertex4dv = (PFNGLVERTEX4DVPROC)load("glVertex4dv", userptr);
    glad_glFlush = (PFNGLFLUSHPROC)load("glFlush", userptr);
    glad_glRecti = (PFNGLRECTIPROC)load("glRecti", userptr);
    glad_glClearColor = (PFNGLCLEARCOLORPROC)load("glClearColor", userptr);
    glad_glIndexiv = (PFNGLINDEXIVPROC)load("glIndexiv", userptr);
    glad_glPolygonStipple = (PFNGLPOLYGONSTIPPLEPROC)load("glPolygonStipple", userptr);
    glad_glRectd = (PFNGLRECTDPROC)load("glRectd", userptr);
    glad_glRectf = (PFNGLRECTFPROC)load("glRectf", userptr);
    glad_glColor4ui = (PFNGLCOLOR4UIPROC)load("glColor4ui", userptr);
    glad_glNormal3sv = (PFNGLNORMAL3SVPROC)load("glNormal3sv", userptr);
    glad_glGetFloatv = (PFNGLGETFLOATVPROC)load("glGetFloatv", userptr);
    glad_glColor4us = (PFNGLCOLOR4USPROC)load("glColor4us", userptr);
    glad_glPopAttrib = (PFNGLPOPATTRIBPROC)load("glPopAttrib", userptr);
    glad_glRotatef = (PFNGLROTATEFPROC)load("glRotatef", userptr);
    glad_glHint = (PFNGLHINTPROC)load("glHint", userptr);
    glad_glRects = (PFNGLRECTSPROC)load("glRects", userptr);
    glad_glTexCoord4sv = (PFNGLTEXCOORD4SVPROC)load("glTexCoord4sv", userptr);
    glad_glTexCoord2dv = (PFNGLTEXCOORD2DVPROC)load("glTexCoord2dv", userptr);
    glad_glColor4ub = (PFNGLCOLOR4UBPROC)load("glColor4ub", userptr);
    glad_glIndexi = (PFNGLINDEXIPROC)load("glIndexi", userptr);
    glad_glGetString = (PFNGLGETSTRINGPROC)load("glGetString", userptr);
    glad_glEdgeFlagv = (PFNGLEDGEFLAGVPROC)load("glEdgeFlagv", userptr);
    glad_glColor4dv = (PFNGLCOLOR4DVPROC)load("glColor4dv", userptr);
    glad_glEvalCoord2d = (PFNGLEVALCOORD2DPROC)load("glEvalCoord2d", userptr);
    glad_glFogi = (PFNGLFOGIPROC)load("glFogi", userptr);
    glad_glEvalCoord2f = (PFNGLEVALCOORD2FPROC)load("glEvalCoord2f", userptr);
    glad_glIndexd = (PFNGLINDEXDPROC)load("glIndexd", userptr);
    glad_glIndexf = (PFNGLINDEXFPROC)load("glIndexf", userptr);
    glad_glGetTexLevelParameteriv = (PFNGLGETTEXLEVELPARAMETERIVPROC)load("glGetTexLevelParameteriv", userptr);
    glad_glLineWidth = (PFNGLLINEWIDTHPROC)load("glLineWidth", userptr);
    glad_glEvalCoord2dv = (PFNGLEVALCOORD2DVPROC)load("glEvalCoord2dv", userptr);
    glad_glLighti = (PFNGLLIGHTIPROC)load("glLighti", userptr);
    glad_glAlphaFunc = (PFNGLALPHAFUNCPROC)load("glAlphaFunc", userptr);
    glad_glCopyPixels = (PFNGLCOPYPIXELSPROC)load("glCopyPixels", userptr);
    glad_glIndexs = (PFNGLINDEXSPROC)load("glIndexs", userptr);
    glad_glLightf = (PFNGLLIGHTFPROC)load("glLightf", userptr);
    glad_glTexCoord3dv = (PFNGLTEXCOORD3DVPROC)load("glTexCoord3dv", userptr);
    glad_glSelectBuffer = (PFNGLSELECTBUFFERPROC)load("glSelectBuffer", userptr);
    glad_glPixelMapuiv = (PFNGLPIXELMAPUIVPROC)load("glPixelMapuiv", userptr);
    glad_glMultMatrixf = (PFNGLMULTMATRIXFPROC)load("glMultMatrixf", userptr);
    glad_glPolygonMode = (PFNGLPOLYGONMODEPROC)load("glPolygonMode", userptr);
    glad_glTexCoord3f = (PFNGLTEXCOORD3FPROC)load("glTexCoord3f", userptr);
    glad_glNormal3iv = (PFNGLNORMAL3IVPROC)load("glNormal3iv", userptr);
    glad_glIndexfv = (PFNGLINDEXFVPROC)load("glIndexfv", userptr);
    glad_glGetMapiv = (PFNGLGETMAPIVPROC)load("glGetMapiv", userptr);
    glad_glFogiv = (PFNGLFOGIVPROC)load("glFogiv", userptr);
    glad_glInitNames = (PFNGLINITNAMESPROC)load("glInitNames", userptr);
    glad_glRasterPos2fv = (PFNGLRASTERPOS2FVPROC)load("glRasterPos2fv", userptr);
    glad_glColor3dv = (PFNGLCOLOR3DVPROC)load("glColor3dv", userptr);
    glad_glPopName = (PFNGLPOPNAMEPROC)load("glPopName", userptr);
    glad_glPixelMapfv = (PFNGLPIXELMAPFVPROC)load("glPixelMapfv", userptr);
    glad_glGetTexParameteriv = (PFNGLGETTEXPARAMETERIVPROC)load("glGetTexParameteriv", userptr);
    glad_glClearStencil = (PFNGLCLEARSTENCILPROC)load("glClearStencil", userptr);
    glad_glRasterPos2i = (PFNGLRASTERPOS2IPROC)load("glRasterPos2i", userptr);
    glad_glFogfv = (PFNGLFOGFVPROC)load("glFogfv", userptr);
    glad_glColor3us = (PFNGLCOLOR3USPROC)load("glColor3us", userptr);
    glad_glColor3uiv = (PFNGLCOLOR3UIVPROC)load("glColor3uiv", userptr);
    glad_glRotated = (PFNGLROTATEDPROC)load("glRotated", userptr);
    glad_glPixelZoom = (PFNGLPIXELZOOMPROC)load("glPixelZoom", userptr);
    glad_glGetLightiv = (PFNGLGETLIGHTIVPROC)load("glGetLightiv", userptr);
    glad_glTexCoord4iv = (PFNGLTEXCOORD4IVPROC)load("glTexCoord4iv", userptr);
    glad_glVertex4iv = (PFNGLVERTEX4IVPROC)load("glVertex4iv", userptr);
    glad_glDepthFunc = (PFNGLDEPTHFUNCPROC)load("glDepthFunc", userptr);
    glad_glPushAttrib = (PFNGLPUSHATTRIBPROC)load("glPushAttrib", userptr);
    glad_glListBase = (PFNGLLISTBASEPROC)load("glListBase", userptr);
    glad_glColor3ub = (PFNGLCOLOR3UBPROC)load("glColor3ub", userptr);
    glad_glRenderMode = (PFNGLRENDERMODEPROC)load("glRenderMode", userptr);
    glad_glEvalCoord1fv = (PFNGLEVALCOORD1FVPROC)load("glEvalCoord1fv", userptr);
    glad_glGetPixelMapusv = (PFNGLGETPIXELMAPUSVPROC)load("glGetPixelMapusv", userptr);
    glad_glGetTexParameterfv = (PFNGLGETTEXPARAMETERFVPROC)load("glGetTexParameterfv", userptr);
    glad_glColor3ui = (PFNGLCOLOR3UIPROC)load("glColor3ui", userptr);
    glad_glGetMaterialfv = (PFNGLGETMATERIALFVPROC)load("glGetMaterialfv", userptr);
    glad_glRectsv = (PFNGLRECTSVPROC)load("glRectsv", userptr);
    glad_glTexCoord3fv = (PFNGLTEXCOORD3FVPROC)load("glTexCoord3fv", userptr);
    glad_glAccum = (PFNGLACCUMPROC)load("glAccum", userptr);
    glad_glVertex2f = (PFNGLVERTEX2FPROC)load("glVertex2f", userptr);
    glad_glVertex2d = (PFNGLVERTEX2DPROC)load("glVertex2d", userptr);
    glad_glGetPolygonStipple = (PFNGLGETPOLYGONSTIPPLEPROC)load("glGetPolygonStipple", userptr);
    glad_glDisable = (PFNGLDISABLEPROC)load("glDisable", userptr);
    glad_glMapGrid2d = (PFNGLMAPGRID2DPROC)load("glMapGrid2d", userptr);
    glad_glLogicOp = (PFNGLLOGICOPPROC)load("glLogicOp", userptr);
    glad_glVertex4fv = (PFNGLVERTEX4FVPROC)load("glVertex4fv", userptr);
    glad_glPixelTransferf = (PFNGLPIXELTRANSFERFPROC)load("glPixelTransferf", userptr);
    glad_glVertex2i = (PFNGLVERTEX2IPROC)load("glVertex2i", userptr);
    glad_glColorMask = (PFNGLCOLORMASKPROC)load("glColorMask", userptr);
    glad_glTexGendv = (PFNGLTEXGENDVPROC)load("glTexGendv", userptr);
    glad_glGetMapdv = (PFNGLGETMAPDVPROC)load("glGetMapdv", userptr);
    glad_glVertex2s = (PFNGLVERTEX2SPROC)load("glVertex2s", userptr);
    glad_glTexCoord2fv = (PFNGLTEXCOORD2FVPROC)load("glTexCoord2fv", userptr);
    glad_glNormal3bv = (PFNGLNORMAL3BVPROC)load("glNormal3bv", userptr);
    glad_glVertex3d = (PFNGLVERTEX3DPROC)load("glVertex3d", userptr);
    glad_glTexCoord4fv = (PFNGLTEXCOORD4FVPROC)load("glTexCoord4fv", userptr);
    glad_glTexCoord4dv = (PFNGLTEXCOORD4DVPROC)load("glTexCoord4dv", userptr);
    glad_glGetTexEnvfv = (PFNGLGETTEXENVFVPROC)load("glGetTexEnvfv", userptr);
    glad_glRectfv = (PFNGLRECTFVPROC)load("glRectfv", userptr);
    glad_glCullFace = (PFNGLCULLFACEPROC)load("glCullFace", userptr);
    glad_glEvalMesh2 = (PFNGLEVALMESH2PROC)load("glEvalMesh2", userptr);
    glad_glVertex3f = (PFNGLVERTEX3FPROC)load("glVertex3f", userptr);
    glad_glColor4sv = (PFNGLCOLOR4SVPROC)load("glColor4sv", userptr);
    glad_glVertex2fv = (PFNGLVERTEX2FVPROC)load("glVertex2fv", userptr);
    glad_glTexGeni = (PFNGLTEXGENIPROC)load("glTexGeni", userptr);
    glad_glPointSize = (PFNGLPOINTSIZEPROC)load("glPointSize", userptr);
    glad_glColor4bv = (PFNGLCOLOR4BVPROC)load("glColor4bv", userptr);
    glad_glRasterPos2f = (PFNGLRASTERPOS2FPROC)load("glRasterPos2f", userptr);
    glad_glVertex3sv = (PFNGLVERTEX3SVPROC)load("glVertex3sv", userptr);
    glad_glRasterPos2d = (PFNGLRASTERPOS2DPROC)load("glRasterPos2d", userptr);
    glad_glLoadIdentity = (PFNGLLOADIDENTITYPROC)load("glLoadIdentity", userptr);
    glad_glColor3iv = (PFNGLCOLOR3IVPROC)load("glColor3iv", userptr);
    glad_glRasterPos4iv = (PFNGLRASTERPOS4IVPROC)load("glRasterPos4iv", userptr);
    glad_glScaled = (PFNGLSCALEDPROC)load("glScaled", userptr);
    glad_glIsList = (PFNGLISLISTPROC)load("glIsList", userptr);
    glad_glColor3b = (PFNGLCOLOR3BPROC)load("glColor3b", userptr);
    glad_glEdgeFlag = (PFNGLEDGEFLAGPROC)load("glEdgeFlag", userptr);
    glad_glLightModeli = (PFNGLLIGHTMODELIPROC)load("glLightModeli", userptr);
    glad_glColor3f = (PFNGLCOLOR3FPROC)load("glColor3f", userptr);
    glad_glTexCoord1i = (PFNGLTEXCOORD1IPROC)load("glTexCoord1i", userptr);
    glad_glColor3d = (PFNGLCOLOR3DPROC)load("glColor3d", userptr);
    glad_glClearAccum = (PFNGLCLEARACCUMPROC)load("glClearAccum", userptr);
    glad_glTexCoord1d = (PFNGLTEXCOORD1DPROC)load("glTexCoord1d", userptr);
    glad_glVertex3i = (PFNGLVERTEX3IPROC)load("glVertex3i", userptr);
    glad_glTexCoord1f = (PFNGLTEXCOORD1FPROC)load("glTexCoord1f", userptr);
    glad_glColor3i = (PFNGLCOLOR3IPROC)load("glColor3i", userptr);
    glad_glTexEnvi = (PFNGLTEXENVIPROC)load("glTexEnvi", userptr);
    glad_glColor3s = (PFNGLCOLOR3SPROC)load("glColor3s", userptr);
    glad_glVertex3s = (PFNGLVERTEX3SPROC)load("glVertex3s", userptr);
    glad_glTexGeniv = (PFNGLTEXGENIVPROC)load("glTexGeniv", userptr);
    glad_glRasterPos2dv = (PFNGLRASTERPOS2DVPROC)load("glRasterPos2dv", userptr);
    glad_glColorMaterial = (PFNGLCOLORMATERIALPROC)load("glColorMaterial", userptr);
    glad_glEvalCoord2fv = (PFNGLEVALCOORD2FVPROC)load("glEvalCoord2fv", userptr);
    glad_glRectdv = (PFNGLRECTDVPROC)load("glRectdv", userptr);
    glad_glTexCoord1iv = (PFNGLTEXCOORD1IVPROC)load("glTexCoord1iv", userptr);
    glad_glVertex4sv = (PFNGLVERTEX4SVPROC)load("glVertex4sv", userptr);
    glad_glGenLists = (PFNGLGENLISTSPROC)load("glGenLists", userptr);
    glad_glColor3bv = (PFNGLCOLOR3BVPROC)load("glColor3bv", userptr);
    glad_glReadBuffer = (PFNGLREADBUFFERPROC)load("glReadBuffer", userptr);
    glad_glFeedbackBuffer = (PFNGLFEEDBACKBUFFERPROC)load("glFeedbackBuffer", userptr);
    glad_glVertex2iv = (PFNGLVERTEX2IVPROC)load("glVertex2iv", userptr);
    glad_glGetTexGendv = (PFNGLGETTEXGENDVPROC)load("glGetTexGendv", userptr);
    glad_glColor3sv = (PFNGLCOLOR3SVPROC)load("glColor3sv", userptr);
    glad_glRasterPos3dv = (PFNGLRASTERPOS3DVPROC)load("glRasterPos3dv", userptr);
    glad_glEndList = (PFNGLENDLISTPROC)load("glEndList", userptr);
    glad_glLightModelfv = (PFNGLLIGHTMODELFVPROC)load("glLightModelfv", userptr);
    glad_glGetPixelMapuiv = (PFNGLGETPIXELMAPUIVPROC)load("glGetPixelMapuiv", userptr);
    glad_glDeleteLists = (PFNGLDELETELISTSPROC)load("glDeleteLists", userptr);
    glad_glGetClipPlane = (PFNGLGETCLIPPLANEPROC)load("glGetClipPlane", userptr);
    glad_glRasterPos4i = (PFNGLRASTERPOS4IPROC)load("glRasterPos4i", userptr);
    glad_glTexCoord2d = (PFNGLTEXCOORD2DPROC)load("glTexCoord2d", userptr);
    glad_glPopMatrix = (PFNGLPOPMATRIXPROC)load("glPopMatrix", userptr);
    glad_glTexCoord2f = (PFNGLTEXCOORD2FPROC)load("glTexCoord2f", userptr);
    glad_glPixelTransferi = (PFNGLPIXELTRANSFERIPROC)load("glPixelTransferi", userptr);
    glad_glColor4iv = (PFNGLCOLOR4IVPROC)load("glColor4iv", userptr);
    glad_glColor3usv = (PFNGLCOLOR3USVPROC)load("glColor3usv", userptr);
    glad_glPassThrough = (PFNGLPASSTHROUGHPROC)load("glPassThrough", userptr);
    glad_glCallList = (PFNGLCALLLISTPROC)load("glCallList", userptr);
    glad_glTexCoord2i = (PFNGLTEXCOORD2IPROC)load("glTexCoord2i", userptr);
    glad_glRasterPos4d = (PFNGLRASTERPOS4DPROC)load("glRasterPos4d", userptr);
    glad_glRasterPos4f = (PFNGLRASTERPOS4FPROC)load("glRasterPos4f", userptr);
    glad_glTranslatef = (PFNGLTRANSLATEFPROC)load("glTranslatef", userptr);
    glad_glGetDoublev = (PFNGLGETDOUBLEVPROC)load("glGetDoublev", userptr);
    glad_glBegin = (PFNGLBEGINPROC)load("glBegin", userptr);
    glad_glTexEnvfv = (PFNGLTEXENVFVPROC)load("glTexEnvfv", userptr);
    glad_glColor3ubv = (PFNGLCOLOR3UBVPROC)load("glColor3ubv", userptr);
    glad_glTexCoord2s = (PFNGLTEXCOORD2SPROC)load("glTexCoord2s", userptr);
    glad_glVertex3fv = (PFNGLVERTEX3FVPROC)load("glVertex3fv", userptr);
    glad_glRasterPos4s = (PFNGLRASTERPOS4SPROC)load("glRasterPos4s", userptr);
    glad_glMaterialiv = (PFNGLMATERIALIVPROC)load("glMaterialiv", userptr);
    glad_glFogf = (PFNGLFOGFPROC)load("glFogf", userptr);
    glad_glTexCoord4f = (PFNGLTEXCOORD4FPROC)load("glTexCoord4f", userptr);
    glad_glLightModelf = (PFNGLLIGHTMODELFPROC)load("glLightModelf", userptr);
    glad_glVertex4s = (PFNGLVERTEX4SPROC)load("glVertex4s", userptr);
    glad_glLightfv = (PFNGLLIGHTFVPROC)load("glLightfv", userptr);
    glad_glVertex2sv = (PFNGLVERTEX2SVPROC)load("glVertex2sv", userptr);
    glad_glTranslated = (PFNGLTRANSLATEDPROC)load("glTranslated", userptr);
    glad_glClear = (PFNGLCLEARPROC)load("glClear", userptr);
    glad_glIndexMask = (PFNGLINDEXMASKPROC)load("glIndexMask", userptr);
    glad_glNormal3dv = (PFNGLNORMAL3DVPROC)load("glNormal3dv", userptr);
    glad_glVertex4d = (PFNGLVERTEX4DPROC)load("glVertex4d", userptr);
    glad_glIsEnabled = (PFNGLISENABLEDPROC)load("glIsEnabled", userptr);
    glad_glVertex4i = (PFNGLVERTEX4IPROC)load("glVertex4i", userptr);
    glad_glStencilOp = (PFNGLSTENCILOPPROC)load("glStencilOp", userptr);
    glad_glReadPixels = (PFNGLREADPIXELSPROC)load("glReadPixels", userptr);
    glad_glClearDepth = (PFNGLCLEARDEPTHPROC)load("glClearDepth", userptr);
    glad_glTexCoord4i = (PFNGLTEXCOORD4IPROC)load("glTexCoord4i", userptr);
    glad_glRasterPos2sv = (PFNGLRASTERPOS2SVPROC)load("glRasterPos2sv", userptr);
    glad_glMatrixMode = (PFNGLMATRIXMODEPROC)load("glMatrixMode", userptr);
    glad_glTexCoord1sv = (PFNGLTEXCOORD1SVPROC)load("glTexCoord1sv", userptr);
    glad_glTexCoord3i = (PFNGLTEXCOORD3IPROC)load("glTexCoord3i", userptr);
    glad_glTexCoord3sv = (PFNGLTEXCOORD3SVPROC)load("glTexCoord3sv", userptr);
    glad_glRasterPos3i = (PFNGLRASTERPOS3IPROC)load("glRasterPos3i", userptr);
    glad_glMapGrid1f = (PFNGLMAPGRID1FPROC)load("glMapGrid1f", userptr);
    glad_glRasterPos3d = (PFNGLRASTERPOS3DPROC)load("glRasterPos3d", userptr);
    glad_glRasterPos3f = (PFNGLRASTERPOS3FPROC)load("glRasterPos3f", userptr);
    glad_glTexCoord1dv = (PFNGLTEXCOORD1DVPROC)load("glTexCoord1dv", userptr);
    glad_glTexImage1D = (PFNGLTEXIMAGE1DPROC)load("glTexImage1D", userptr);
    glad_glClipPlane = (PFNGLCLIPPLANEPROC)load("glClipPlane", userptr);
    glad_glTexCoord3d = (PFNGLTEXCOORD3DPROC)load("glTexCoord3d", userptr);
    glad_glGetError = (PFNGLGETERRORPROC)load("glGetError", userptr);
    glad_glMateriali = (PFNGLMATERIALIPROC)load("glMateriali", userptr);
    glad_glGetTexEnviv = (PFNGLGETTEXENVIVPROC)load("glGetTexEnviv", userptr);
    glad_glTexParameteriv = (PFNGLTEXPARAMETERIVPROC)load("glTexParameteriv", userptr);
    glad_glFrustum = (PFNGLFRUSTUMPROC)load("glFrustum", userptr);
    glad_glGetMapfv = (PFNGLGETMAPFVPROC)load("glGetMapfv", userptr);
    glad_glNewList = (PFNGLNEWLISTPROC)load("glNewList", userptr);
    glad_glTexCoord3s = (PFNGLTEXCOORD3SPROC)load("glTexCoord3s", userptr);
    glad_glMaterialf = (PFNGLMATERIALFPROC)load("glMaterialf", userptr);
    glad_glGetTexImage = (PFNGLGETTEXIMAGEPROC)load("glGetTexImage", userptr);
    glad_glMap2f = (PFNGLMAP2FPROC)load("glMap2f", userptr);
    glad_glTexCoord1s = (PFNGLTEXCOORD1SPROC)load("glTexCoord1s", userptr);
    glad_glRasterPos3s = (PFNGLRASTERPOS3SPROC)load("glRasterPos3s", userptr);
    glad_glEvalCoord1d = (PFNGLEVALCOORD1DPROC)load("glEvalCoord1d", userptr);
    glad_glGetTexLevelParameterfv = (PFNGLGETTEXLEVELPARAMETERFVPROC)load("glGetTexLevelParameterfv", userptr);
    glad_glEvalCoord1f = (PFNGLEVALCOORD1FPROC)load("glEvalCoord1f", userptr);
    glad_glCallLists = (PFNGLCALLLISTSPROC)load("glCallLists", userptr);
    glad_glGetPixelMapfv = (PFNGLGETPIXELMAPFVPROC)load("glGetPixelMapfv", userptr);
    glad_glIndexsv = (PFNGLINDEXSVPROC)load("glIndexsv", userptr);
    glad_glRasterPos4dv = (PFNGLRASTERPOS4DVPROC)load("glRasterPos4dv", userptr);
    glad_glStencilFunc = (PFNGLSTENCILFUNCPROC)load("glStencilFunc", userptr);
    glad_glMap2d = (PFNGLMAP2DPROC)load("glMap2d", userptr);
    glad_glGetIntegerv = (PFNGLGETINTEGERVPROC)load("glGetIntegerv", userptr);
    glad_glColor4uiv = (PFNGLCOLOR4UIVPROC)load("glColor4uiv", userptr);
    glad_glRectiv = (PFNGLRECTIVPROC)load("glRectiv", userptr);
    glad_glVertex3iv = (PFNGLVERTEX3IVPROC)load("glVertex3iv", userptr);
    glad_glGetTexGenfv = (PFNGLGETTEXGENFVPROC)load("glGetTexGenfv", userptr);
    glad_glDrawBuffer = (PFNGLDRAWBUFFERPROC)load("glDrawBuffer", userptr);
    glad_glBitmap = (PFNGLBITMAPPROC)load("glBitmap", userptr);
    glad_glTexGenf = (PFNGLTEXGENFPROC)load("glTexGenf", userptr);
    glad_glEvalMesh1 = (PFNGLEVALMESH1PROC)load("glEvalMesh1", userptr);
    glad_glTexCoord2iv = (PFNGLTEXCOORD2IVPROC)load("glTexCoord2iv", userptr);
    glad_glRasterPos4sv = (PFNGLRASTERPOS4SVPROC)load("glRasterPos4sv", userptr);
    glad_glLoadMatrixf = (PFNGLLOADMATRIXFPROC)load("glLoadMatrixf", userptr);
    glad_glColor4s = (PFNGLCOLOR4SPROC)load("glColor4s", userptr);
    glad_glScalef = (PFNGLSCALEFPROC)load("glScalef", userptr);
    glad_glLineStipple = (PFNGLLINESTIPPLEPROC)load("glLineStipple", userptr);
    glad_glTexImage2D = (PFNGLTEXIMAGE2DPROC)load("glTexImage2D", userptr);
    glad_glMapGrid2f = (PFNGLMAPGRID2FPROC)load("glMapGrid2f", userptr);
    glad_glTexCoord4d = (PFNGLTEXCOORD4DPROC)load("glTexCoord4d", userptr);
    glad_glStencilMask = (PFNGLSTENCILMASKPROC)load("glStencilMask", userptr);
    glad_glVertex3dv = (PFNGLVERTEX3DVPROC)load("glVertex3dv", userptr);
    glad_glDrawPixels = (PFNGLDRAWPIXELSPROC)load("glDrawPixels", userptr);
    glad_glMultMatrixd = (PFNGLMULTMATRIXDPROC)load("glMultMatrixd", userptr);
    glad_glRasterPos3fv = (PFNGLRASTERPOS3FVPROC)load("glRasterPos3fv", userptr);
    glad_glColor4ubv = (PFNGLCOLOR4UBVPROC)load("glColor4ubv", userptr);
    glad_glColor4b = (PFNGLCOLOR4BPROC)load("glColor4b", userptr);
    glad_glGetMaterialiv = (PFNGLGETMATERIALIVPROC)load("glGetMaterialiv", userptr);
    glad_glShadeModel = (PFNGLSHADEMODELPROC)load("glShadeModel", userptr);
    glad_glColor4f = (PFNGLCOLOR4FPROC)load("glColor4f", userptr);
    glad_glColor4d = (PFNGLCOLOR4DPROC)load("glColor4d", userptr);
    glad_glColor4i = (PFNGLCOLOR4IPROC)load("glColor4i", userptr);
    glad_glTexParameterfv = (PFNGLTEXPARAMETERFVPROC)load("glTexParameterfv", userptr);
    glad_glMapGrid1d = (PFNGLMAPGRID1DPROC)load("glMapGrid1d", userptr);
    glad_glRasterPos3iv = (PFNGLRASTERPOS3IVPROC)load("glRasterPos3iv", userptr);
    glad_glVertex4f = (PFNGLVERTEX4FPROC)load("glVertex4f", userptr);
    glad_glEnable = (PFNGLENABLEPROC)load("glEnable", userptr);
    glad_glVertex2dv = (PFNGLVERTEX2DVPROC)load("glVertex2dv", userptr);
    glad_glColor4usv = (PFNGLCOLOR4USVPROC)load("glColor4usv", userptr);
    glad_glColor4fv = (PFNGLCOLOR4FVPROC)load("glColor4fv", userptr);
    glad_glTexCoord1fv = (PFNGLTEXCOORD1FVPROC)load("glTexCoord1fv", userptr);
    glad_glLoadMatrixd = (PFNGLLOADMATRIXDPROC)load("glLoadMatrixd", userptr);
    glad_glOrtho = (PFNGLORTHOPROC)load("glOrtho", userptr);
    glad_glNormal3s = (PFNGLNORMAL3SPROC)load("glNormal3s", userptr);
    glad_glPushMatrix = (PFNGLPUSHMATRIXPROC)load("glPushMatrix", userptr);
    glad_glTexEnviv = (PFNGLTEXENVIVPROC)load("glTexEnviv", userptr);
    glad_glRasterPos2iv = (PFNGLRASTERPOS2IVPROC)load("glRasterPos2iv", userptr);
    glad_glEvalPoint1 = (PFNGLEVALPOINT1PROC)load("glEvalPoint1", userptr);
    glad_glFinish = (PFNGLFINISHPROC)load("glFinish", userptr);
    glad_glTexCoord2sv = (PFNGLTEXCOORD2SVPROC)load("glTexCoord2sv", userptr);
    glad_glNormal3i = (PFNGLNORMAL3IPROC)load("glNormal3i", userptr);
    glad_glNormal3f = (PFNGLNORMAL3FPROC)load("glNormal3f", userptr);
    glad_glNormal3d = (PFNGLNORMAL3DPROC)load("glNormal3d", userptr);
    glad_glNormal3b = (PFNGLNORMAL3BPROC)load("glNormal3b", userptr);
    glad_glBlendFunc = (PFNGLBLENDFUNCPROC)load("glBlendFunc", userptr);
    glad_glRasterPos2s = (PFNGLRASTERPOS2SPROC)load("glRasterPos2s", userptr);
    glad_glPixelMapusv = (PFNGLPIXELMAPUSVPROC)load("glPixelMapusv", userptr);
    glad_glEvalPoint2 = (PFNGLEVALPOINT2PROC)load("glEvalPoint2", userptr);
    glad_glGetTexGeniv = (PFNGLGETTEXGENIVPROC)load("glGetTexGeniv", userptr);
    glad_glMaterialfv = (PFNGLMATERIALFVPROC)load("glMaterialfv", userptr);
    glad_glGetLightfv = (PFNGLGETLIGHTFVPROC)load("glGetLightfv", userptr);
    glad_glViewport = (PFNGLVIEWPORTPROC)load("glViewport", userptr);
    glad_glLightiv = (PFNGLLIGHTIVPROC)load("glLightiv", userptr);
    glad_glIndexdv = (PFNGLINDEXDVPROC)load("glIndexdv", userptr);
    glad_glTexCoord3iv = (PFNGLTEXCOORD3IVPROC)load("glTexCoord3iv", userptr);
    glad_glDepthMask = (PFNGLDEPTHMASKPROC)load("glDepthMask", userptr);
    glad_glNormal3fv = (PFNGLNORMAL3FVPROC)load("glNormal3fv", userptr);
    glad_glColor3fv = (PFNGLCOLOR3FVPROC)load("glColor3fv", userptr);
    glad_glTexEnvf = (PFNGLTEXENVFPROC)load("glTexEnvf", userptr);
    glad_glDepthRange = (PFNGLDEPTHRANGEPROC)load("glDepthRange", userptr);
    glad_glTexGenfv = (PFNGLTEXGENFVPROC)load("glTexGenfv", userptr);
    glad_glTexParameterf = (PFNGLTEXPARAMETERFPROC)load("glTexParameterf", userptr);
    glad_glLightModeliv = (PFNGLLIGHTMODELIVPROC)load("glLightModeliv", userptr);
    glad_glTexParameteri = (PFNGLTEXPARAMETERIPROC)load("glTexParameteri", userptr);
    glad_glFrontFace = (PFNGLFRONTFACEPROC)load("glFrontFace", userptr);
    glad_glTexGend = (PFNGLTEXGENDPROC)load("glTexGend", userptr);
    glad_glEnd = (PFNGLENDPROC)load("glEnd", userptr);
    glad_glLoadName = (PFNGLLOADNAMEPROC)load("glLoadName", userptr);
    glad_glScissor = (PFNGLSCISSORPROC)load("glScissor", userptr);
    glad_glGetBooleanv = (PFNGLGETBOOLEANVPROC)load("glGetBooleanv", userptr);
    glad_glPushName = (PFNGLPUSHNAMEPROC)load("glPushName", userptr);
    glad_glPixelStorei = (PFNGLPIXELSTOREIPROC)load("glPixelStorei", userptr);
    glad_glTexCoord4s = (PFNGLTEXCOORD4SPROC)load("glTexCoord4s", userptr);
    glad_glPixelStoref = (PFNGLPIXELSTOREFPROC)load("glPixelStoref", userptr);
    glad_glRasterPos3sv = (PFNGLRASTERPOS3SVPROC)load("glRasterPos3sv", userptr);
    glad_glEvalCoord1dv = (PFNGLEVALCOORD1DVPROC)load("glEvalCoord1dv", userptr);
    glad_glClearIndex = (PFNGLCLEARINDEXPROC)load("glClearIndex", userptr);
    glad_glMap1d = (PFNGLMAP1DPROC)load("glMap1d", userptr);
    glad_glRasterPos4fv = (PFNGLRASTERPOS4FVPROC)load("glRasterPos4fv", userptr);
    glad_glMap1f = (PFNGLMAP1FPROC)load("glMap1f", userptr);
}
static void load_GL_VERSION_1_1(GLADloadproc load, void* userptr) {
    if(!GLAD_GL_VERSION_1_1) return;
    glad_glCopyTexImage1D = (PFNGLCOPYTEXIMAGE1DPROC)load("glCopyTexImage1D", userptr);
    glad_glDrawArrays = (PFNGLDRAWARRAYSPROC)load("glDrawArrays", userptr);
    glad_glNormalPointer = (PFNGLNORMALPOINTERPROC)load("glNormalPointer", userptr);
    glad_glVertexPointer = (PFNGLVERTEXPOINTERPROC)load("glVertexPointer", userptr);
    glad_glBindTexture = (PFNGLBINDTEXTUREPROC)load("glBindTexture", userptr);
    glad_glDeleteTextures = (PFNGLDELETETEXTURESPROC)load("glDeleteTextures", userptr);
    glad_glPolygonOffset = (PFNGLPOLYGONOFFSETPROC)load("glPolygonOffset", userptr);
    glad_glGenTextures = (PFNGLGENTEXTURESPROC)load("glGenTextures", userptr);
    glad_glIndexPointer = (PFNGLINDEXPOINTERPROC)load("glIndexPointer", userptr);
    glad_glCopyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC)load("glCopyTexImage2D", userptr);
    glad_glCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC)load("glCopyTexSubImage2D", userptr);
    glad_glPrioritizeTextures = (PFNGLPRIORITIZETEXTURESPROC)load("glPrioritizeTextures", userptr);
    glad_glAreTexturesResident = (PFNGLARETEXTURESRESIDENTPROC)load("glAreTexturesResident", userptr);
    glad_glTexSubImage1D = (PFNGLTEXSUBIMAGE1DPROC)load("glTexSubImage1D", userptr);
    glad_glEdgeFlagPointer = (PFNGLEDGEFLAGPOINTERPROC)load("glEdgeFlagPointer", userptr);
    glad_glTexSubImage2D = (PFNGLTEXSUBIMAGE2DPROC)load("glTexSubImage2D", userptr);
    glad_glDrawElements = (PFNGLDRAWELEMENTSPROC)load("glDrawElements", userptr);
    glad_glIndexubv = (PFNGLINDEXUBVPROC)load("glIndexubv", userptr);
    glad_glPushClientAttrib = (PFNGLPUSHCLIENTATTRIBPROC)load("glPushClientAttrib", userptr);
    glad_glTexCoordPointer = (PFNGLTEXCOORDPOINTERPROC)load("glTexCoordPointer", userptr);
    glad_glGetPointerv = (PFNGLGETPOINTERVPROC)load("glGetPointerv", userptr);
    glad_glIndexub = (PFNGLINDEXUBPROC)load("glIndexub", userptr);
    glad_glInterleavedArrays = (PFNGLINTERLEAVEDARRAYSPROC)load("glInterleavedArrays", userptr);
    glad_glPopClientAttrib = (PFNGLPOPCLIENTATTRIBPROC)load("glPopClientAttrib", userptr);
    glad_glCopyTexSubImage1D = (PFNGLCOPYTEXSUBIMAGE1DPROC)load("glCopyTexSubImage1D", userptr);
    glad_glEnableClientState = (PFNGLENABLECLIENTSTATEPROC)load("glEnableClientState", userptr);
    glad_glColorPointer = (PFNGLCOLORPOINTERPROC)load("glColorPointer", userptr);
    glad_glIsTexture = (PFNGLISTEXTUREPROC)load("glIsTexture", userptr);
    glad_glArrayElement = (PFNGLARRAYELEMENTPROC)load("glArrayElement", userptr);
    glad_glDisableClientState = (PFNGLDISABLECLIENTSTATEPROC)load("glDisableClientState", userptr);
}
static void load_GL_VERSION_1_2(GLADloadproc load, void* userptr) {
    if(!GLAD_GL_VERSION_1_2) return;
    glad_glTexImage3D = (PFNGLTEXIMAGE3DPROC)load("glTexImage3D", userptr);
    glad_glTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC)load("glTexSubImage3D", userptr);
    glad_glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC)load("glCopyTexSubImage3D", userptr);
    glad_glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC)load("glDrawRangeElements", userptr);
}
static void load_GL_VERSION_1_3(GLADloadproc load, void* userptr) {
    if(!GLAD_GL_VERSION_1_3) return;
    glad_glMultTransposeMatrixf = (PFNGLMULTTRANSPOSEMATRIXFPROC)load("glMultTransposeMatrixf", userptr);
    glad_glCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)load("glCompressedTexSubImage3D", userptr);
    glad_glMultiTexCoord3fv = (PFNGLMULTITEXCOORD3FVPROC)load("glMultiTexCoord3fv", userptr);
    glad_glMultiTexCoord1fv = (PFNGLMULTITEXCOORD1FVPROC)load("glMultiTexCoord1fv", userptr);
    glad_glMultTransposeMatrixd = (PFNGLMULTTRANSPOSEMATRIXDPROC)load("glMultTransposeMatrixd", userptr);
    glad_glMultiTexCoord3i = (PFNGLMULTITEXCOORD3IPROC)load("glMultiTexCoord3i", userptr);
    glad_glMultiTexCoord4s = (PFNGLMULTITEXCOORD4SPROC)load("glMultiTexCoord4s", userptr);
    glad_glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC)load("glSampleCoverage", userptr);
    glad_glGetCompressedTexImage = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)load("glGetCompressedTexImage", userptr);
    glad_glMultiTexCoord4i = (PFNGLMULTITEXCOORD4IPROC)load("glMultiTexCoord4i", userptr);
    glad_glMultiTexCoord1sv = (PFNGLMULTITEXCOORD1SVPROC)load("glMultiTexCoord1sv", userptr);
    glad_glMultiTexCoord3dv = (PFNGLMULTITEXCOORD3DVPROC)load("glMultiTexCoord3dv", userptr);
    glad_glMultiTexCoord4f = (PFNGLMULTITEXCOORD4FPROC)load("glMultiTexCoord4f", userptr);
    glad_glMultiTexCoord3s = (PFNGLMULTITEXCOORD3SPROC)load("glMultiTexCoord3s", userptr);
    glad_glMultiTexCoord4d = (PFNGLMULTITEXCOORD4DPROC)load("glMultiTexCoord4d", userptr);
    glad_glMultiTexCoord3f = (PFNGLMULTITEXCOORD3FPROC)load("glMultiTexCoord3f", userptr);
    glad_glMultiTexCoord3d = (PFNGLMULTITEXCOORD3DPROC)load("glMultiTexCoord3d", userptr);
    glad_glCompressedTexImage1D = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)load("glCompressedTexImage1D", userptr);
    glad_glMultiTexCoord1iv = (PFNGLMULTITEXCOORD1IVPROC)load("glMultiTexCoord1iv", userptr);
    glad_glMultiTexCoord2sv = (PFNGLMULTITEXCOORD2SVPROC)load("glMultiTexCoord2sv", userptr);
    glad_glMultiTexCoord2dv = (PFNGLMULTITEXCOORD2DVPROC)load("glMultiTexCoord2dv", userptr);
    glad_glClientActiveTexture = (PFNGLCLIENTACTIVETEXTUREPROC)load("glClientActiveTexture", userptr);
    glad_glMultiTexCoord2s = (PFNGLMULTITEXCOORD2SPROC)load("glMultiTexCoord2s", userptr);
    glad_glMultiTexCoord2i = (PFNGLMULTITEXCOORD2IPROC)load("glMultiTexCoord2i", userptr);
    glad_glMultiTexCoord2d = (PFNGLMULTITEXCOORD2DPROC)load("glMultiTexCoord2d", userptr);
    glad_glMultiTexCoord2f = (PFNGLMULTITEXCOORD2FPROC)load("glMultiTexCoord2f", userptr);
    glad_glMultiTexCoord3iv = (PFNGLMULTITEXCOORD3IVPROC)load("glMultiTexCoord3iv", userptr);
    glad_glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)load("glCompressedTexImage2D", userptr);
    glad_glMultiTexCoord1d = (PFNGLMULTITEXCOORD1DPROC)load("glMultiTexCoord1d", userptr);
    glad_glMultiTexCoord1f = (PFNGLMULTITEXCOORD1FPROC)load("glMultiTexCoord1f", userptr);
    glad_glMultiTexCoord1i = (PFNGLMULTITEXCOORD1IPROC)load("glMultiTexCoord1i", userptr);
    glad_glActiveTexture = (PFNGLACTIVETEXTUREPROC)load("glActiveTexture", userptr);
    glad_glMultiTexCoord1s = (PFNGLMULTITEXCOORD1SPROC)load("glMultiTexCoord1s", userptr);
    glad_glMultiTexCoord4fv = (PFNGLMULTITEXCOORD4FVPROC)load("glMultiTexCoord4fv", userptr);
    glad_glCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)load("glCompressedTexImage3D", userptr);
    glad_glMultiTexCoord3sv = (PFNGLMULTITEXCOORD3SVPROC)load("glMultiTexCoord3sv", userptr);
    glad_glMultiTexCoord2fv = (PFNGLMULTITEXCOORD2FVPROC)load("glMultiTexCoord2fv", userptr);
    glad_glMultiTexCoord4iv = (PFNGLMULTITEXCOORD4IVPROC)load("glMultiTexCoord4iv", userptr);
    glad_glMultiTexCoord2iv = (PFNGLMULTITEXCOORD2IVPROC)load("glMultiTexCoord2iv", userptr);
    glad_glLoadTransposeMatrixd = (PFNGLLOADTRANSPOSEMATRIXDPROC)load("glLoadTransposeMatrixd", userptr);
    glad_glLoadTransposeMatrixf = (PFNGLLOADTRANSPOSEMATRIXFPROC)load("glLoadTransposeMatrixf", userptr);
    glad_glCompressedTexSubImage1D = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)load("glCompressedTexSubImage1D", userptr);
    glad_glMultiTexCoord1dv = (PFNGLMULTITEXCOORD1DVPROC)load("glMultiTexCoord1dv", userptr);
    glad_glMultiTexCoord4dv = (PFNGLMULTITEXCOORD4DVPROC)load("glMultiTexCoord4dv", userptr);
    glad_glMultiTexCoord4sv = (PFNGLMULTITEXCOORD4SVPROC)load("glMultiTexCoord4sv", userptr);
    glad_glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)load("glCompressedTexSubImage2D", userptr);
}
static void load_GL_VERSION_1_4(GLADloadproc load, void* userptr) {
    if(!GLAD_GL_VERSION_1_4) return;
    glad_glPointParameteri = (PFNGLPOINTPARAMETERIPROC)load("glPointParameteri", userptr);
    glad_glBlendColor = (PFNGLBLENDCOLORPROC)load("glBlendColor", userptr);
    glad_glSecondaryColor3s = (PFNGLSECONDARYCOLOR3SPROC)load("glSecondaryColor3s", userptr);
    glad_glWindowPos2fv = (PFNGLWINDOWPOS2FVPROC)load("glWindowPos2fv", userptr);
    glad_glPointParameterf = (PFNGLPOINTPARAMETERFPROC)load("glPointParameterf", userptr);
    glad_glWindowPos2i = (PFNGLWINDOWPOS2IPROC)load("glWindowPos2i", userptr);
    glad_glWindowPos2f = (PFNGLWINDOWPOS2FPROC)load("glWindowPos2f", userptr);
    glad_glWindowPos2d = (PFNGLWINDOWPOS2DPROC)load("glWindowPos2d", userptr);
    glad_glSecondaryColorPointer = (PFNGLSECONDARYCOLORPOINTERPROC)load("glSecondaryColorPointer", userptr);
    glad_glSecondaryColor3us = (PFNGLSECONDARYCOLOR3USPROC)load("glSecondaryColor3us", userptr);
    glad_glSecondaryColor3uiv = (PFNGLSECONDARYCOLOR3UIVPROC)load("glSecondaryColor3uiv", userptr);
    glad_glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC)load("glPointParameterfv", userptr);
    glad_glWindowPos3iv = (PFNGLWINDOWPOS3IVPROC)load("glWindowPos3iv", userptr);
    glad_glSecondaryColor3ub = (PFNGLSECONDARYCOLOR3UBPROC)load("glSecondaryColor3ub", userptr);
    glad_glFogCoordfv = (PFNGLFOGCOORDFVPROC)load("glFogCoordfv", userptr);
    glad_glSecondaryColor3ui = (PFNGLSECONDARYCOLOR3UIPROC)load("glSecondaryColor3ui", userptr);
    glad_glSecondaryColor3d = (PFNGLSECONDARYCOLOR3DPROC)load("glSecondaryColor3d", userptr);
    glad_glSecondaryColor3f = (PFNGLSECONDARYCOLOR3FPROC)load("glSecondaryColor3f", userptr);
    glad_glSecondaryColor3b = (PFNGLSECONDARYCOLOR3BPROC)load("glSecondaryColor3b", userptr);
    glad_glSecondaryColor3i = (PFNGLSECONDARYCOLOR3IPROC)load("glSecondaryColor3i", userptr);
    glad_glWindowPos3s = (PFNGLWINDOWPOS3SPROC)load("glWindowPos3s", userptr);
    glad_glWindowPos2s = (PFNGLWINDOWPOS2SPROC)load("glWindowPos2s", userptr);
    glad_glWindowPos3i = (PFNGLWINDOWPOS3IPROC)load("glWindowPos3i", userptr);
    glad_glSecondaryColor3ubv = (PFNGLSECONDARYCOLOR3UBVPROC)load("glSecondaryColor3ubv", userptr);
    glad_glSecondaryColor3fv = (PFNGLSECONDARYCOLOR3FVPROC)load("glSecondaryColor3fv", userptr);
    glad_glWindowPos3d = (PFNGLWINDOWPOS3DPROC)load("glWindowPos3d", userptr);
    glad_glSecondaryColor3bv = (PFNGLSECONDARYCOLOR3BVPROC)load("glSecondaryColor3bv", userptr);
    glad_glWindowPos3f = (PFNGLWINDOWPOS3FPROC)load("glWindowPos3f", userptr);
    glad_glWindowPos2sv = (PFNGLWINDOWPOS2SVPROC)load("glWindowPos2sv", userptr);
    glad_glWindowPos2dv = (PFNGLWINDOWPOS2DVPROC)load("glWindowPos2dv", userptr);
    glad_glWindowPos3dv = (PFNGLWINDOWPOS3DVPROC)load("glWindowPos3dv", userptr);
    glad_glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC)load("glBlendFuncSeparate", userptr);
    glad_glMultiDrawElements = (PFNGLMULTIDRAWELEMENTSPROC)load("glMultiDrawElements", userptr);
    glad_glBlendEquation = (PFNGLBLENDEQUATIONPROC)load("glBlendEquation", userptr);
    glad_glPointParameteriv = (PFNGLPOINTPARAMETERIVPROC)load("glPointParameteriv", userptr);
    glad_glSecondaryColor3sv = (PFNGLSECONDARYCOLOR3SVPROC)load("glSecondaryColor3sv", userptr);
    glad_glWindowPos2iv = (PFNGLWINDOWPOS2IVPROC)load("glWindowPos2iv", userptr);
    glad_glFogCoorddv = (PFNGLFOGCOORDDVPROC)load("glFogCoorddv", userptr);
    glad_glSecondaryColor3usv = (PFNGLSECONDARYCOLOR3USVPROC)load("glSecondaryColor3usv", userptr);
    glad_glFogCoordPointer = (PFNGLFOGCOORDPOINTERPROC)load("glFogCoordPointer", userptr);
    glad_glFogCoordd = (PFNGLFOGCOORDDPROC)load("glFogCoordd", userptr);
    glad_glFogCoordf = (PFNGLFOGCOORDFPROC)load("glFogCoordf", userptr);
    glad_glSecondaryColor3dv = (PFNGLSECONDARYCOLOR3DVPROC)load("glSecondaryColor3dv", userptr);
    glad_glWindowPos3sv = (PFNGLWINDOWPOS3SVPROC)load("glWindowPos3sv", userptr);
    glad_glMultiDrawArrays = (PFNGLMULTIDRAWARRAYSPROC)load("glMultiDrawArrays", userptr);
    glad_glWindowPos3fv = (PFNGLWINDOWPOS3FVPROC)load("glWindowPos3fv", userptr);
    glad_glSecondaryColor3iv = (PFNGLSECONDARYCOLOR3IVPROC)load("glSecondaryColor3iv", userptr);
}
static void load_GL_VERSION_1_5(GLADloadproc load, void* userptr) {
    if(!GLAD_GL_VERSION_1_5) return;
    glad_glMapBuffer = (PFNGLMAPBUFFERPROC)load("glMapBuffer", userptr);
    glad_glGetQueryiv = (PFNGLGETQUERYIVPROC)load("glGetQueryiv", userptr);
    glad_glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC)load("glGetBufferParameteriv", userptr);
    glad_glUnmapBuffer = (PFNGLUNMAPBUFFERPROC)load("glUnmapBuffer", userptr);
    glad_glGetBufferSubData = (PFNGLGETBUFFERSUBDATAPROC)load("glGetBufferSubData", userptr);
    glad_glEndQuery = (PFNGLENDQUERYPROC)load("glEndQuery", userptr);
    glad_glGenBuffers = (PFNGLGENBUFFERSPROC)load("glGenBuffers", userptr);
    glad_glBindBuffer = (PFNGLBINDBUFFERPROC)load("glBindBuffer", userptr);
    glad_glGenQueries = (PFNGLGENQUERIESPROC)load("glGenQueries", userptr);
    glad_glBeginQuery = (PFNGLBEGINQUERYPROC)load("glBeginQuery", userptr);
    glad_glGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC)load("glGetQueryObjectuiv", userptr);
    glad_glBufferData = (PFNGLBUFFERDATAPROC)load("glBufferData", userptr);
    glad_glDeleteQueries = (PFNGLDELETEQUERIESPROC)load("glDeleteQueries", userptr);
    glad_glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC)load("glGetBufferPointerv", userptr);
    glad_glBufferSubData = (PFNGLBUFFERSUBDATAPROC)load("glBufferSubData", userptr);
    glad_glGetQueryObjectiv = (PFNGLGETQUERYOBJECTIVPROC)load("glGetQueryObjectiv", userptr);
    glad_glDeleteBuffers = (PFNGLDELETEBUFFERSPROC)load("glDeleteBuffers", userptr);
    glad_glIsBuffer = (PFNGLISBUFFERPROC)load("glIsBuffer", userptr);
    glad_glIsQuery = (PFNGLISQUERYPROC)load("glIsQuery", userptr);
}
static void load_GL_VERSION_2_0(GLADloadproc load, void* userptr) {
    if(!GLAD_GL_VERSION_2_0) return;
    glad_glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC)load("glVertexAttrib4Niv", userptr);
    glad_glStencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC)load("glStencilMaskSeparate", userptr);
    glad_glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC)load("glGetVertexAttribPointerv", userptr);
    glad_glLinkProgram = (PFNGLLINKPROGRAMPROC)load("glLinkProgram", userptr);
    glad_glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC)load("glVertexAttrib4bv", userptr);
    glad_glDeleteProgram = (PFNGLDELETEPROGRAMPROC)load("glDeleteProgram", userptr);
    glad_glCompileShader = (PFNGLCOMPILESHADERPROC)load("glCompileShader", userptr);
    glad_glStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC)load("glStencilOpSeparate", userptr);
    glad_glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC)load("glUniformMatrix3fv", userptr);
    glad_glStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC)load("glStencilFuncSeparate", userptr);
    glad_glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC)load("glVertexAttrib4f", userptr);
    glad_glUniform4iv = (PFNGLUNIFORM4IVPROC)load("glUniform4iv", userptr);
    glad_glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC)load("glVertexAttrib4s", userptr);
    glad_glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC)load("glVertexAttrib4Nusv", userptr);
    glad_glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC)load("glGetVertexAttribfv", userptr);
    glad_glValidateProgram = (PFNGLVALIDATEPROGRAMPROC)load("glValidateProgram", userptr);
    glad_glCreateShader = (PFNGLCREATESHADERPROC)load("glCreateShader", userptr);
    glad_glUniform1i = (PFNGLUNIFORM1IPROC)load("glUniform1i", userptr);
    glad_glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC)load("glVertexAttrib3s", userptr);
    glad_glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC)load("glGetActiveAttrib", userptr);
    glad_glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC)load("glVertexAttrib3dv", userptr);
    glad_glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC)load("glVertexAttrib1d", userptr);
    glad_glGetUniformiv = (PFNGLGETUNIFORMIVPROC)load("glGetUniformiv", userptr);
    glad_glUniform2i = (PFNGLUNIFORM2IPROC)load("glUniform2i", userptr);
    glad_glUniform2f = (PFNGLUNIFORM2FPROC)load("glUniform2f", userptr);
    glad_glGetProgramiv = (PFNGLGETPROGRAMIVPROC)load("glGetProgramiv", userptr);
    glad_glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC)load("glVertexAttribPointer", userptr);
    glad_glDrawBuffers = (PFNGLDRAWBUFFERSPROC)load("glDrawBuffers", userptr);
    glad_glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC)load("glGetUniformLocation", userptr);
    glad_glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC)load("glVertexAttrib2dv", userptr);
    glad_glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC)load("glVertexAttrib4Nuiv", userptr);
    glad_glAttachShader = (PFNGLATTACHSHADERPROC)load("glAttachShader", userptr);
    glad_glUniform3i = (PFNGLUNIFORM3IPROC)load("glUniform3i", userptr);
    glad_glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC)load("glVertexAttrib4Nbv", userptr);
    glad_glUniform3f = (PFNGLUNIFORM3FPROC)load("glUniform3f", userptr);
    glad_glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC)load("glVertexAttrib4ubv", userptr);
    glad_glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC)load("glVertexAttrib1dv", userptr);
    glad_glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC)load("glGetVertexAttribdv", userptr);
    glad_glUniform2iv = (PFNGLUNIFORM2IVPROC)load("glUniform2iv", userptr);
    glad_glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC)load("glVertexAttrib1fv", userptr);
    glad_glUniform1iv = (PFNGLUNIFORM1IVPROC)load("glUniform1iv", userptr);
    glad_glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC)load("glBindAttribLocation", userptr);
    glad_glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC)load("glVertexAttrib3sv", userptr);
    glad_glDetachShader = (PFNGLDETACHSHADERPROC)load("glDetachShader", userptr);
    glad_glGetShaderiv = (PFNGLGETSHADERIVPROC)load("glGetShaderiv", userptr);
    glad_glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC)load("glVertexAttrib3f", userptr);
    glad_glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC)load("glVertexAttrib4uiv", userptr);
    glad_glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC)load("glVertexAttrib3d", userptr);
    glad_glUseProgram = (PFNGLUSEPROGRAMPROC)load("glUseProgram", userptr);
    glad_glShaderSource = (PFNGLSHADERSOURCEPROC)load("glShaderSource", userptr);
    glad_glIsProgram = (PFNGLISPROGRAMPROC)load("glIsProgram", userptr);
    glad_glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC)load("glVertexAttrib1f", userptr);
    glad_glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC)load("glVertexAttrib4fv", userptr);
    glad_glUniform4i = (PFNGLUNIFORM4IPROC)load("glUniform4i", userptr);
    glad_glUniform2fv = (PFNGLUNIFORM2FVPROC)load("glUniform2fv", userptr);
    glad_glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC)load("glEnableVertexAttribArray", userptr);
    glad_glUniform3fv = (PFNGLUNIFORM3FVPROC)load("glUniform3fv", userptr);
    glad_glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC)load("glVertexAttrib2fv", userptr);
    glad_glUniform4f = (PFNGLUNIFORM4FPROC)load("glUniform4f", userptr);
    glad_glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC)load("glGetVertexAttribiv", userptr);
    glad_glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC)load("glVertexAttrib3fv", userptr);
    glad_glUniform3iv = (PFNGLUNIFORM3IVPROC)load("glUniform3iv", userptr);
    glad_glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC)load("glVertexAttrib4iv", userptr);
    glad_glUniform4fv = (PFNGLUNIFORM4FVPROC)load("glUniform4fv", userptr);
    glad_glUniform1f = (PFNGLUNIFORM1FPROC)load("glUniform1f", userptr);
    glad_glGetAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC)load("glGetAttachedShaders", userptr);
    glad_glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC)load("glVertexAttrib1s", userptr);
    glad_glUniform1fv = (PFNGLUNIFORM1FVPROC)load("glUniform1fv", userptr);
    glad_glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC)load("glVertexAttrib4Nubv", userptr);
    glad_glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC)load("glUniformMatrix2fv", userptr);
    glad_glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC)load("glDisableVertexAttribArray", userptr);
    glad_glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC)load("glVertexAttrib4sv", userptr);
    glad_glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC)load("glGetProgramInfoLog", userptr);
    glad_glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC)load("glVertexAttrib4Nub", userptr);
    glad_glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC)load("glGetShaderInfoLog", userptr);
    glad_glIsShader = (PFNGLISSHADERPROC)load("glIsShader", userptr);
    glad_glGetShaderSource = (PFNGLGETSHADERSOURCEPROC)load("glGetShaderSource", userptr);
    glad_glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC)load("glBlendEquationSeparate", userptr);
    glad_glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC)load("glVertexAttrib1sv", userptr);
    glad_glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC)load("glGetAttribLocation", userptr);
    glad_glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC)load("glVertexAttrib4dv", userptr);
    glad_glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC)load("glVertexAttrib2sv", userptr);
    glad_glDeleteShader = (PFNGLDELETESHADERPROC)load("glDeleteShader", userptr);
    glad_glCreateProgram = (PFNGLCREATEPROGRAMPROC)load("glCreateProgram", userptr);
    glad_glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC)load("glVertexAttrib4Nsv", userptr);
    glad_glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC)load("glVertexAttrib2d", userptr);
    glad_glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC)load("glVertexAttrib2f", userptr);
    glad_glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC)load("glVertexAttrib4usv", userptr);
    glad_glGetUniformfv = (PFNGLGETUNIFORMFVPROC)load("glGetUniformfv", userptr);
    glad_glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC)load("glVertexAttrib2s", userptr);
    glad_glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC)load("glUniformMatrix4fv", userptr);
    glad_glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC)load("glGetActiveUniform", userptr);
    glad_glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC)load("glVertexAttrib4d", userptr);
}
static void load_GL_VERSION_2_1(GLADloadproc load, void* userptr) {
    if(!GLAD_GL_VERSION_2_1) return;
    glad_glUniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC)load("glUniformMatrix3x2fv", userptr);
    glad_glUniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC)load("glUniformMatrix3x4fv", userptr);
    glad_glUniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC)load("glUniformMatrix2x4fv", userptr);
    glad_glUniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC)load("glUniformMatrix4x2fv", userptr);
    glad_glUniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC)load("glUniformMatrix2x3fv", userptr);
    glad_glUniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC)load("glUniformMatrix4x3fv", userptr);
}
static void load_GL_VERSION_3_0(GLADloadproc load, void* userptr) {
    if(!GLAD_GL_VERSION_3_0) return;
    glad_glVertexAttribI3ui = (PFNGLVERTEXATTRIBI3UIPROC)load("glVertexAttribI3ui", userptr);
    glad_glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC)load("glFramebufferRenderbuffer", userptr);
    glad_glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC)load("glGetIntegeri_v", userptr);
    glad_glVertexAttribI2ui = (PFNGLVERTEXATTRIBI2UIPROC)load("glVertexAttribI2ui", userptr);
    glad_glGetTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)load("glGetTransformFeedbackVarying", userptr);
    glad_glVertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC)load("glVertexAttribIPointer", userptr);
    glad_glBeginConditionalRender = (PFNGLBEGINCONDITIONALRENDERPROC)load("glBeginConditionalRender", userptr);
    glad_glEnablei = (PFNGLENABLEIPROC)load("glEnablei", userptr);
    glad_glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC)load("glGenRenderbuffers", userptr);
    glad_glUniform4ui = (PFNGLUNIFORM4UIPROC)load("glUniform4ui", userptr);
    glad_glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC)load("glBindFramebuffer", userptr);
    glad_glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC)load("glRenderbufferStorage", userptr);
    glad_glClearBufferfv = (PFNGLCLEARBUFFERFVPROC)load("glClearBufferfv", userptr);
    glad_glColorMaski = (PFNGLCOLORMASKIPROC)load("glColorMaski", userptr);
    glad_glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC)load("glGenVertexArrays", userptr);
    glad_glVertexAttribI4sv = (PFNGLVERTEXATTRIBI4SVPROC)load("glVertexAttribI4sv", userptr);
    glad_glTexParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC)load("glTexParameterIuiv", userptr);
    glad_glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC)load("glGenerateMipmap", userptr);
    glad_glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC)load("glBindRenderbuffer", userptr);
    glad_glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC)load("glDeleteFramebuffers", userptr);
    glad_glUniform1ui = (PFNGLUNIFORM1UIPROC)load("glUniform1ui", userptr);
    glad_glVertexAttribI2i = (PFNGLVERTEXATTRIBI2IPROC)load("glVertexAttribI2i", userptr);
    glad_glClearBufferfi = (PFNGLCLEARBUFFERFIPROC)load("glClearBufferfi", userptr);
    glad_glVertexAttribI3iv = (PFNGLVERTEXATTRIBI3IVPROC)load("glVertexAttribI3iv", userptr);
    glad_glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC)load("glFramebufferTexture2D", userptr);
    glad_glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)load("glGetFramebufferAttachmentParameteriv", userptr);
    glad_glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC)load("glGenFramebuffers", userptr);
    glad_glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC)load("glIsRenderbuffer", userptr);
    glad_glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC)load("glDeleteVertexArrays", userptr);
    glad_glUniform4uiv = (PFNGLUNIFORM4UIVPROC)load("glUniform4uiv", userptr);
    glad_glIsVertexArray = (PFNGLISVERTEXARRAYPROC)load("glIsVertexArray", userptr);
    glad_glVertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC)load("glVertexAttribI4iv", userptr);
    glad_glVertexAttribI4ubv = (PFNGLVERTEXATTRIBI4UBVPROC)load("glVertexAttribI4ubv", userptr);
    glad_glVertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC)load("glVertexAttribI4i", userptr);
    glad_glVertexAttribI1ui = (PFNGLVERTEXATTRIBI1UIPROC)load("glVertexAttribI1ui", userptr);
    glad_glGetUniformuiv = (PFNGLGETUNIFORMUIVPROC)load("glGetUniformuiv", userptr);
    glad_glGetStringi = (PFNGLGETSTRINGIPROC)load("glGetStringi", userptr);
    glad_glGetVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC)load("glGetVertexAttribIiv", userptr);
    glad_glClearBufferuiv = (PFNGLCLEARBUFFERUIVPROC)load("glClearBufferuiv", userptr);
    glad_glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC)load("glGetRenderbufferParameteriv", userptr);
    glad_glClearBufferiv = (PFNGLCLEARBUFFERIVPROC)load("glClearBufferiv", userptr);
    glad_glVertexAttribI2uiv = (PFNGLVERTEXATTRIBI2UIVPROC)load("glVertexAttribI2uiv", userptr);
    glad_glUniform3ui = (PFNGLUNIFORM3UIPROC)load("glUniform3ui", userptr);
    glad_glVertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC)load("glVertexAttribI4uiv", userptr);
    glad_glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC)load("glBindBufferRange", userptr);
    glad_glClampColor = (PFNGLCLAMPCOLORPROC)load("glClampColor", userptr);
    glad_glGetTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC)load("glGetTexParameterIuiv", userptr);
    glad_glVertexAttribI4bv = (PFNGLVERTEXATTRIBI4BVPROC)load("glVertexAttribI4bv", userptr);
    glad_glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC)load("glDeleteRenderbuffers", userptr);
    glad_glVertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC)load("glVertexAttribI4ui", userptr);
    glad_glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC)load("glFramebufferTextureLayer", userptr);
    glad_glTexParameterIiv = (PFNGLTEXPARAMETERIIVPROC)load("glTexParameterIiv", userptr);
    glad_glEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC)load("glEndTransformFeedback", userptr);
    glad_glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC)load("glFlushMappedBufferRange", userptr);
    glad_glBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC)load("glBeginTransformFeedback", userptr);
    glad_glVertexAttribI1iv = (PFNGLVERTEXATTRIBI1IVPROC)load("glVertexAttribI1iv", userptr);
    glad_glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC)load("glCheckFramebufferStatus", userptr);
    glad_glEndConditionalRender = (PFNGLENDCONDITIONALRENDERPROC)load("glEndConditionalRender", userptr);
    glad_glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC)load("glBlitFramebuffer", userptr);
    glad_glIsEnabledi = (PFNGLISENABLEDIPROC)load("glIsEnabledi", userptr);
    glad_glBindBufferBase = (PFNGLBINDBUFFERBASEPROC)load("glBindBufferBase", userptr);
    glad_glMapBufferRange = (PFNGLMAPBUFFERRANGEPROC)load("glMapBufferRange", userptr);
    glad_glFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC)load("glFramebufferTexture1D", userptr);
    glad_glVertexAttribI2iv = (PFNGLVERTEXATTRIBI2IVPROC)load("glVertexAttribI2iv", userptr);
    glad_glBindFragDataLocation = (PFNGLBINDFRAGDATALOCATIONPROC)load("glBindFragDataLocation", userptr);
    glad_glDisablei = (PFNGLDISABLEIPROC)load("glDisablei", userptr);
    glad_glVertexAttribI3i = (PFNGLVERTEXATTRIBI3IPROC)load("glVertexAttribI3i", userptr);
    glad_glVertexAttribI3uiv = (PFNGLVERTEXATTRIBI3UIVPROC)load("glVertexAttribI3uiv", userptr);
    glad_glGetTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC)load("glGetTexParameterIiv", userptr);
    glad_glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)load("glRenderbufferStorageMultisample", userptr);
    glad_glVertexAttribI4usv = (PFNGLVERTEXATTRIBI4USVPROC)load("glVertexAttribI4usv", userptr);
    glad_glVertexAttribI1i = (PFNGLVERTEXATTRIBI1IPROC)load("glVertexAttribI1i", userptr);
    glad_glFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC)load("glFramebufferTexture3D", userptr);
    glad_glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC)load("glIsFramebuffer", userptr);
    glad_glBindVertexArray = (PFNGLBINDVERTEXARRAYPROC)load("glBindVertexArray", userptr);
    glad_glGetVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC)load("glGetVertexAttribIuiv", userptr);
    glad_glGetFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC)load("glGetFragDataLocation", userptr);
    glad_glUniform2uiv = (PFNGLUNIFORM2UIVPROC)load("glUniform2uiv", userptr);
    glad_glVertexAttribI1uiv = (PFNGLVERTEXATTRIBI1UIVPROC)load("glVertexAttribI1uiv", userptr);
    glad_glUniform1uiv = (PFNGLUNIFORM1UIVPROC)load("glUniform1uiv", userptr);
    glad_glTransformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC)load("glTransformFeedbackVaryings", userptr);
    glad_glUniform2ui = (PFNGLUNIFORM2UIPROC)load("glUniform2ui", userptr);
    glad_glUniform3uiv = (PFNGLUNIFORM3UIVPROC)load("glUniform3uiv", userptr);
    glad_glGetBooleani_v = (PFNGLGETBOOLEANI_VPROC)load("glGetBooleani_v", userptr);
}
static void load_GL_VERSION_3_1(GLADloadproc load, void* userptr) {
    if(!GLAD_GL_VERSION_3_1) return;
    glad_glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC)load("glBindBufferRange", userptr);
    glad_glUniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC)load("glUniformBlockBinding", userptr);
    glad_glGetActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC)load("glGetActiveUniformsiv", userptr);
    glad_glGetActiveUniformName = (PFNGLGETACTIVEUNIFORMNAMEPROC)load("glGetActiveUniformName", userptr);
    glad_glCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC)load("glCopyBufferSubData", userptr);
    glad_glGetUniformIndices = (PFNGLGETUNIFORMINDICESPROC)load("glGetUniformIndices", userptr);
    glad_glGetActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)load("glGetActiveUniformBlockName", userptr);
    glad_glGetUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC)load("glGetUniformBlockIndex", userptr);
    glad_glBindBufferBase = (PFNGLBINDBUFFERBASEPROC)load("glBindBufferBase", userptr);
    glad_glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC)load("glGetIntegeri_v", userptr);
    glad_glGetActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC)load("glGetActiveUniformBlockiv", userptr);
    glad_glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC)load("glDrawElementsInstanced", userptr);
    glad_glDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC)load("glDrawArraysInstanced", userptr);
    glad_glTexBuffer = (PFNGLTEXBUFFERPROC)load("glTexBuffer", userptr);
    glad_glPrimitiveRestartIndex = (PFNGLPRIMITIVERESTARTINDEXPROC)load("glPrimitiveRestartIndex", userptr);
}
static void load_GL_VERSION_3_2(GLADloadproc load, void* userptr) {
    if(!GLAD_GL_VERSION_3_2) return;
    glad_glIsSync = (PFNGLISSYNCPROC)load("glIsSync", userptr);
    glad_glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC)load("glClientWaitSync", userptr);
    glad_glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC)load("glFramebufferTexture", userptr);
    glad_glGetBufferParameteri64v = (PFNGLGETBUFFERPARAMETERI64VPROC)load("glGetBufferParameteri64v", userptr);
    glad_glSampleMaski = (PFNGLSAMPLEMASKIPROC)load("glSampleMaski", userptr);
    glad_glFenceSync = (PFNGLFENCESYNCPROC)load("glFenceSync", userptr);
    glad_glGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC)load("glGetMultisamplefv", userptr);
    glad_glGetSynciv = (PFNGLGETSYNCIVPROC)load("glGetSynciv", userptr);
    glad_glMultiDrawElementsBaseVertex = (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)load("glMultiDrawElementsBaseVertex", userptr);
    glad_glGetInteger64i_v = (PFNGLGETINTEGER64I_VPROC)load("glGetInteger64i_v", userptr);
    glad_glTexImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC)load("glTexImage2DMultisample", userptr);
    glad_glWaitSync = (PFNGLWAITSYNCPROC)load("glWaitSync", userptr);
    glad_glDrawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)load("glDrawRangeElementsBaseVertex", userptr);
    glad_glProvokingVertex = (PFNGLPROVOKINGVERTEXPROC)load("glProvokingVertex", userptr);
    glad_glDeleteSync = (PFNGLDELETESYNCPROC)load("glDeleteSync", userptr);
    glad_glDrawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)load("glDrawElementsInstancedBaseVertex", userptr);
    glad_glTexImage3DMultisample = (PFNGLTEXIMAGE3DMULTISAMPLEPROC)load("glTexImage3DMultisample", userptr);
    glad_glDrawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC)load("glDrawElementsBaseVertex", userptr);
    glad_glGetInteger64v = (PFNGLGETINTEGER64VPROC)load("glGetInteger64v", userptr);
}
static void load_GL_VERSION_3_3(GLADloadproc load, void* userptr) {
    if(!GLAD_GL_VERSION_3_3) return;
    glad_glMultiTexCoordP2uiv = (PFNGLMULTITEXCOORDP2UIVPROC)load("glMultiTexCoordP2uiv", userptr);
    glad_glSamplerParameterIuiv = (PFNGLSAMPLERPARAMETERIUIVPROC)load("glSamplerParameterIuiv", userptr);
    glad_glGetSamplerParameterfv = (PFNGLGETSAMPLERPARAMETERFVPROC)load("glGetSamplerParameterfv", userptr);
    glad_glNormalP3ui = (PFNGLNORMALP3UIPROC)load("glNormalP3ui", userptr);
    glad_glSecondaryColorP3ui = (PFNGLSECONDARYCOLORP3UIPROC)load("glSecondaryColorP3ui", userptr);
    glad_glSamplerParameterfv = (PFNGLSAMPLERPARAMETERFVPROC)load("glSamplerParameterfv", userptr);
    glad_glMultiTexCoordP4uiv = (PFNGLMULTITEXCOORDP4UIVPROC)load("glMultiTexCoordP4uiv", userptr);
    glad_glMultiTexCoordP4ui = (PFNGLMULTITEXCOORDP4UIPROC)load("glMultiTexCoordP4ui", userptr);
    glad_glMultiTexCoordP3ui = (PFNGLMULTITEXCOORDP3UIPROC)load("glMultiTexCoordP3ui", userptr);
    glad_glColorP4uiv = (PFNGLCOLORP4UIVPROC)load("glColorP4uiv", userptr);
    glad_glMultiTexCoordP3uiv = (PFNGLMULTITEXCOORDP3UIVPROC)load("glMultiTexCoordP3uiv", userptr);
    glad_glVertexAttribP1uiv = (PFNGLVERTEXATTRIBP1UIVPROC)load("glVertexAttribP1uiv", userptr);
    glad_glTexCoordP4ui = (PFNGLTEXCOORDP4UIPROC)load("glTexCoordP4ui", userptr);
    glad_glNormalP3uiv = (PFNGLNORMALP3UIVPROC)load("glNormalP3uiv", userptr);
    glad_glVertexP2ui = (PFNGLVERTEXP2UIPROC)load("glVertexP2ui", userptr);
    glad_glVertexAttribP4uiv = (PFNGLVERTEXATTRIBP4UIVPROC)load("glVertexAttribP4uiv", userptr);
    glad_glTexCoordP1uiv = (PFNGLTEXCOORDP1UIVPROC)load("glTexCoordP1uiv", userptr);
    glad_glVertexAttribP2uiv = (PFNGLVERTEXATTRIBP2UIVPROC)load("glVertexAttribP2uiv", userptr);
    glad_glTexCoordP2uiv = (PFNGLTEXCOORDP2UIVPROC)load("glTexCoordP2uiv", userptr);
    glad_glTexCoordP3uiv = (PFNGLTEXCOORDP3UIVPROC)load("glTexCoordP3uiv", userptr);
    glad_glBindSampler = (PFNGLBINDSAMPLERPROC)load("glBindSampler", userptr);
    glad_glIsSampler = (PFNGLISSAMPLERPROC)load("glIsSampler", userptr);
    glad_glVertexP3ui = (PFNGLVERTEXP3UIPROC)load("glVertexP3ui", userptr);
    glad_glVertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC)load("glVertexAttribDivisor", userptr);
    glad_glColorP3uiv = (PFNGLCOLORP3UIVPROC)load("glColorP3uiv", userptr);
    glad_glVertexAttribP2ui = (PFNGLVERTEXATTRIBP2UIPROC)load("glVertexAttribP2ui", userptr);
    glad_glMultiTexCoordP1uiv = (PFNGLMULTITEXCOORDP1UIVPROC)load("glMultiTexCoordP1uiv", userptr);
    glad_glVertexAttribP1ui = (PFNGLVERTEXATTRIBP1UIPROC)load("glVertexAttribP1ui", userptr);
    glad_glQueryCounter = (PFNGLQUERYCOUNTERPROC)load("glQueryCounter", userptr);
    glad_glGetSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC)load("glGetSamplerParameterIuiv", userptr);
    glad_glVertexP4uiv = (PFNGLVERTEXP4UIVPROC)load("glVertexP4uiv", userptr);
    glad_glVertexP4ui = (PFNGLVERTEXP4UIPROC)load("glVertexP4ui", userptr);
    glad_glTexCoordP3ui = (PFNGLTEXCOORDP3UIPROC)load("glTexCoordP3ui", userptr);
    glad_glMultiTexCoordP1ui = (PFNGLMULTITEXCOORDP1UIPROC)load("glMultiTexCoordP1ui", userptr);
    glad_glGenSamplers = (PFNGLGENSAMPLERSPROC)load("glGenSamplers", userptr);
    glad_glTexCoordP1ui = (PFNGLTEXCOORDP1UIPROC)load("glTexCoordP1ui", userptr);
    glad_glVertexP3uiv = (PFNGLVERTEXP3UIVPROC)load("glVertexP3uiv", userptr);
    glad_glGetQueryObjectui64v = (PFNGLGETQUERYOBJECTUI64VPROC)load("glGetQueryObjectui64v", userptr);
    glad_glTexCoordP2ui = (PFNGLTEXCOORDP2UIPROC)load("glTexCoordP2ui", userptr);
    glad_glBindFragDataLocationIndexed = (PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)load("glBindFragDataLocationIndexed", userptr);
    glad_glMultiTexCoordP2ui = (PFNGLMULTITEXCOORDP2UIPROC)load("glMultiTexCoordP2ui", userptr);
    glad_glSamplerParameterIiv = (PFNGLSAMPLERPARAMETERIIVPROC)load("glSamplerParameterIiv", userptr);
    glad_glGetQueryObjecti64v = (PFNGLGETQUERYOBJECTI64VPROC)load("glGetQueryObjecti64v", userptr);
    glad_glSamplerParameteri = (PFNGLSAMPLERPARAMETERIPROC)load("glSamplerParameteri", userptr);
    glad_glDeleteSamplers = (PFNGLDELETESAMPLERSPROC)load("glDeleteSamplers", userptr);
    glad_glVertexAttribP3uiv = (PFNGLVERTEXATTRIBP3UIVPROC)load("glVertexAttribP3uiv", userptr);
    glad_glSamplerParameterf = (PFNGLSAMPLERPARAMETERFPROC)load("glSamplerParameterf", userptr);
    glad_glGetSamplerParameterIiv = (PFNGLGETSAMPLERPARAMETERIIVPROC)load("glGetSamplerParameterIiv", userptr);
    glad_glGetFragDataIndex = (PFNGLGETFRAGDATAINDEXPROC)load("glGetFragDataIndex", userptr);
    glad_glSecondaryColorP3uiv = (PFNGLSECONDARYCOLORP3UIVPROC)load("glSecondaryColorP3uiv", userptr);
    glad_glTexCoordP4uiv = (PFNGLTEXCOORDP4UIVPROC)load("glTexCoordP4uiv", userptr);
    glad_glColorP4ui = (PFNGLCOLORP4UIPROC)load("glColorP4ui", userptr);
    glad_glColorP3ui = (PFNGLCOLORP3UIPROC)load("glColorP3ui", userptr);
    glad_glVertexAttribP3ui = (PFNGLVERTEXATTRIBP3UIPROC)load("glVertexAttribP3ui", userptr);
    glad_glVertexAttribP4ui = (PFNGLVERTEXATTRIBP4UIPROC)load("glVertexAttribP4ui", userptr);
    glad_glGetSamplerParameteriv = (PFNGLGETSAMPLERPARAMETERIVPROC)load("glGetSamplerParameteriv", userptr);
    glad_glSamplerParameteriv = (PFNGLSAMPLERPARAMETERIVPROC)load("glSamplerParameteriv", userptr);
    glad_glVertexP2uiv = (PFNGLVERTEXP2UIVPROC)load("glVertexP2uiv", userptr);
}
static void load_GL_VERSION_4_0(GLADloadproc load, void* userptr) {
    if(!GLAD_GL_VERSION_4_0) return;
    glad_glResumeTransformFeedback = (PFNGLRESUMETRANSFORMFEEDBACKPROC)load("glResumeTransformFeedback", userptr);
    glad_glEndQueryIndexed = (PFNGLENDQUERYINDEXEDPROC)load("glEndQueryIndexed", userptr);
    glad_glUniformMatrix3x4dv = (PFNGLUNIFORMMATRIX3X4DVPROC)load("glUniformMatrix3x4dv", userptr);
    glad_glUniform1dv = (PFNGLUNIFORM1DVPROC)load("glUniform1dv", userptr);
    glad_glGetProgramStageiv = (PFNGLGETPROGRAMSTAGEIVPROC)load("glGetProgramStageiv", userptr);
    glad_glUniformSubroutinesuiv = (PFNGLUNIFORMSUBROUTINESUIVPROC)load("glUniformSubroutinesuiv", userptr);
    glad_glUniformMatrix3x2dv = (PFNGLUNIFORMMATRIX3X2DVPROC)load("glUniformMatrix3x2dv", userptr);
    glad_glIsTransformFeedback = (PFNGLISTRANSFORMFEEDBACKPROC)load("glIsTransformFeedback", userptr);
    glad_glGetActiveSubroutineUniformName = (PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)load("glGetActiveSubroutineUniformName", userptr);
    glad_glUniformMatrix4x3dv = (PFNGLUNIFORMMATRIX4X3DVPROC)load("glUniformMatrix4x3dv", userptr);
    glad_glUniform4d = (PFNGLUNIFORM4DPROC)load("glUniform4d", userptr);
    glad_glUniform2d = (PFNGLUNIFORM2DPROC)load("glUniform2d", userptr);
    glad_glDrawElementsIndirect = (PFNGLDRAWELEMENTSINDIRECTPROC)load("glDrawElementsIndirect", userptr);
    glad_glGetUniformdv = (PFNGLGETUNIFORMDVPROC)load("glGetUniformdv", userptr);
    glad_glPauseTransformFeedback = (PFNGLPAUSETRANSFORMFEEDBACKPROC)load("glPauseTransformFeedback", userptr);
    glad_glUniformMatrix4dv = (PFNGLUNIFORMMATRIX4DVPROC)load("glUniformMatrix4dv", userptr);
    glad_glUniformMatrix4x2dv = (PFNGLUNIFORMMATRIX4X2DVPROC)load("glUniformMatrix4x2dv", userptr);
    glad_glGetQueryIndexediv = (PFNGLGETQUERYINDEXEDIVPROC)load("glGetQueryIndexediv", userptr);
    glad_glDrawTransformFeedbackStream = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)load("glDrawTransformFeedbackStream", userptr);
    glad_glGenTransformFeedbacks = (PFNGLGENTRANSFORMFEEDBACKSPROC)load("glGenTransformFeedbacks", userptr);
    glad_glGetActiveSubroutineName = (PFNGLGETACTIVESUBROUTINENAMEPROC)load("glGetActiveSubroutineName", userptr);
    glad_glDrawTransformFeedback = (PFNGLDRAWTRANSFORMFEEDBACKPROC)load("glDrawTransformFeedback", userptr);
    glad_glUniform1d = (PFNGLUNIFORM1DPROC)load("glUniform1d", userptr);
    glad_glBlendFunci = (PFNGLBLENDFUNCIPROC)load("glBlendFunci", userptr);
    glad_glBeginQueryIndexed = (PFNGLBEGINQUERYINDEXEDPROC)load("glBeginQueryIndexed", userptr);
    glad_glBindTransformFeedback = (PFNGLBINDTRANSFORMFEEDBACKPROC)load("glBindTransformFeedback", userptr);
    glad_glMinSampleShading = (PFNGLMINSAMPLESHADINGPROC)load("glMinSampleShading", userptr);
    glad_glGetSubroutineUniformLocation = (PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)load("glGetSubroutineUniformLocation", userptr);
    glad_glUniformMatrix2x4dv = (PFNGLUNIFORMMATRIX2X4DVPROC)load("glUniformMatrix2x4dv", userptr);
    glad_glUniformMatrix2x3dv = (PFNGLUNIFORMMATRIX2X3DVPROC)load("glUniformMatrix2x3dv", userptr);
    glad_glUniform3dv = (PFNGLUNIFORM3DVPROC)load("glUniform3dv", userptr);
    glad_glBlendEquationi = (PFNGLBLENDEQUATIONIPROC)load("glBlendEquationi", userptr);
    glad_glGetSubroutineIndex = (PFNGLGETSUBROUTINEINDEXPROC)load("glGetSubroutineIndex", userptr);
    glad_glUniform2dv = (PFNGLUNIFORM2DVPROC)load("glUniform2dv", userptr);
    glad_glUniform4dv = (PFNGLUNIFORM4DVPROC)load("glUniform4dv", userptr);
    glad_glDeleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC)load("glDeleteTransformFeedbacks", userptr);
    glad_glBlendEquationSeparatei = (PFNGLBLENDEQUATIONSEPARATEIPROC)load("glBlendEquationSeparatei", userptr);
    glad_glUniform3d = (PFNGLUNIFORM3DPROC)load("glUniform3d", userptr);
    glad_glUniformMatrix2dv = (PFNGLUNIFORMMATRIX2DVPROC)load("glUniformMatrix2dv", userptr);
    glad_glGetUniformSubroutineuiv = (PFNGLGETUNIFORMSUBROUTINEUIVPROC)load("glGetUniformSubroutineuiv", userptr);
    glad_glPatchParameterfv = (PFNGLPATCHPARAMETERFVPROC)load("glPatchParameterfv", userptr);
    glad_glDrawArraysIndirect = (PFNGLDRAWARRAYSINDIRECTPROC)load("glDrawArraysIndirect", userptr);
    glad_glGetActiveSubroutineUniformiv = (PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)load("glGetActiveSubroutineUniformiv", userptr);
    glad_glBlendFuncSeparatei = (PFNGLBLENDFUNCSEPARATEIPROC)load("glBlendFuncSeparatei", userptr);
    glad_glPatchParameteri = (PFNGLPATCHPARAMETERIPROC)load("glPatchParameteri", userptr);
    glad_glUniformMatrix3dv = (PFNGLUNIFORMMATRIX3DVPROC)load("glUniformMatrix3dv", userptr);
}
static void load_GL_VERSION_4_1(GLADloadproc load, void* userptr) {
    if(!GLAD_GL_VERSION_4_1) return;
    glad_glProgramUniformMatrix3x4dv = (PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)load("glProgramUniformMatrix3x4dv", userptr);
    glad_glGenProgramPipelines = (PFNGLGENPROGRAMPIPELINESPROC)load("glGenProgramPipelines", userptr);
    glad_glProgramUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC)load("glProgramUniform3iv", userptr);
    glad_glGetShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC)load("glGetShaderPrecisionFormat", userptr);
    glad_glScissorArrayv = (PFNGLSCISSORARRAYVPROC)load("glScissorArrayv", userptr);
    glad_glProgramUniform4dv = (PFNGLPROGRAMUNIFORM4DVPROC)load("glProgramUniform4dv", userptr);
    glad_glProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)load("glProgramUniformMatrix2x4fv", userptr);
    glad_glProgramUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC)load("glProgramUniform1iv", userptr);
    glad_glProgramUniformMatrix2x3dv = (PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)load("glProgramUniformMatrix2x3dv", userptr);
    glad_glProgramUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC)load("glProgramUniformMatrix4fv", userptr);
    glad_glGetProgramPipelineiv = (PFNGLGETPROGRAMPIPELINEIVPROC)load("glGetProgramPipelineiv", userptr);
    glad_glProgramUniform3dv = (PFNGLPROGRAMUNIFORM3DVPROC)load("glProgramUniform3dv", userptr);
    glad_glProgramUniform2dv = (PFNGLPROGRAMUNIFORM2DVPROC)load("glProgramUniform2dv", userptr);
    glad_glValidateProgramPipeline = (PFNGLVALIDATEPROGRAMPIPELINEPROC)load("glValidateProgramPipeline", userptr);
    glad_glReleaseShaderCompiler = (PFNGLRELEASESHADERCOMPILERPROC)load("glReleaseShaderCompiler", userptr);
    glad_glProgramUniform2i = (PFNGLPROGRAMUNIFORM2IPROC)load("glProgramUniform2i", userptr);
    glad_glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC)load("glProgramParameteri", userptr);
    glad_glIsProgramPipeline = (PFNGLISPROGRAMPIPELINEPROC)load("glIsProgramPipeline", userptr);
    glad_glProgramUniform2d = (PFNGLPROGRAMUNIFORM2DPROC)load("glProgramUniform2d", userptr);
    glad_glProgramUniform2f = (PFNGLPROGRAMUNIFORM2FPROC)load("glProgramUniform2f", userptr);
    glad_glGetProgramBinary = (PFNGLGETPROGRAMBINARYPROC)load("glGetProgramBinary", userptr);
    glad_glDepthRangeArrayv = (PFNGLDEPTHRANGEARRAYVPROC)load("glDepthRangeArrayv", userptr);
    glad_glDepthRangeIndexed = (PFNGLDEPTHRANGEINDEXEDPROC)load("glDepthRangeIndexed", userptr);
    glad_glVertexAttribLPointer = (PFNGLVERTEXATTRIBLPOINTERPROC)load("glVertexAttribLPointer", userptr);
    glad_glVertexAttribL3dv = (PFNGLVERTEXATTRIBL3DVPROC)load("glVertexAttribL3dv", userptr);
    glad_glViewportIndexedfv = (PFNGLVIEWPORTINDEXEDFVPROC)load("glViewportIndexedfv", userptr);
    glad_glScissorIndexed = (PFNGLSCISSORINDEXEDPROC)load("glScissorIndexed", userptr);
    glad_glDepthRangef = (PFNGLDEPTHRANGEFPROC)load("glDepthRangef", userptr);
    glad_glVertexAttribL4dv = (PFNGLVERTEXATTRIBL4DVPROC)load("glVertexAttribL4dv", userptr);
    glad_glVertexAttribL2dv = (PFNGLVERTEXATTRIBL2DVPROC)load("glVertexAttribL2dv", userptr);
    glad_glViewportArrayv = (PFNGLVIEWPORTARRAYVPROC)load("glViewportArrayv", userptr);
    glad_glProgramUniform1dv = (PFNGLPROGRAMUNIFORM1DVPROC)load("glProgramUniform1dv", userptr);
    glad_glProgramUniformMatrix3x2dv = (PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)load("glProgramUniformMatrix3x2dv", userptr);
    glad_glProgramUniformMatrix4dv = (PFNGLPROGRAMUNIFORMMATRIX4DVPROC)load("glProgramUniformMatrix4dv", userptr);
    glad_glProgramUniformMatrix4x3dv = (PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)load("glProgramUniformMatrix4x3dv", userptr);
    glad_glVertexAttribL2d = (PFNGLVERTEXATTRIBL2DPROC)load("glVertexAttribL2d", userptr);
    glad_glProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)load("glProgramUniformMatrix4x3fv", userptr);
    glad_glGetFloati_v = (PFNGLGETFLOATI_VPROC)load("glGetFloati_v", userptr);
    glad_glProgramUniform3i = (PFNGLPROGRAMUNIFORM3IPROC)load("glProgramUniform3i", userptr);
    glad_glUseProgramStages = (PFNGLUSEPROGRAMSTAGESPROC)load("glUseProgramStages", userptr);
    glad_glProgramUniformMatrix3dv = (PFNGLPROGRAMUNIFORMMATRIX3DVPROC)load("glProgramUniformMatrix3dv", userptr);
    glad_glProgramUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC)load("glProgramUniform3uiv", userptr);
    glad_glProgramUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC)load("glProgramUniform4iv", userptr);
    glad_glProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)load("glProgramUniformMatrix3x2fv", userptr);
    glad_glProgramUniform3d = (PFNGLPROGRAMUNIFORM3DPROC)load("glProgramUniform3d", userptr);
    glad_glProgramUniformMatrix2dv = (PFNGLPROGRAMUNIFORMMATRIX2DVPROC)load("glProgramUniformMatrix2dv", userptr);
    glad_glProgramUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC)load("glProgramUniform2ui", userptr);
    glad_glProgramUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC)load("glProgramUniform2iv", userptr);
    glad_glProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)load("glProgramUniformMatrix3x4fv", userptr);
    glad_glVertexAttribL1d = (PFNGLVERTEXATTRIBL1DPROC)load("glVertexAttribL1d", userptr);
    glad_glProgramUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC)load("glProgramUniform4uiv", userptr);
    glad_glActiveShaderProgram = (PFNGLACTIVESHADERPROGRAMPROC)load("glActiveShaderProgram", userptr);
    glad_glProgramUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC)load("glProgramUniform4fv", userptr);
    glad_glBindProgramPipeline = (PFNGLBINDPROGRAMPIPELINEPROC)load("glBindProgramPipeline", userptr);
    glad_glScissorIndexedv = (PFNGLSCISSORINDEXEDVPROC)load("glScissorIndexedv", userptr);
    glad_glGetVertexAttribLdv = (PFNGLGETVERTEXATTRIBLDVPROC)load("glGetVertexAttribLdv", userptr);
    glad_glProgramUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC)load("glProgramUniform2fv", userptr);
    glad_glProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)load("glProgramUniformMatrix2x3fv", userptr);
    glad_glProgramUniform4i = (PFNGLPROGRAMUNIFORM4IPROC)load("glProgramUniform4i", userptr);
    glad_glProgramUniform4f = (PFNGLPROGRAMUNIFORM4FPROC)load("glProgramUniform4f", userptr);
    glad_glViewportIndexedf = (PFNGLVIEWPORTINDEXEDFPROC)load("glViewportIndexedf", userptr);
    glad_glProgramUniform4d = (PFNGLPROGRAMUNIFORM4DPROC)load("glProgramUniform4d", userptr);
    glad_glProgramUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC)load("glProgramUniform3fv", userptr);
    glad_glGetProgramPipelineInfoLog = (PFNGLGETPROGRAMPIPELINEINFOLOGPROC)load("glGetProgramPipelineInfoLog", userptr);
    glad_glProgramUniformMatrix2x4dv = (PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)load("glProgramUniformMatrix2x4dv", userptr);
    glad_glProgramBinary = (PFNGLPROGRAMBINARYPROC)load("glProgramBinary", userptr);
    glad_glProgramUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC)load("glProgramUniform4ui", userptr);
    glad_glProgramUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC)load("glProgramUniform1ui", userptr);
    glad_glGetDoublei_v = (PFNGLGETDOUBLEI_VPROC)load("glGetDoublei_v", userptr);
    glad_glShaderBinary = (PFNGLSHADERBINARYPROC)load("glShaderBinary", userptr);
    glad_glProgramUniformMatrix4x2dv = (PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)load("glProgramUniformMatrix4x2dv", userptr);
    glad_glDeleteProgramPipelines = (PFNGLDELETEPROGRAMPIPELINESPROC)load("glDeleteProgramPipelines", userptr);
    glad_glProgramUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC)load("glProgramUniform3ui", userptr);
    glad_glProgramUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC)load("glProgramUniform2uiv", userptr);
    glad_glProgramUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC)load("glProgramUniform1fv", userptr);
    glad_glCreateShaderProgramv = (PFNGLCREATESHADERPROGRAMVPROC)load("glCreateShaderProgramv", userptr);
    glad_glProgramUniform3f = (PFNGLPROGRAMUNIFORM3FPROC)load("glProgramUniform3f", userptr);
    glad_glProgramUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC)load("glProgramUniform1uiv", userptr);
    glad_glVertexAttribL4d = (PFNGLVERTEXATTRIBL4DPROC)load("glVertexAttribL4d", userptr);
    glad_glClearDepthf = (PFNGLCLEARDEPTHFPROC)load("glClearDepthf", userptr);
    glad_glProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)load("glProgramUniformMatrix4x2fv", userptr);
    glad_glProgramUniform1i = (PFNGLPROGRAMUNIFORM1IPROC)load("glProgramUniform1i", userptr);
    glad_glVertexAttribL1dv = (PFNGLVERTEXATTRIBL1DVPROC)load("glVertexAttribL1dv", userptr);
    glad_glVertexAttribL3d = (PFNGLVERTEXATTRIBL3DPROC)load("glVertexAttribL3d", userptr);
    glad_glProgramUniform1d = (PFNGLPROGRAMUNIFORM1DPROC)load("glProgramUniform1d", userptr);
    glad_glProgramUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC)load("glProgramUniformMatrix2fv", userptr);
    glad_glProgramUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC)load("glProgramUniformMatrix3fv", userptr);
    glad_glProgramUniform1f = (PFNGLPROGRAMUNIFORM1FPROC)load("glProgramUniform1f", userptr);
}



static int get_exts( int version, const char **out_exts, int *out_num_exts_i, const char ***out_exts_i) {
    if(version < 30) {
        if (glGetString == NULL) {
            return 0;
        }
        *out_exts = (const char *)glGetString(GL_EXTENSIONS);
    } else {
        int index;
        int num_exts_i = 0;
        const char **exts_i = NULL;
        if (glGetStringi == NULL || glGetIntegerv == NULL) {
            return 0;
        }
        glGetIntegerv(GL_NUM_EXTENSIONS, &num_exts_i);
        if (num_exts_i > 0) {
            exts_i = (const char **)malloc(num_exts_i * sizeof *exts_i);
        }
        if (exts_i == NULL) {
            return 0;
        }
        for(index = 0; index < num_exts_i; index++) {
            exts_i[index] = (const char*)glGetStringi(GL_EXTENSIONS, index);
        }

        *out_num_exts_i = num_exts_i;
        *out_exts_i = exts_i;
    }
    return 1;
}
static void free_exts(const char **exts_i) {
    if (exts_i != NULL) {
        free((char **)exts_i);
        exts_i = NULL;
    }
}
/*
static int has_ext(int version, const char *exts, int num_exts_i, const char **exts_i, const char *ext) {
    if(version < 30) {
        const char *extensions;
        const char *loc;
        const char *terminator;
        extensions = exts;
        if(extensions == NULL || ext == NULL) {
            return 0;
        }
        while(1) {
            loc = strstr(extensions, ext);
            if(loc == NULL) {
                return 0;
            }
            terminator = loc + strlen(ext);
            if((loc == extensions || *(loc - 1) == ' ') &&
                (*terminator == ' ' || *terminator == '\0')) {
                return 1;
            }
            extensions = terminator;
        }
    } else {
        int index;
        for(index = 0; index < num_exts_i; index++) {
            const char *e = exts_i[index];
            if(strcmp(e, ext) == 0) {
                return 1;
            }
        }
    }
    return 0;
}*/

static int find_extensionsGL( int version) {
    const char *exts = NULL;
    int num_exts_i = 0;
    const char **exts_i = NULL;
    if (!get_exts(version, &exts, &num_exts_i, &exts_i)) return 0;


    free_exts(exts_i);
    return 1;
}

static int find_coreGL() {
    /* Thank you @elmindreda
     * https://github.com/elmindreda/greg/blob/master/templates/greg.c.in#L176
     * https://github.com/glfw/glfw/blob/master/src/context.c#L36
     */
    int i, major, minor;
    const char* version;
    const char* prefixes[] = {
        "OpenGL ES-CM ",
        "OpenGL ES-CL ",
        "OpenGL ES ",
        NULL
    };
    version = (const char*) glGetString(GL_VERSION);
    if (!version) return 0;
    for (i = 0;  prefixes[i];  i++) {
        const size_t length = strlen(prefixes[i]);
        if (strncmp(version, prefixes[i], length) == 0) {
            version += length;
            break;
        }
    }
/* PR #18 */
#ifdef _MSC_VER
    sscanf_s(version, "%d.%d", &major, &minor);
#else
    sscanf(version, "%d.%d", &major, &minor);
#endif

    GLAD_GL_VERSION_1_0 = (major == 1 && minor >= 0) || major > 1;
    GLAD_GL_VERSION_1_1 = (major == 1 && minor >= 1) || major > 1;
    GLAD_GL_VERSION_1_2 = (major == 1 && minor >= 2) || major > 1;
    GLAD_GL_VERSION_1_3 = (major == 1 && minor >= 3) || major > 1;
    GLAD_GL_VERSION_1_4 = (major == 1 && minor >= 4) || major > 1;
    GLAD_GL_VERSION_1_5 = (major == 1 && minor >= 5) || major > 1;
    GLAD_GL_VERSION_2_0 = (major == 2 && minor >= 0) || major > 2;
    GLAD_GL_VERSION_2_1 = (major == 2 && minor >= 1) || major > 2;
    GLAD_GL_VERSION_3_0 = (major == 3 && minor >= 0) || major > 3;
    GLAD_GL_VERSION_3_1 = (major == 3 && minor >= 1) || major > 3;
    GLAD_GL_VERSION_3_2 = (major == 3 && minor >= 2) || major > 3;
    GLAD_GL_VERSION_3_3 = (major == 3 && minor >= 3) || major > 3;
    GLAD_GL_VERSION_4_0 = (major == 4 && minor >= 0) || major > 4;
    GLAD_GL_VERSION_4_1 = (major == 4 && minor >= 1) || major > 4;

    return major * 10 + minor;
}

int gladLoadGL( GLADloadproc load, void* userptr) {
    int version;
    glGetString = (PFNGLGETSTRINGPROC)load("glGetString", userptr);
    if(glGetString == NULL) return 0;
    if(glGetString(GL_VERSION) == NULL) return 0;
    version = find_coreGL();

    load_GL_VERSION_1_0(load, userptr);
    load_GL_VERSION_1_1(load, userptr);
    load_GL_VERSION_1_2(load, userptr);
    load_GL_VERSION_1_3(load, userptr);
    load_GL_VERSION_1_4(load, userptr);
    load_GL_VERSION_1_5(load, userptr);
    load_GL_VERSION_2_0(load, userptr);
    load_GL_VERSION_2_1(load, userptr);
    load_GL_VERSION_3_0(load, userptr);
    load_GL_VERSION_3_1(load, userptr);
    load_GL_VERSION_3_2(load, userptr);
    load_GL_VERSION_3_3(load, userptr);
    load_GL_VERSION_4_0(load, userptr);
    load_GL_VERSION_4_1(load, userptr);

    if (!find_extensionsGL(version)) return 0;



    return version;
}

static void* glad_gl_get_proc_from_userptr(const char* name, void *userptr) {
    return ((void* (*)(const char *name))userptr)(name);
}

int gladLoadGLSimple( GLADsimpleloadproc load) {
    return gladLoadGL( glad_gl_get_proc_from_userptr, (void*) load);
}



#ifndef __glad_loader_library_c_
#define __glad_loader_library_c_

#include <stddef.h>

#ifdef _WIN32
#include <windows.h>
#else
#include <dlfcn.h>
#endif


static void* glad_get_dlopen_handle(const char *lib_names[], int length) {
    int i;
    void *handle;

    for (i = 0; i < length; ++i) {
#ifdef _WIN32
        handle = LoadLibraryA(lib_names[i]);
#else
        handle = dlopen(lib_names[i], RTLD_LAZY | RTLD_GLOBAL);
#endif
        if (handle != NULL) {
            return handle;
        }
    }

    return NULL;
}

static void glad_close_dlopen_handle(void* handle) {
    if (handle != NULL) {
#ifdef _WIN32
        FreeLibrary((HMODULE)handle);
#else
        dlclose(handle);
#endif
    }
}

static void* glad_dlsym_handle(void* handle, const char *name) {
    if (handle == NULL) {
        return NULL;
    }

#ifdef _WIN32
    return GetProcAddress((HMODULE)handle, name);
#else
    return dlsym(handle, name);
#endif
}

#endif /* __glad_loader_library_c_ */
#ifdef GLAD_GL

typedef void* (APIENTRYP GLAD_PFNGETPROCADDRESSPROC_PRIVATE)(const char*);
struct _glad_gl_userptr {
    void *gl_handle;
    GLAD_PFNGETPROCADDRESSPROC_PRIVATE gl_get_proc_address_ptr;
};

static void* glad_gl_get_proc(const char *name, void *vuserptr) {
    struct _glad_gl_userptr userptr = *(struct _glad_gl_userptr*) vuserptr;
    void* result = NULL;

#ifndef __APPLE__
    if(userptr.gl_get_proc_address_ptr != NULL) {
        result = userptr.gl_get_proc_address_ptr(name);
    }
#endif
    if(result == NULL) {
        result = glad_dlsym_handle(userptr.gl_handle, name);
    }

    return result;
}

int gladLoadGLInternalLoader() {
#ifdef __APPLE__
    static const char *NAMES[] = {
        "../Frameworks/OpenGL.framework/OpenGL",
        "/Library/Frameworks/OpenGL.framework/OpenGL",
        "/System/Library/Frameworks/OpenGL.framework/OpenGL",
        "/System/Library/Frameworks/OpenGL.framework/Versions/Current/OpenGL"
    };
#elif defined _WIN32
    static const char *NAMES[] = {"opengl32.dll"};
#else
    static const char *NAMES[] = {
#if defined __CYGWIN__
        "libGL-1.so",
#endif
        "libGL.so.1",
        "libGL.so"
    };
#endif

    int version = 0;
    void *handle;
    _glad_gl_userptr userptr;

    handle = glad_get_dlopen_handle(NAMES, sizeof(NAMES) / sizeof(NAMES[0]));
    if (handle) {
        userptr.gl_handle = handle;
#ifdef __APPLE__
        userptr.gl_get_proc_address_ptr = NULL;
#elif defined _WIN32
        userptr.gl_get_proc_address_ptr =
            (GLAD_PFNGETPROCADDRESSPROC_PRIVATE)glad_dlsym_handle(handle, "wglGetProcAddress");
#else
        userptr.gl_get_proc_address_ptr =
            (GLAD_PFNGETPROCADDRESSPROC_PRIVATE) glad_dlsym_handle(handle, "glXGetProcAddressARB");
#endif
        version = gladLoadGL( (GLADloadproc) glad_gl_get_proc, &userptr);

        glad_close_dlopen_handle(handle);
    }

    return version;
}

#endif /* GLAD_GL */
#endif /* GLAD_GL_IMPLEMENTATION */